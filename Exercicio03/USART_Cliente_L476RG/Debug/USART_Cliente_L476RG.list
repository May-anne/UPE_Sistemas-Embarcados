
USART_Cliente_L476RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800558c  0800558c  0000658c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005640  08005640  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005640  08005640  00006640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005648  08005648  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005648  08005648  00006648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800564c  0800564c  0000664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005650  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  2000005c  080056ac  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  080056ac  00007514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7ed  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3b  00000000  00000000  00013879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  000156b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d0  00000000  00000000  000160f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e0a  00000000  00000000  000168c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbf6  00000000  00000000  0003c6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7fdd  00000000  00000000  000482c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013029d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dcc  00000000  00000000  001302e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001330ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005574 	.word	0x08005574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005574 	.word	0x08005574

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fdba 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f82a 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f910 	bl	80007dc <MX_GPIO_Init>
  MX_DMA_Init();
 80005bc:	f000 f8d8 	bl	8000770 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f8a6 	bl	8000710 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005c4:	f000 f874 	bl	80006b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, (uint8_t *)"USART2 OK\r\n", 11, 100);
 80005c8:	2364      	movs	r3, #100	@ 0x64
 80005ca:	220b      	movs	r2, #11
 80005cc:	490b      	ldr	r1, [pc, #44]	@ (80005fc <main+0x50>)
 80005ce:	480c      	ldr	r0, [pc, #48]	@ (8000600 <main+0x54>)
 80005d0:	f002 fe66 	bl	80032a0 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_byte, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	490b      	ldr	r1, [pc, #44]	@ (8000604 <main+0x58>)
 80005d8:	480b      	ldr	r0, [pc, #44]	@ (8000608 <main+0x5c>)
 80005da:	f002 ff49 	bl	8003470 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e6:	f001 fabd 	bl	8001b64 <HAL_GPIO_WritePin>

    while(1)
    {
    	HandleButton();
 80005ea:	f000 f965 	bl	80008b8 <HandleButton>
    	HandleTable();
 80005ee:	f000 f989 	bl	8000904 <HandleTable>
    	HandleBlink();
 80005f2:	f000 fa09 	bl	8000a08 <HandleBlink>
    	HandleButton();
 80005f6:	bf00      	nop
 80005f8:	e7f7      	b.n	80005ea <main+0x3e>
 80005fa:	bf00      	nop
 80005fc:	0800558c 	.word	0x0800558c
 8000600:	20000100 	.word	0x20000100
 8000604:	200002aa 	.word	0x200002aa
 8000608:	20000078 	.word	0x20000078

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	@ 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fb2c 	bl	8004c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000632:	f001 fad5 	bl	8001be0 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 fafc 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065a:	230a      	movs	r3, #10
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065e:	2307      	movs	r3, #7
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fb0c 	bl	8001c8c <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067a:	f000 fadd 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fed4 	bl	8002444 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a2:	f000 fac9 	bl	8000c38 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3758      	adds	r7, #88	@ 0x58
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b4:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_USART1_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	@ (800070c <MX_USART1_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_USART1_UART_Init+0x58>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_USART1_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_USART1_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_USART1_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_USART1_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_USART1_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_USART1_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_USART1_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_USART1_UART_Init+0x58>)
 80006f4:	f002 fd86 	bl	8003204 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 fa9b 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000078 	.word	0x20000078
 800070c:	40013800 	.word	0x40013800

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	@ (800076c <MX_USART2_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_USART2_UART_Init+0x58>)
 8000754:	f002 fd56 	bl	8003204 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 fa6b 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000100 	.word	0x20000100
 800076c:	40004400 	.word	0x40004400

08000770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_DMA_Init+0x68>)
 8000778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800077a:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <MX_DMA_Init+0x68>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6493      	str	r3, [r2, #72]	@ 0x48
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_DMA_Init+0x68>)
 8000784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	200e      	movs	r0, #14
 8000794:	f000 fe1f 	bl	80013d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000798:	200e      	movs	r0, #14
 800079a:	f000 fe38 	bl	800140e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	200f      	movs	r0, #15
 80007a4:	f000 fe17 	bl	80013d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007a8:	200f      	movs	r0, #15
 80007aa:	f000 fe30 	bl	800140e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2010      	movs	r0, #16
 80007b4:	f000 fe0f 	bl	80013d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007b8:	2010      	movs	r0, #16
 80007ba:	f000 fe28 	bl	800140e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	2011      	movs	r0, #17
 80007c4:	f000 fe07 	bl	80013d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007c8:	2011      	movs	r0, #17
 80007ca:	f000 fe20 	bl	800140e <HAL_NVIC_EnableIRQ>

}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b2f      	ldr	r3, [pc, #188]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	4a2e      	ldr	r2, [pc, #184]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fe:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a28      	ldr	r2, [pc, #160]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a22      	ldr	r2, [pc, #136]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_GPIO_Init+0xd4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2120      	movs	r1, #32
 8000856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085a:	f001 f983 	bl	8001b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000864:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	480f      	ldr	r0, [pc, #60]	@ (80008b4 <MX_GPIO_Init+0xd8>)
 8000876:	f000 ffcb 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800087a:	2320      	movs	r3, #32
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f000 ffbc 	bl	8001810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2028      	movs	r0, #40	@ 0x28
 800089e:	f000 fd9a 	bl	80013d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a2:	2028      	movs	r0, #40	@ 0x28
 80008a4:	f000 fdb3 	bl	800140e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	@ 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000
 80008b4:	48000800 	.word	0x48000800

080008b8 <HandleButton>:

/* USER CODE BEGIN 4 */

static void HandleButton(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
    if (buttonPressed) {
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HandleButton+0x40>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d012      	beq.n	80008ee <HandleButton+0x36>
    	buttonPressed = false;
 80008c8:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <HandleButton+0x40>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
        if (!isBusy) {
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <HandleButton+0x44>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f083 0301 	eor.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d007      	beq.n	80008ee <HandleButton+0x36>
            uint8_t cmd = 0x5A;
 80008de:	235a      	movs	r3, #90	@ 0x5a
 80008e0:	71fb      	strb	r3, [r7, #7]
            HAL_UART_Transmit_IT(&huart1, &cmd, 1);
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	2201      	movs	r2, #1
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	@ (8000900 <HandleButton+0x48>)
 80008ea:	f002 fd63 	bl	80033b4 <HAL_UART_Transmit_IT>
        }
    }
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200002a8 	.word	0x200002a8
 80008fc:	200002a9 	.word	0x200002a9
 8000900:	20000078 	.word	0x20000078

08000904 <HandleTable>:

static void HandleTable(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b096      	sub	sp, #88	@ 0x58
 8000908:	af00      	add	r7, sp, #0
    if (expecting_table && dma_idx > 0) {
 800090a:	4b36      	ldr	r3, [pc, #216]	@ (80009e4 <HandleTable+0xe0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d01a      	beq.n	800094a <HandleTable+0x46>
 8000914:	4b34      	ldr	r3, [pc, #208]	@ (80009e8 <HandleTable+0xe4>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b29b      	uxth	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d015      	beq.n	800094a <HandleTable+0x46>
        if (HAL_GetTick() - last_rx_tick >= table_rx_timeout) {
 800091e:	f000 fc73 	bl	8001208 <HAL_GetTick>
 8000922:	4602      	mov	r2, r0
 8000924:	4b31      	ldr	r3, [pc, #196]	@ (80009ec <HandleTable+0xe8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	2228      	movs	r2, #40	@ 0x28
 800092c:	4293      	cmp	r3, r2
 800092e:	d30c      	bcc.n	800094a <HandleTable+0x46>
        	dma_buffer[dma_idx] = '\0';
 8000930:	4b2d      	ldr	r3, [pc, #180]	@ (80009e8 <HandleTable+0xe4>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	4b2d      	ldr	r3, [pc, #180]	@ (80009f0 <HandleTable+0xec>)
 800093a:	2100      	movs	r1, #0
 800093c:	5499      	strb	r1, [r3, r2]
        	dma_ready = true;
 800093e:	4b2d      	ldr	r3, [pc, #180]	@ (80009f4 <HandleTable+0xf0>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
            expecting_table = false;
 8000944:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <HandleTable+0xe0>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
        }
    }

    if (dma_ready) {
 800094a:	4b2a      	ldr	r3, [pc, #168]	@ (80009f4 <HandleTable+0xf0>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d043      	beq.n	80009dc <HandleTable+0xd8>
    	dma_ready = false;
 8000954:	4b27      	ldr	r3, [pc, #156]	@ (80009f4 <HandleTable+0xf0>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]

        char out[80];
        int n = snprintf(out, sizeof(out),
 800095a:	4b27      	ldr	r3, [pc, #156]	@ (80009f8 <HandleTable+0xf4>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4638      	mov	r0, r7
 8000962:	4a26      	ldr	r2, [pc, #152]	@ (80009fc <HandleTable+0xf8>)
 8000964:	2150      	movs	r1, #80	@ 0x50
 8000966:	f004 f951 	bl	8004c0c <sniprintf>
 800096a:	6578      	str	r0, [r7, #84]	@ 0x54
                         "Número de eventos = %u\r\n",
                         (unsigned)blink_counter);

        if (n > 0) {
 800096c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800096e:	2b00      	cmp	r3, #0
 8000970:	dd0b      	ble.n	800098a <HandleTable+0x86>
            HAL_UART_Transmit(&huart2, (uint8_t *)out,
                              (uint16_t)strlen(out), HAL_MAX_DELAY);
 8000972:	463b      	mov	r3, r7
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc2b 	bl	80001d0 <strlen>
 800097a:	4603      	mov	r3, r0
            HAL_UART_Transmit(&huart2, (uint8_t *)out,
 800097c:	b29a      	uxth	r2, r3
 800097e:	4639      	mov	r1, r7
 8000980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000984:	481e      	ldr	r0, [pc, #120]	@ (8000a00 <HandleTable+0xfc>)
 8000986:	f002 fc8b 	bl	80032a0 <HAL_UART_Transmit>
        }

        if (dma_idx > 0) {
 800098a:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <HandleTable+0xe4>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	b29b      	uxth	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d010      	beq.n	80009b6 <HandleTable+0xb2>
        	dma_buffer[dma_idx] = '\0';
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <HandleTable+0xe4>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	b29b      	uxth	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HandleTable+0xec>)
 800099e:	2100      	movs	r1, #0
 80009a0:	5499      	strb	r1, [r3, r2]
            HAL_UART_Transmit(&huart2, (uint8_t *)dma_buffer,
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <HandleTable+0xe4>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ac:	4910      	ldr	r1, [pc, #64]	@ (80009f0 <HandleTable+0xec>)
 80009ae:	4814      	ldr	r0, [pc, #80]	@ (8000a00 <HandleTable+0xfc>)
 80009b0:	f002 fc76 	bl	80032a0 <HAL_UART_Transmit>
 80009b4:	e00c      	b.n	80009d0 <HandleTable+0xcc>
            			dma_idx, HAL_MAX_DELAY);
        } else {
            const char *empty = "Tabela vazia\r\n";
 80009b6:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <HandleTable+0x100>)
 80009b8:	653b      	str	r3, [r7, #80]	@ 0x50
            HAL_UART_Transmit(&huart2, (uint8_t *)empty,
                              (uint16_t)strlen(empty), HAL_MAX_DELAY);
 80009ba:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80009bc:	f7ff fc08 	bl	80001d0 <strlen>
 80009c0:	4603      	mov	r3, r0
            HAL_UART_Transmit(&huart2, (uint8_t *)empty,
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80009ca:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <HandleTable+0xfc>)
 80009cc:	f002 fc68 	bl	80032a0 <HAL_UART_Transmit>
        }

        dma_idx = 0;
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HandleTable+0xe4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	801a      	strh	r2, [r3, #0]
        expecting_table = false;
 80009d6:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <HandleTable+0xe0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
    }
}
 80009dc:	bf00      	nop
 80009de:	3758      	adds	r7, #88	@ 0x58
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200002ab 	.word	0x200002ab
 80009e8:	200003b0 	.word	0x200003b0
 80009ec:	200003b4 	.word	0x200003b4
 80009f0:	200002b0 	.word	0x200002b0
 80009f4:	200003b2 	.word	0x200003b2
 80009f8:	200002ac 	.word	0x200002ac
 80009fc:	08005598 	.word	0x08005598
 8000a00:	20000100 	.word	0x20000100
 8000a04:	080055b4 	.word	0x080055b4

08000a08 <HandleBlink>:

static void HandleBlink(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8000a0e:	f000 fbfb 	bl	8001208 <HAL_GetTick>
 8000a12:	6078      	str	r0, [r7, #4]

    if (blink_phase == 0 && isBusy && blink_counter > 0) {
 8000a14:	4b36      	ldr	r3, [pc, #216]	@ (8000af0 <HandleBlink+0xe8>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d119      	bne.n	8000a50 <HandleBlink+0x48>
 8000a1c:	4b35      	ldr	r3, [pc, #212]	@ (8000af4 <HandleBlink+0xec>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d014      	beq.n	8000a50 <HandleBlink+0x48>
 8000a26:	4b34      	ldr	r3, [pc, #208]	@ (8000af8 <HandleBlink+0xf0>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00f      	beq.n	8000a50 <HandleBlink+0x48>
        blink_phase = 1;
 8000a30:	4b2f      	ldr	r3, [pc, #188]	@ (8000af0 <HandleBlink+0xe8>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
        blink_done_count = 0;
 8000a36:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <HandleBlink+0xf4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
        last_toggle = now;
 8000a3c:	4a30      	ldr	r2, [pc, #192]	@ (8000b00 <HandleBlink+0xf8>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2120      	movs	r1, #32
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4a:	f001 f88b 	bl	8001b64 <HAL_GPIO_WritePin>
                last_toggle = now;
                blink_phase = 1;
            }
        }
    }
}
 8000a4e:	e04b      	b.n	8000ae8 <HandleBlink+0xe0>
    else if (blink_phase == 1) {
 8000a50:	4b27      	ldr	r3, [pc, #156]	@ (8000af0 <HandleBlink+0xe8>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d113      	bne.n	8000a80 <HandleBlink+0x78>
        if (now - last_toggle >= on_time) {
 8000a58:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <HandleBlink+0xf8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	22c8      	movs	r2, #200	@ 0xc8
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d340      	bcc.n	8000ae8 <HandleBlink+0xe0>
            HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6e:	f001 f879 	bl	8001b64 <HAL_GPIO_WritePin>
            last_toggle = now;
 8000a72:	4a23      	ldr	r2, [pc, #140]	@ (8000b00 <HandleBlink+0xf8>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6013      	str	r3, [r2, #0]
            blink_phase = 2;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <HandleBlink+0xe8>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	701a      	strb	r2, [r3, #0]
}
 8000a7e:	e033      	b.n	8000ae8 <HandleBlink+0xe0>
    else if (blink_phase == 2) {
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <HandleBlink+0xe8>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d12f      	bne.n	8000ae8 <HandleBlink+0xe0>
        if (now - last_toggle >= off_time) {
 8000a88:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <HandleBlink+0xf8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	22c8      	movs	r2, #200	@ 0xc8
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d328      	bcc.n	8000ae8 <HandleBlink+0xe0>
            blink_done_count++;
 8000a96:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <HandleBlink+0xf4>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <HandleBlink+0xf4>)
 8000aa0:	701a      	strb	r2, [r3, #0]
            if (blink_done_count >= blink_counter) {
 8000aa2:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <HandleBlink+0xf4>)
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <HandleBlink+0xf0>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d30f      	bcc.n	8000ad0 <HandleBlink+0xc8>
                blink_phase = 0;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <HandleBlink+0xe8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
                isBusy = false;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <HandleBlink+0xec>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
                blink_counter = 0;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HandleBlink+0xf0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aca:	f001 f84b 	bl	8001b64 <HAL_GPIO_WritePin>
}
 8000ace:	e00b      	b.n	8000ae8 <HandleBlink+0xe0>
                HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2120      	movs	r1, #32
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad8:	f001 f844 	bl	8001b64 <HAL_GPIO_WritePin>
                last_toggle = now;
 8000adc:	4a08      	ldr	r2, [pc, #32]	@ (8000b00 <HandleBlink+0xf8>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
                blink_phase = 1;
 8000ae2:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <HandleBlink+0xe8>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200003b9 	.word	0x200003b9
 8000af4:	200002a9 	.word	0x200002a9
 8000af8:	200002ac 	.word	0x200002ac
 8000afc:	200003b8 	.word	0x200003b8
 8000b00:	200003bc 	.word	0x200003bc

08000b04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b14:	d117      	bne.n	8000b46 <HAL_GPIO_EXTI_Callback+0x42>
        uint32_t now = HAL_GetTick();
 8000b16:	f000 fb77 	bl	8001208 <HAL_GetTick>
 8000b1a:	60f8      	str	r0, [r7, #12]
        if (now - last_interrupt_time >= debounce_delay) {
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	22c8      	movs	r2, #200	@ 0xc8
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d30a      	bcc.n	8000b40 <HAL_GPIO_EXTI_Callback+0x3c>
            if (!isBusy) {
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0x50>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f083 0301 	eor.w	r3, r3, #1
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d002      	beq.n	8000b40 <HAL_GPIO_EXTI_Callback+0x3c>
            	buttonPressed = true;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
            }
        }
        last_interrupt_time = now;
 8000b40:	4a03      	ldr	r2, [pc, #12]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	6013      	str	r3, [r2, #0]
    }
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200003c0 	.word	0x200003c0
 8000b54:	200002a9 	.word	0x200002a9
 8000b58:	200002a8 	.word	0x200002a8

08000b5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a29      	ldr	r2, [pc, #164]	@ (8000c10 <HAL_UART_RxCpltCallback+0xb4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d14c      	bne.n	8000c08 <HAL_UART_RxCpltCallback+0xac>
        uint8_t b = (uint8_t)rx_byte;
 8000b6e:	4b29      	ldr	r3, [pc, #164]	@ (8000c14 <HAL_UART_RxCpltCallback+0xb8>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	73fb      	strb	r3, [r7, #15]

        if (!expecting_table) {
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <HAL_UART_RxCpltCallback+0xbc>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	f083 0301 	eor.w	r3, r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d019      	beq.n	8000bb8 <HAL_UART_RxCpltCallback+0x5c>
            if (b > MAX_BLINK) b = MAX_BLINK;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b05      	cmp	r3, #5
 8000b88:	d901      	bls.n	8000b8e <HAL_UART_RxCpltCallback+0x32>
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	73fb      	strb	r3, [r7, #15]
            blink_counter = b;
 8000b8e:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <HAL_UART_RxCpltCallback+0xc0>)
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	7013      	strb	r3, [r2, #0]

            expecting_table = true;
 8000b94:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <HAL_UART_RxCpltCallback+0xbc>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
            dma_idx = 0;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <HAL_UART_RxCpltCallback+0xc4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	801a      	strh	r2, [r3, #0]
            dma_ready = false;
 8000ba0:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <HAL_UART_RxCpltCallback+0xc8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
            last_rx_tick = HAL_GetTick();
 8000ba6:	f000 fb2f 	bl	8001208 <HAL_GetTick>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4a1e      	ldr	r2, [pc, #120]	@ (8000c28 <HAL_UART_RxCpltCallback+0xcc>)
 8000bae:	6013      	str	r3, [r2, #0]
            isBusy = true;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <HAL_UART_RxCpltCallback+0xd0>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e022      	b.n	8000bfe <HAL_UART_RxCpltCallback+0xa2>
        } else {
            if (dma_idx < (TABLE_BUF_SIZE - 1)) {
 8000bb8:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <HAL_UART_RxCpltCallback+0xc4>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bc0:	d810      	bhi.n	8000be4 <HAL_UART_RxCpltCallback+0x88>
            	dma_buffer[dma_idx++] = b;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <HAL_UART_RxCpltCallback+0xc4>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	b291      	uxth	r1, r2
 8000bcc:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <HAL_UART_RxCpltCallback+0xc4>)
 8000bce:	8011      	strh	r1, [r2, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4a17      	ldr	r2, [pc, #92]	@ (8000c30 <HAL_UART_RxCpltCallback+0xd4>)
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	5453      	strb	r3, [r2, r1]
                last_rx_tick = HAL_GetTick();
 8000bd8:	f000 fb16 	bl	8001208 <HAL_GetTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <HAL_UART_RxCpltCallback+0xcc>)
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e00c      	b.n	8000bfe <HAL_UART_RxCpltCallback+0xa2>
            } else {
            	dma_buffer[dma_idx] = '\0';
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_UART_RxCpltCallback+0xc4>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <HAL_UART_RxCpltCallback+0xd4>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	5499      	strb	r1, [r3, r2]
                dma_ready = true;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <HAL_UART_RxCpltCallback+0xc8>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
                expecting_table = false;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <HAL_UART_RxCpltCallback+0xbc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_byte, 1);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4904      	ldr	r1, [pc, #16]	@ (8000c14 <HAL_UART_RxCpltCallback+0xb8>)
 8000c02:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <HAL_UART_RxCpltCallback+0xd8>)
 8000c04:	f002 fc34 	bl	8003470 <HAL_UART_Receive_IT>
    }
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40013800 	.word	0x40013800
 8000c14:	200002aa 	.word	0x200002aa
 8000c18:	200002ab 	.word	0x200002ab
 8000c1c:	200002ac 	.word	0x200002ac
 8000c20:	200003b0 	.word	0x200003b0
 8000c24:	200003b2 	.word	0x200003b2
 8000c28:	200003b4 	.word	0x200003b4
 8000c2c:	200002a9 	.word	0x200002a9
 8000c30:	200002b0 	.word	0x200002b0
 8000c34:	20000078 	.word	0x20000078

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0ae      	sub	sp, #184	@ 0xb8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	2288      	movs	r2, #136	@ 0x88
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f003 ffe3 	bl	8004c78 <memset>
  if(huart->Instance==USART1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a9e      	ldr	r2, [pc, #632]	@ (8000f30 <HAL_UART_MspInit+0x2a4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	f040 8098 	bne.w	8000dee <HAL_UART_MspInit+0x162>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fdde 	bl	800288c <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cd6:	f7ff ffaf 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cda:	4b96      	ldr	r3, [pc, #600]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cde:	4a95      	ldr	r2, [pc, #596]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce6:	4b93      	ldr	r3, [pc, #588]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b90      	ldr	r3, [pc, #576]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	4a8f      	ldr	r2, [pc, #572]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d0a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d24:	2307      	movs	r3, #7
 8000d26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d34:	f000 fd6c 	bl	8001810 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d38:	4b7f      	ldr	r3, [pc, #508]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d3a:	4a80      	ldr	r2, [pc, #512]	@ (8000f3c <HAL_UART_MspInit+0x2b0>)
 8000d3c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000d3e:	4b7e      	ldr	r3, [pc, #504]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d44:	4b7c      	ldr	r3, [pc, #496]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d50:	4b79      	ldr	r3, [pc, #484]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d52:	2280      	movs	r2, #128	@ 0x80
 8000d54:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d56:	4b78      	ldr	r3, [pc, #480]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5c:	4b76      	ldr	r3, [pc, #472]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d62:	4b75      	ldr	r3, [pc, #468]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d68:	4b73      	ldr	r3, [pc, #460]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d6e:	4872      	ldr	r0, [pc, #456]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d70:	f000 fb68 	bl	8001444 <HAL_DMA_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8000d7a:	f7ff ff5d 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a6d      	ldr	r2, [pc, #436]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d82:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d84:	4a6c      	ldr	r2, [pc, #432]	@ (8000f38 <HAL_UART_MspInit+0x2ac>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000d8c:	4a6d      	ldr	r2, [pc, #436]	@ (8000f44 <HAL_UART_MspInit+0x2b8>)
 8000d8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000d90:	4b6b      	ldr	r3, [pc, #428]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d96:	4b6a      	ldr	r3, [pc, #424]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000d98:	2210      	movs	r2, #16
 8000d9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9c:	4b68      	ldr	r3, [pc, #416]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da2:	4b67      	ldr	r3, [pc, #412]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da8:	4b65      	ldr	r3, [pc, #404]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dae:	4b64      	ldr	r3, [pc, #400]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000db4:	4b62      	ldr	r3, [pc, #392]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dba:	4b61      	ldr	r3, [pc, #388]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000dc0:	485f      	ldr	r0, [pc, #380]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000dc2:	f000 fb3f 	bl	8001444 <HAL_DMA_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 8000dcc:	f7ff ff34 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000dd4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000dd6:	4a5a      	ldr	r2, [pc, #360]	@ (8000f40 <HAL_UART_MspInit+0x2b4>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2025      	movs	r0, #37	@ 0x25
 8000de2:	f000 faf8 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000de6:	2025      	movs	r0, #37	@ 0x25
 8000de8:	f000 fb11 	bl	800140e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dec:	e09b      	b.n	8000f26 <HAL_UART_MspInit+0x29a>
  else if(huart->Instance==USART2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a55      	ldr	r2, [pc, #340]	@ (8000f48 <HAL_UART_MspInit+0x2bc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	f040 8096 	bne.w	8000f26 <HAL_UART_MspInit+0x29a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fd40 	bl	800288c <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_UART_MspInit+0x18a>
      Error_Handler();
 8000e12:	f7ff ff11 	bl	8000c38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e16:	4b47      	ldr	r3, [pc, #284]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1a:	4a46      	ldr	r2, [pc, #280]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e22:	4b44      	ldr	r3, [pc, #272]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b41      	ldr	r3, [pc, #260]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	4a40      	ldr	r2, [pc, #256]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f34 <HAL_UART_MspInit+0x2a8>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e46:	230c      	movs	r3, #12
 8000e48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6e:	f000 fccf 	bl	8001810 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e72:	4b36      	ldr	r3, [pc, #216]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000e74:	4a36      	ldr	r2, [pc, #216]	@ (8000f50 <HAL_UART_MspInit+0x2c4>)
 8000e76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000e78:	4b34      	ldr	r3, [pc, #208]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7e:	4b33      	ldr	r3, [pc, #204]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e84:	4b31      	ldr	r3, [pc, #196]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8a:	4b30      	ldr	r3, [pc, #192]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000e8c:	2280      	movs	r2, #128	@ 0x80
 8000e8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e90:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e96:	4b2d      	ldr	r3, [pc, #180]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ea8:	4828      	ldr	r0, [pc, #160]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000eaa:	f000 facb 	bl	8001444 <HAL_DMA_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8000eb4:	f7ff fec0 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a24      	ldr	r2, [pc, #144]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000ebc:	675a      	str	r2, [r3, #116]	@ 0x74
 8000ebe:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <HAL_UART_MspInit+0x2c0>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000ec4:	4b23      	ldr	r3, [pc, #140]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000ec6:	4a24      	ldr	r2, [pc, #144]	@ (8000f58 <HAL_UART_MspInit+0x2cc>)
 8000ec8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000eca:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ed0:	4b20      	ldr	r3, [pc, #128]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000ed2:	2210      	movs	r2, #16
 8000ed4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000ede:	2280      	movs	r2, #128	@ 0x80
 8000ee0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000eee:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000efa:	4816      	ldr	r0, [pc, #88]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000efc:	f000 faa2 	bl	8001444 <HAL_DMA_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_UART_MspInit+0x27e>
      Error_Handler();
 8000f06:	f7ff fe97 	bl	8000c38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000f0e:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f10:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <HAL_UART_MspInit+0x2c8>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2026      	movs	r0, #38	@ 0x26
 8000f1c:	f000 fa5b 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f20:	2026      	movs	r0, #38	@ 0x26
 8000f22:	f000 fa74 	bl	800140e <HAL_NVIC_EnableIRQ>
}
 8000f26:	bf00      	nop
 8000f28:	37b8      	adds	r7, #184	@ 0xb8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40013800 	.word	0x40013800
 8000f34:	40021000 	.word	0x40021000
 8000f38:	200001d0 	.word	0x200001d0
 8000f3c:	40020058 	.word	0x40020058
 8000f40:	20000188 	.word	0x20000188
 8000f44:	40020044 	.word	0x40020044
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	20000218 	.word	0x20000218
 8000f50:	4002006c 	.word	0x4002006c
 8000f54:	20000260 	.word	0x20000260
 8000f58:	40020080 	.word	0x40020080

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <NMI_Handler+0x4>

08000f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <MemManage_Handler+0x4>

08000f74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb2:	f000 f915 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <DMA1_Channel4_IRQHandler+0x10>)
 8000fc2:	f000 fb76 	bl	80016b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000188 	.word	0x20000188

08000fd0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <DMA1_Channel5_IRQHandler+0x10>)
 8000fd6:	f000 fb6c 	bl	80016b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001d0 	.word	0x200001d0

08000fe4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <DMA1_Channel6_IRQHandler+0x10>)
 8000fea:	f000 fb62 	bl	80016b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000218 	.word	0x20000218

08000ff8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <DMA1_Channel7_IRQHandler+0x10>)
 8000ffe:	f000 fb58 	bl	80016b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000260 	.word	0x20000260

0800100c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <USART1_IRQHandler+0x10>)
 8001012:	f002 fa79 	bl	8003508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000078 	.word	0x20000078

08001020 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001024:	4802      	ldr	r0, [pc, #8]	@ (8001030 <USART2_IRQHandler+0x10>)
 8001026:	f002 fa6f 	bl	8003508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000100 	.word	0x20000100

08001034 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001038:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800103c:	f000 fdaa 	bl	8001b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f003 fe08 	bl	8004c88 <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20018000 	.word	0x20018000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	200003c4 	.word	0x200003c4
 80010ac:	20000518 	.word	0x20000518

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800110c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d8:	f7ff ffea 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <LoopForever+0x6>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	@ (8001114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <LoopForever+0xe>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001120 <LoopForever+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001102:	f003 fdc7 	bl	8004c94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001106:	f7ff fa51 	bl	80005ac <main>

0800110a <LoopForever>:

LoopForever:
    b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800110c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001118:	08005650 	.word	0x08005650
  ldr r2, =_sbss
 800111c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001120:	20000514 	.word	0x20000514

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_Init+0x3c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <HAL_Init+0x3c>)
 8001138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800113c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113e:	2003      	movs	r0, #3
 8001140:	f000 f93e 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001144:	2000      	movs	r0, #0
 8001146:	f000 f80f 	bl	8001168 <HAL_InitTick>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	e001      	b.n	800115a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001156:	f7ff fd75 	bl	8000c44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800115a:	79fb      	ldrb	r3, [r7, #7]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800117c:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_InitTick+0x70>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f949 	bl	800142a <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d809      	bhi.n	80011b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011ac:	f000 f913 	bl	80013d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_InitTick+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e007      	b.n	80011c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e004      	b.n	80011c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e001      	b.n	80011c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000004 	.word	0x20000004

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008
 8001204:	200003c8 	.word	0x200003c8

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200003c8 	.word	0x200003c8

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	@ (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	@ (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	@ (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	@ 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	@ 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff29 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff3e 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff31 	bl	8001284 <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffa2 	bl	800137c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e098      	b.n	8001588 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	4b4d      	ldr	r3, [pc, #308]	@ (8001594 <HAL_DMA_Init+0x150>)
 800145e:	429a      	cmp	r2, r3
 8001460:	d80f      	bhi.n	8001482 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b4b      	ldr	r3, [pc, #300]	@ (8001598 <HAL_DMA_Init+0x154>)
 800146a:	4413      	add	r3, r2
 800146c:	4a4b      	ldr	r2, [pc, #300]	@ (800159c <HAL_DMA_Init+0x158>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	009a      	lsls	r2, r3, #2
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a48      	ldr	r2, [pc, #288]	@ (80015a0 <HAL_DMA_Init+0x15c>)
 800147e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001480:	e00e      	b.n	80014a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	4b46      	ldr	r3, [pc, #280]	@ (80015a4 <HAL_DMA_Init+0x160>)
 800148a:	4413      	add	r3, r2
 800148c:	4a43      	ldr	r2, [pc, #268]	@ (800159c <HAL_DMA_Init+0x158>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	009a      	lsls	r2, r3, #2
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a42      	ldr	r2, [pc, #264]	@ (80015a8 <HAL_DMA_Init+0x164>)
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2202      	movs	r2, #2
 80014a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80014b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014fa:	d039      	beq.n	8001570 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	4a27      	ldr	r2, [pc, #156]	@ (80015a0 <HAL_DMA_Init+0x15c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d11a      	bne.n	800153c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001506:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <HAL_DMA_Init+0x168>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	f003 031c 	and.w	r3, r3, #28
 8001512:	210f      	movs	r1, #15
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	4924      	ldr	r1, [pc, #144]	@ (80015ac <HAL_DMA_Init+0x168>)
 800151c:	4013      	ands	r3, r2
 800151e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001520:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <HAL_DMA_Init+0x168>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152c:	f003 031c 	and.w	r3, r3, #28
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	491d      	ldr	r1, [pc, #116]	@ (80015ac <HAL_DMA_Init+0x168>)
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]
 800153a:	e019      	b.n	8001570 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800153c:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_DMA_Init+0x16c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001544:	f003 031c 	and.w	r3, r3, #28
 8001548:	210f      	movs	r1, #15
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	4917      	ldr	r1, [pc, #92]	@ (80015b0 <HAL_DMA_Init+0x16c>)
 8001552:	4013      	ands	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_DMA_Init+0x16c>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6859      	ldr	r1, [r3, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	f003 031c 	and.w	r3, r3, #28
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	4911      	ldr	r1, [pc, #68]	@ (80015b0 <HAL_DMA_Init+0x16c>)
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	40020407 	.word	0x40020407
 8001598:	bffdfff8 	.word	0xbffdfff8
 800159c:	cccccccd 	.word	0xcccccccd
 80015a0:	40020000 	.word	0x40020000
 80015a4:	bffdfbf8 	.word	0xbffdfbf8
 80015a8:	40020400 	.word	0x40020400
 80015ac:	400200a8 	.word	0x400200a8
 80015b0:	400204a8 	.word	0x400204a8

080015b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d008      	beq.n	80015de <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2204      	movs	r2, #4
 80015d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e022      	b.n	8001624 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 020e 	bic.w	r2, r2, #14
 80015ec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f003 021c 	and.w	r2, r3, #28
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d005      	beq.n	8001654 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2204      	movs	r2, #4
 800164c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e029      	b.n	80016a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 020e 	bic.w	r2, r2, #14
 8001662:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001678:	f003 021c 	and.w	r2, r3, #28
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
    }
  }
  return status;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f003 031c 	and.w	r3, r3, #28
 80016d2:	2204      	movs	r2, #4
 80016d4:	409a      	lsls	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d026      	beq.n	800172c <HAL_DMA_IRQHandler+0x7a>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d021      	beq.n	800172c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0204 	bic.w	r2, r2, #4
 8001704:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	f003 021c 	and.w	r2, r3, #28
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	2104      	movs	r1, #4
 8001714:	fa01 f202 	lsl.w	r2, r1, r2
 8001718:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	2b00      	cmp	r3, #0
 8001720:	d071      	beq.n	8001806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800172a:	e06c      	b.n	8001806 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001730:	f003 031c 	and.w	r3, r3, #28
 8001734:	2202      	movs	r2, #2
 8001736:	409a      	lsls	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d02e      	beq.n	800179e <HAL_DMA_IRQHandler+0xec>
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d029      	beq.n	800179e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10b      	bne.n	8001770 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 020a 	bic.w	r2, r2, #10
 8001766:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001774:	f003 021c 	and.w	r2, r3, #28
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	2102      	movs	r1, #2
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d038      	beq.n	8001806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800179c:	e033      	b.n	8001806 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f003 031c 	and.w	r3, r3, #28
 80017a6:	2208      	movs	r2, #8
 80017a8:	409a      	lsls	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d02a      	beq.n	8001808 <HAL_DMA_IRQHandler+0x156>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d025      	beq.n	8001808 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 020e 	bic.w	r2, r2, #14
 80017ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d0:	f003 021c 	and.w	r2, r3, #28
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001806:	bf00      	nop
 8001808:	bf00      	nop
}
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181e:	e17f      	b.n	8001b20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8171 	beq.w	8001b1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d005      	beq.n	8001850 <HAL_GPIO_Init+0x40>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d130      	bne.n	80018b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001886:	2201      	movs	r2, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	f003 0201 	and.w	r2, r3, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d118      	bne.n	80018f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018c4:	2201      	movs	r2, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	f003 0201 	and.w	r2, r3, #1
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d017      	beq.n	800192c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d123      	bne.n	8001980 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	08da      	lsrs	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	6939      	ldr	r1, [r7, #16]
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80ac 	beq.w	8001b1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b40 <HAL_GPIO_Init+0x330>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b40 <HAL_GPIO_Init+0x330>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001b40 <HAL_GPIO_Init+0x330>)
 80019d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019da:	4a5a      	ldr	r2, [pc, #360]	@ (8001b44 <HAL_GPIO_Init+0x334>)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a04:	d025      	beq.n	8001a52 <HAL_GPIO_Init+0x242>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4f      	ldr	r2, [pc, #316]	@ (8001b48 <HAL_GPIO_Init+0x338>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01f      	beq.n	8001a4e <HAL_GPIO_Init+0x23e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4e      	ldr	r2, [pc, #312]	@ (8001b4c <HAL_GPIO_Init+0x33c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0x23a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4d      	ldr	r2, [pc, #308]	@ (8001b50 <HAL_GPIO_Init+0x340>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x236>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4c      	ldr	r2, [pc, #304]	@ (8001b54 <HAL_GPIO_Init+0x344>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x232>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4b      	ldr	r2, [pc, #300]	@ (8001b58 <HAL_GPIO_Init+0x348>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x22e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4a      	ldr	r2, [pc, #296]	@ (8001b5c <HAL_GPIO_Init+0x34c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x22a>
 8001a36:	2306      	movs	r3, #6
 8001a38:	e00c      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	e00a      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a3e:	2305      	movs	r3, #5
 8001a40:	e008      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a42:	2304      	movs	r3, #4
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a46:	2303      	movs	r3, #3
 8001a48:	e004      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e002      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_GPIO_Init+0x244>
 8001a52:	2300      	movs	r3, #0
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	f002 0203 	and.w	r2, r2, #3
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	4093      	lsls	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a64:	4937      	ldr	r1, [pc, #220]	@ (8001b44 <HAL_GPIO_Init+0x334>)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a72:	4b3b      	ldr	r3, [pc, #236]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a96:	4a32      	ldr	r2, [pc, #200]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a9c:	4b30      	ldr	r3, [pc, #192]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ac0:	4a27      	ldr	r2, [pc, #156]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ac6:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aea:	4a1d      	ldr	r2, [pc, #116]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b14:	4a12      	ldr	r2, [pc, #72]	@ (8001b60 <HAL_GPIO_Init+0x350>)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f47f ae78 	bne.w	8001820 <HAL_GPIO_Init+0x10>
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	48000800 	.word	0x48000800
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	48001000 	.word	0x48001000
 8001b58:	48001400 	.word	0x48001400
 8001b5c:	48001800 	.word	0x48001800
 8001b60:	40010400 	.word	0x40010400

08001b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
 8001b70:	4613      	mov	r3, r2
 8001b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b74:	787b      	ldrb	r3, [r7, #1]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b9e:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d006      	beq.n	8001bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001baa:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe ffa6 	bl	8000b04 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bc8:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <HAL_PWREx_GetVoltageRange+0x18>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40007000 	.word	0x40007000

08001be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bee:	d130      	bne.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bf0:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bfc:	d038      	beq.n	8001c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c06:	4a1e      	ldr	r2, [pc, #120]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2232      	movs	r2, #50	@ 0x32
 8001c14:	fb02 f303 	mul.w	r3, r2, r3
 8001c18:	4a1b      	ldr	r2, [pc, #108]	@ (8001c88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	0c9b      	lsrs	r3, r3, #18
 8001c20:	3301      	adds	r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c24:	e002      	b.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2c:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c38:	d102      	bne.n	8001c40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f2      	bne.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c4c:	d110      	bne.n	8001c70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e00f      	b.n	8001c72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5e:	d007      	beq.n	8001c70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c68:	4a05      	ldr	r2, [pc, #20]	@ (8001c80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40007000 	.word	0x40007000
 8001c84:	20000000 	.word	0x20000000
 8001c88:	431bde83 	.word	0x431bde83

08001c8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e3ca      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9e:	4b97      	ldr	r3, [pc, #604]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca8:	4b94      	ldr	r3, [pc, #592]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80e4 	beq.w	8001e88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x4a>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	f040 808b 	bne.w	8001de4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	f040 8087 	bne.w	8001de4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cd6:	4b89      	ldr	r3, [pc, #548]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_RCC_OscConfig+0x62>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e3a2      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1a      	ldr	r2, [r3, #32]
 8001cf2:	4b82      	ldr	r3, [pc, #520]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d004      	beq.n	8001d08 <HAL_RCC_OscConfig+0x7c>
 8001cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d06:	e005      	b.n	8001d14 <HAL_RCC_OscConfig+0x88>
 8001d08:	4b7c      	ldr	r3, [pc, #496]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d223      	bcs.n	8001d60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fd55 	bl	80027cc <RCC_SetFlashLatencyFromMSIRange>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e383      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d2c:	4b73      	ldr	r3, [pc, #460]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a72      	ldr	r2, [pc, #456]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b70      	ldr	r3, [pc, #448]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	496d      	ldr	r1, [pc, #436]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	4968      	ldr	r1, [pc, #416]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
 8001d5e:	e025      	b.n	8001dac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d60:	4b66      	ldr	r3, [pc, #408]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a65      	ldr	r2, [pc, #404]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b63      	ldr	r3, [pc, #396]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4960      	ldr	r1, [pc, #384]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	495b      	ldr	r1, [pc, #364]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 fd15 	bl	80027cc <RCC_SetFlashLatencyFromMSIRange>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e343      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dac:	f000 fc4a 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b52      	ldr	r3, [pc, #328]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	4950      	ldr	r1, [pc, #320]	@ (8001f00 <HAL_RCC_OscConfig+0x274>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8001f04 <HAL_RCC_OscConfig+0x278>)
 8001dca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8001f08 <HAL_RCC_OscConfig+0x27c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff f9c9 	bl	8001168 <HAL_InitTick>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d052      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	e327      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d032      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dec:	4b43      	ldr	r3, [pc, #268]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a42      	ldr	r2, [pc, #264]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fa06 	bl	8001208 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e00:	f7ff fa02 	bl	8001208 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e310      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e12:	4b3a      	ldr	r3, [pc, #232]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e1e:	4b37      	ldr	r3, [pc, #220]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a36      	ldr	r2, [pc, #216]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e24:	f043 0308 	orr.w	r3, r3, #8
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b34      	ldr	r3, [pc, #208]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4931      	ldr	r1, [pc, #196]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	492c      	ldr	r1, [pc, #176]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	e01a      	b.n	8001e88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e52:	4b2a      	ldr	r3, [pc, #168]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a29      	ldr	r2, [pc, #164]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e5e:	f7ff f9d3 	bl	8001208 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e66:	f7ff f9cf 	bl	8001208 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e2dd      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e78:	4b20      	ldr	r3, [pc, #128]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x1da>
 8001e84:	e000      	b.n	8001e88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d074      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d005      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x21a>
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b0c      	cmp	r3, #12
 8001e9e:	d10e      	bne.n	8001ebe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d10b      	bne.n	8001ebe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d064      	beq.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d160      	bne.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e2ba      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x24a>
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	e026      	b.n	8001f24 <HAL_RCC_OscConfig+0x298>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ede:	d115      	bne.n	8001f0c <HAL_RCC_OscConfig+0x280>
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a05      	ldr	r2, [pc, #20]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001ee6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a02      	ldr	r2, [pc, #8]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e014      	b.n	8001f24 <HAL_RCC_OscConfig+0x298>
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	080055c4 	.word	0x080055c4
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	4ba0      	ldr	r3, [pc, #640]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a9f      	ldr	r2, [pc, #636]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b9d      	ldr	r3, [pc, #628]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a9c      	ldr	r2, [pc, #624]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f96c 	bl	8001208 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff f968 	bl	8001208 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	@ 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e276      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f46:	4b92      	ldr	r3, [pc, #584]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x2a8>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f958 	bl	8001208 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f954 	bl	8001208 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	@ 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e262      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6e:	4b88      	ldr	r3, [pc, #544]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x2d0>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d060      	beq.n	800204c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_OscConfig+0x310>
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d119      	bne.n	8001fca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d116      	bne.n	8001fca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f9c:	4b7c      	ldr	r3, [pc, #496]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x328>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e23f      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4b76      	ldr	r3, [pc, #472]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	4973      	ldr	r1, [pc, #460]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc8:	e040      	b.n	800204c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d023      	beq.n	800201a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7ff f913 	bl	8001208 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7ff f90f 	bl	8001208 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e21d      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff8:	4b65      	ldr	r3, [pc, #404]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b62      	ldr	r3, [pc, #392]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	061b      	lsls	r3, r3, #24
 8002012:	495f      	ldr	r1, [pc, #380]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
 8002018:	e018      	b.n	800204c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201a:	4b5d      	ldr	r3, [pc, #372]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a5c      	ldr	r2, [pc, #368]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8002020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff f8ef 	bl	8001208 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202e:	f7ff f8eb 	bl	8001208 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e1f9      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002040:	4b53      	ldr	r3, [pc, #332]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f0      	bne.n	800202e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d03c      	beq.n	80020d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01c      	beq.n	800209a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002060:	4b4b      	ldr	r3, [pc, #300]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8002062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002066:	4a4a      	ldr	r2, [pc, #296]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7ff f8ca 	bl	8001208 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff f8c6 	bl	8001208 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1d4      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800208a:	4b41      	ldr	r3, [pc, #260]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 800208c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ef      	beq.n	8002078 <HAL_RCC_OscConfig+0x3ec>
 8002098:	e01b      	b.n	80020d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209a:	4b3d      	ldr	r3, [pc, #244]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 800209c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020aa:	f7ff f8ad 	bl	8001208 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b2:	f7ff f8a9 	bl	8001208 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1b7      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c4:	4b32      	ldr	r3, [pc, #200]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 80020c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ef      	bne.n	80020b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80a6 	beq.w	800222c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10d      	bne.n	800210c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f0:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f4:	4a26      	ldr	r2, [pc, #152]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 80020f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80020fc:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002108:	2301      	movs	r3, #1
 800210a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210c:	4b21      	ldr	r3, [pc, #132]	@ (8002194 <HAL_RCC_OscConfig+0x508>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d118      	bne.n	800214a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002118:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <HAL_RCC_OscConfig+0x508>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1d      	ldr	r2, [pc, #116]	@ (8002194 <HAL_RCC_OscConfig+0x508>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002122:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002124:	f7ff f870 	bl	8001208 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212c:	f7ff f86c 	bl	8001208 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e17a      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <HAL_RCC_OscConfig+0x508>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d108      	bne.n	8002164 <HAL_RCC_OscConfig+0x4d8>
 8002152:	4b0f      	ldr	r3, [pc, #60]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002162:	e029      	b.n	80021b8 <HAL_RCC_OscConfig+0x52c>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d115      	bne.n	8002198 <HAL_RCC_OscConfig+0x50c>
 800216c:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002172:	4a07      	ldr	r2, [pc, #28]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800217c:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002182:	4a03      	ldr	r2, [pc, #12]	@ (8002190 <HAL_RCC_OscConfig+0x504>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800218c:	e014      	b.n	80021b8 <HAL_RCC_OscConfig+0x52c>
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	40007000 	.word	0x40007000
 8002198:	4b9c      	ldr	r3, [pc, #624]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219e:	4a9b      	ldr	r2, [pc, #620]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021a8:	4b98      	ldr	r3, [pc, #608]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ae:	4a97      	ldr	r2, [pc, #604]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d016      	beq.n	80021ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7ff f822 	bl	8001208 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c6:	e00a      	b.n	80021de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7ff f81e 	bl	8001208 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e12a      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021de:	4b8b      	ldr	r3, [pc, #556]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ed      	beq.n	80021c8 <HAL_RCC_OscConfig+0x53c>
 80021ec:	e015      	b.n	800221a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7ff f80b 	bl	8001208 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7ff f807 	bl	8001208 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e113      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800220c:	4b7f      	ldr	r3, [pc, #508]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ed      	bne.n	80021f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002220:	4b7a      	ldr	r3, [pc, #488]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002224:	4a79      	ldr	r2, [pc, #484]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 8002226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800222a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80fe 	beq.w	8002432 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223a:	2b02      	cmp	r3, #2
 800223c:	f040 80d0 	bne.w	80023e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002240:	4b72      	ldr	r3, [pc, #456]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 0203 	and.w	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	429a      	cmp	r2, r3
 8002252:	d130      	bne.n	80022b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	3b01      	subs	r3, #1
 8002260:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d127      	bne.n	80022b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002270:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d11f      	bne.n	80022b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002280:	2a07      	cmp	r2, #7
 8002282:	bf14      	ite	ne
 8002284:	2201      	movne	r2, #1
 8002286:	2200      	moveq	r2, #0
 8002288:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800228a:	4293      	cmp	r3, r2
 800228c:	d113      	bne.n	80022b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002298:	085b      	lsrs	r3, r3, #1
 800229a:	3b01      	subs	r3, #1
 800229c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d109      	bne.n	80022b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	3b01      	subs	r3, #1
 80022b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d06e      	beq.n	8002394 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d069      	beq.n	8002390 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022bc:	4b53      	ldr	r3, [pc, #332]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022c8:	4b50      	ldr	r3, [pc, #320]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0ad      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022d8:	4b4c      	ldr	r3, [pc, #304]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a4b      	ldr	r2, [pc, #300]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80022de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022e4:	f7fe ff90 	bl	8001208 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7fe ff8c 	bl	8001208 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e09a      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fe:	4b43      	ldr	r3, [pc, #268]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230a:	4b40      	ldr	r3, [pc, #256]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	4b40      	ldr	r3, [pc, #256]	@ (8002410 <HAL_RCC_OscConfig+0x784>)
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800231a:	3a01      	subs	r2, #1
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	4311      	orrs	r1, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002324:	0212      	lsls	r2, r2, #8
 8002326:	4311      	orrs	r1, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800232c:	0852      	lsrs	r2, r2, #1
 800232e:	3a01      	subs	r2, #1
 8002330:	0552      	lsls	r2, r2, #21
 8002332:	4311      	orrs	r1, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002338:	0852      	lsrs	r2, r2, #1
 800233a:	3a01      	subs	r2, #1
 800233c:	0652      	lsls	r2, r2, #25
 800233e:	4311      	orrs	r1, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002344:	0912      	lsrs	r2, r2, #4
 8002346:	0452      	lsls	r2, r2, #17
 8002348:	430a      	orrs	r2, r1
 800234a:	4930      	ldr	r1, [pc, #192]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 800234c:	4313      	orrs	r3, r2
 800234e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002350:	4b2e      	ldr	r3, [pc, #184]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a2d      	ldr	r2, [pc, #180]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 8002356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800235c:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a2a      	ldr	r2, [pc, #168]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002366:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002368:	f7fe ff4e 	bl	8001208 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe ff4a 	bl	8001208 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e058      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002382:	4b22      	ldr	r3, [pc, #136]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800238e:	e050      	b.n	8002432 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e04f      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002394:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d148      	bne.n	8002432 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023a0:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80023a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023ac:	4b17      	ldr	r3, [pc, #92]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a16      	ldr	r2, [pc, #88]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023b8:	f7fe ff26 	bl	8001208 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe ff22 	bl	8001208 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e030      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d2:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x734>
 80023de:	e028      	b.n	8002432 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	d023      	beq.n	800242e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e6:	4b09      	ldr	r3, [pc, #36]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a08      	ldr	r2, [pc, #32]	@ (800240c <HAL_RCC_OscConfig+0x780>)
 80023ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe ff09 	bl	8001208 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f8:	e00c      	b.n	8002414 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe ff05 	bl	8001208 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d905      	bls.n	8002414 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e013      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
 800240c:	40021000 	.word	0x40021000
 8002410:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_RCC_OscConfig+0x7b0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1ec      	bne.n	80023fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <HAL_RCC_OscConfig+0x7b0>)
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4905      	ldr	r1, [pc, #20]	@ (800243c <HAL_RCC_OscConfig+0x7b0>)
 8002426:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <HAL_RCC_OscConfig+0x7b4>)
 8002428:	4013      	ands	r3, r2
 800242a:	60cb      	str	r3, [r1, #12]
 800242c:	e001      	b.n	8002432 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	feeefffc 	.word	0xfeeefffc

08002444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0e7      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002458:	4b75      	ldr	r3, [pc, #468]	@ (8002630 <HAL_RCC_ClockConfig+0x1ec>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d910      	bls.n	8002488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b72      	ldr	r3, [pc, #456]	@ (8002630 <HAL_RCC_ClockConfig+0x1ec>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 0207 	bic.w	r2, r3, #7
 800246e:	4970      	ldr	r1, [pc, #448]	@ (8002630 <HAL_RCC_ClockConfig+0x1ec>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b6e      	ldr	r3, [pc, #440]	@ (8002630 <HAL_RCC_ClockConfig+0x1ec>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0cf      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d010      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	4b66      	ldr	r3, [pc, #408]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d908      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b63      	ldr	r3, [pc, #396]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4960      	ldr	r1, [pc, #384]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d04c      	beq.n	800255c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d121      	bne.n	800251a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0a6      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e2:	4b54      	ldr	r3, [pc, #336]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d115      	bne.n	800251a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e09a      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e08e      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800250a:	4b4a      	ldr	r3, [pc, #296]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e086      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800251a:	4b46      	ldr	r3, [pc, #280]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f023 0203 	bic.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4943      	ldr	r1, [pc, #268]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252c:	f7fe fe6c 	bl	8001208 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	e00a      	b.n	800254a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002534:	f7fe fe68 	bl	8001208 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e06e      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	4b3a      	ldr	r3, [pc, #232]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 020c 	and.w	r2, r3, #12
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	429a      	cmp	r2, r3
 800255a:	d1eb      	bne.n	8002534 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d010      	beq.n	800258a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002574:	429a      	cmp	r2, r3
 8002576:	d208      	bcs.n	800258a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b2e      	ldr	r3, [pc, #184]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	492b      	ldr	r1, [pc, #172]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800258a:	4b29      	ldr	r3, [pc, #164]	@ (8002630 <HAL_RCC_ClockConfig+0x1ec>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d210      	bcs.n	80025ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002598:	4b25      	ldr	r3, [pc, #148]	@ (8002630 <HAL_RCC_ClockConfig+0x1ec>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 0207 	bic.w	r2, r3, #7
 80025a0:	4923      	ldr	r1, [pc, #140]	@ (8002630 <HAL_RCC_ClockConfig+0x1ec>)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a8:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <HAL_RCC_ClockConfig+0x1ec>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e036      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	4918      	ldr	r1, [pc, #96]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d009      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e4:	4b13      	ldr	r3, [pc, #76]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4910      	ldr	r1, [pc, #64]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025f8:	f000 f824 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	490b      	ldr	r1, [pc, #44]	@ (8002638 <HAL_RCC_ClockConfig+0x1f4>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
 8002614:	4a09      	ldr	r2, [pc, #36]	@ (800263c <HAL_RCC_ClockConfig+0x1f8>)
 8002616:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002618:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <HAL_RCC_ClockConfig+0x1fc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fda3 	bl	8001168 <HAL_InitTick>
 8002622:	4603      	mov	r3, r0
 8002624:	72fb      	strb	r3, [r7, #11]

  return status;
 8002626:	7afb      	ldrb	r3, [r7, #11]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40022000 	.word	0x40022000
 8002634:	40021000 	.word	0x40021000
 8002638:	080055c4 	.word	0x080055c4
 800263c:	20000000 	.word	0x20000000
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002652:	4b3e      	ldr	r3, [pc, #248]	@ (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800265c:	4b3b      	ldr	r3, [pc, #236]	@ (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x34>
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d121      	bne.n	80026b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d11e      	bne.n	80026b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002678:	4b34      	ldr	r3, [pc, #208]	@ (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002684:	4b31      	ldr	r3, [pc, #196]	@ (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 8002686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	e005      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002694:	4b2d      	ldr	r3, [pc, #180]	@ (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10d      	bne.n	80026cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d102      	bne.n	80026c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026bc:	4b25      	ldr	r3, [pc, #148]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x110>)
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	e004      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026c8:	4b23      	ldr	r3, [pc, #140]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d134      	bne.n	800273c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026d2:	4b1e      	ldr	r3, [pc, #120]	@ (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_GetSysClockFreq+0xa6>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d003      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0xac>
 80026e8:	e005      	b.n	80026f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ec:	617b      	str	r3, [r7, #20]
      break;
 80026ee:	e005      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026f0:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x114>)
 80026f2:	617b      	str	r3, [r7, #20]
      break;
 80026f4:	e002      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	617b      	str	r3, [r7, #20]
      break;
 80026fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026fc:	4b13      	ldr	r3, [pc, #76]	@ (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	3301      	adds	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	fb03 f202 	mul.w	r2, r3, r2
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <HAL_RCC_GetSysClockFreq+0x108>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	0e5b      	lsrs	r3, r3, #25
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	3301      	adds	r3, #1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800273c:	69bb      	ldr	r3, [r7, #24]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	@ 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	080055dc 	.word	0x080055dc
 8002754:	00f42400 	.word	0x00f42400
 8002758:	007a1200 	.word	0x007a1200

0800275c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002760:	4b03      	ldr	r3, [pc, #12]	@ (8002770 <HAL_RCC_GetHCLKFreq+0x14>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000

08002774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002778:	f7ff fff0 	bl	800275c <HAL_RCC_GetHCLKFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4904      	ldr	r1, [pc, #16]	@ (800279c <HAL_RCC_GetPCLK1Freq+0x28>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	f003 031f 	and.w	r3, r3, #31
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000
 800279c:	080055d4 	.word	0x080055d4

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027a4:	f7ff ffda 	bl	800275c <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0adb      	lsrs	r3, r3, #11
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4904      	ldr	r1, [pc, #16]	@ (80027c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	080055d4 	.word	0x080055d4

080027cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027e4:	f7ff f9ee 	bl	8001bc4 <HAL_PWREx_GetVoltageRange>
 80027e8:	6178      	str	r0, [r7, #20]
 80027ea:	e014      	b.n	8002816 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027ec:	4b25      	ldr	r3, [pc, #148]	@ (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	4a24      	ldr	r2, [pc, #144]	@ (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027f8:	4b22      	ldr	r3, [pc, #136]	@ (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002804:	f7ff f9de 	bl	8001bc4 <HAL_PWREx_GetVoltageRange>
 8002808:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800280a:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280e:	4a1d      	ldr	r2, [pc, #116]	@ (8002884 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002814:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800281c:	d10b      	bne.n	8002836 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b80      	cmp	r3, #128	@ 0x80
 8002822:	d919      	bls.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2ba0      	cmp	r3, #160	@ 0xa0
 8002828:	d902      	bls.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800282a:	2302      	movs	r3, #2
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	e013      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002830:	2301      	movs	r3, #1
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e010      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b80      	cmp	r3, #128	@ 0x80
 800283a:	d902      	bls.n	8002842 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800283c:	2303      	movs	r3, #3
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e00a      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b80      	cmp	r3, #128	@ 0x80
 8002846:	d102      	bne.n	800284e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002848:	2302      	movs	r3, #2
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	e004      	b.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b70      	cmp	r3, #112	@ 0x70
 8002852:	d101      	bne.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002854:	2301      	movs	r3, #1
 8002856:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 0207 	bic.w	r2, r3, #7
 8002860:	4909      	ldr	r1, [pc, #36]	@ (8002888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002868:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000
 8002888:	40022000 	.word	0x40022000

0800288c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002894:	2300      	movs	r3, #0
 8002896:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002898:	2300      	movs	r3, #0
 800289a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d041      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028b0:	d02a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028b6:	d824      	bhi.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028bc:	d008      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028c2:	d81e      	bhi.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028cc:	d010      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028ce:	e018      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028d0:	4b86      	ldr	r3, [pc, #536]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a85      	ldr	r2, [pc, #532]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028dc:	e015      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fabb 	bl	8002e60 <RCCEx_PLLSAI1_Config>
 80028ea:	4603      	mov	r3, r0
 80028ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ee:	e00c      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3320      	adds	r3, #32
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fba6 	bl	8003048 <RCCEx_PLLSAI2_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002900:	e003      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	74fb      	strb	r3, [r7, #19]
      break;
 8002906:	e000      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002910:	4b76      	ldr	r3, [pc, #472]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800291e:	4973      	ldr	r1, [pc, #460]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002926:	e001      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d041      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800293c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002940:	d02a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002942:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002946:	d824      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800294c:	d008      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800294e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002952:	d81e      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800295c:	d010      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800295e:	e018      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002960:	4b62      	ldr	r3, [pc, #392]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a61      	ldr	r2, [pc, #388]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800296c:	e015      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fa73 	bl	8002e60 <RCCEx_PLLSAI1_Config>
 800297a:	4603      	mov	r3, r0
 800297c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800297e:	e00c      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3320      	adds	r3, #32
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fb5e 	bl	8003048 <RCCEx_PLLSAI2_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002990:	e003      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	74fb      	strb	r3, [r7, #19]
      break;
 8002996:	e000      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029a0:	4b52      	ldr	r3, [pc, #328]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ae:	494f      	ldr	r1, [pc, #316]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80029b6:	e001      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80a0 	beq.w	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ce:	4b47      	ldr	r3, [pc, #284]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00d      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b41      	ldr	r3, [pc, #260]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	4a40      	ldr	r2, [pc, #256]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80029f0:	4b3e      	ldr	r3, [pc, #248]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a00:	4b3b      	ldr	r3, [pc, #236]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a3a      	ldr	r2, [pc, #232]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fbfc 	bl	8001208 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a12:	e009      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7fe fbf8 	bl	8001208 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d902      	bls.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	74fb      	strb	r3, [r7, #19]
        break;
 8002a26:	e005      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a28:	4b31      	ldr	r3, [pc, #196]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ef      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d15c      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01f      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d019      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a58:	4b24      	ldr	r3, [pc, #144]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a64:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	4a20      	ldr	r2, [pc, #128]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a74:	4b1d      	ldr	r3, [pc, #116]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a84:	4a19      	ldr	r2, [pc, #100]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d016      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fbb7 	bl	8001208 <HAL_GetTick>
 8002a9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe fbb3 	bl	8001208 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d902      	bls.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ab4:	e006      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ec      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aca:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ada:	4904      	ldr	r1, [pc, #16]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ae2:	e009      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	74bb      	strb	r3, [r7, #18]
 8002ae8:	e006      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af8:	7c7b      	ldrb	r3, [r7, #17]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d105      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afe:	4b9e      	ldr	r3, [pc, #632]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b02:	4a9d      	ldr	r2, [pc, #628]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b16:	4b98      	ldr	r3, [pc, #608]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1c:	f023 0203 	bic.w	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b24:	4994      	ldr	r1, [pc, #592]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b38:	4b8f      	ldr	r3, [pc, #572]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	f023 020c 	bic.w	r2, r3, #12
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b46:	498c      	ldr	r1, [pc, #560]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b5a:	4b87      	ldr	r3, [pc, #540]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	4983      	ldr	r1, [pc, #524]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	497b      	ldr	r1, [pc, #492]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b9e:	4b76      	ldr	r3, [pc, #472]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bac:	4972      	ldr	r1, [pc, #456]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bc0:	4b6d      	ldr	r3, [pc, #436]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	496a      	ldr	r1, [pc, #424]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002be2:	4b65      	ldr	r3, [pc, #404]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	4961      	ldr	r1, [pc, #388]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c04:	4b5c      	ldr	r3, [pc, #368]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c12:	4959      	ldr	r1, [pc, #356]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c26:	4b54      	ldr	r3, [pc, #336]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c34:	4950      	ldr	r1, [pc, #320]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c48:	4b4b      	ldr	r3, [pc, #300]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c56:	4948      	ldr	r1, [pc, #288]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c6a:	4b43      	ldr	r3, [pc, #268]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c78:	493f      	ldr	r1, [pc, #252]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d028      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c9a:	4937      	ldr	r1, [pc, #220]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002caa:	d106      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cac:	4b32      	ldr	r3, [pc, #200]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4a31      	ldr	r2, [pc, #196]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cb6:	60d3      	str	r3, [r2, #12]
 8002cb8:	e011      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cc2:	d10c      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f8c8 	bl	8002e60 <RCCEx_PLLSAI1_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d028      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cea:	4b23      	ldr	r3, [pc, #140]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf8:	491f      	ldr	r1, [pc, #124]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d08:	d106      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d14:	60d3      	str	r3, [r2, #12]
 8002d16:	e011      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	2101      	movs	r1, #1
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 f899 	bl	8002e60 <RCCEx_PLLSAI1_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d02b      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d56:	4908      	ldr	r1, [pc, #32]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d66:	d109      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d68:	4b03      	ldr	r3, [pc, #12]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a02      	ldr	r2, [pc, #8]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d72:	60d3      	str	r3, [r2, #12]
 8002d74:	e014      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 f867 	bl	8002e60 <RCCEx_PLLSAI1_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d96:	7cfb      	ldrb	r3, [r7, #19]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d9c:	7cfb      	ldrb	r3, [r7, #19]
 8002d9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d02f      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dac:	4b2b      	ldr	r3, [pc, #172]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dba:	4928      	ldr	r1, [pc, #160]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dca:	d10d      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f844 	bl	8002e60 <RCCEx_PLLSAI1_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d014      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	74bb      	strb	r3, [r7, #18]
 8002de6:	e011      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3320      	adds	r3, #32
 8002df6:	2102      	movs	r1, #2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 f925 	bl	8003048 <RCCEx_PLLSAI2_Config>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e02:	7cfb      	ldrb	r3, [r7, #19]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e18:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e26:	490d      	ldr	r1, [pc, #52]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e4a:	4904      	ldr	r1, [pc, #16]	@ (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e52:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000

08002e60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e6e:	4b75      	ldr	r3, [pc, #468]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d018      	beq.n	8002eac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e7a:	4b72      	ldr	r3, [pc, #456]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0203 	and.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d10d      	bne.n	8002ea6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e92:	4b6c      	ldr	r3, [pc, #432]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d047      	beq.n	8002f36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
 8002eaa:	e044      	b.n	8002f36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d018      	beq.n	8002ee6 <RCCEx_PLLSAI1_Config+0x86>
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d825      	bhi.n	8002f04 <RCCEx_PLLSAI1_Config+0xa4>
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d002      	beq.n	8002ec2 <RCCEx_PLLSAI1_Config+0x62>
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d009      	beq.n	8002ed4 <RCCEx_PLLSAI1_Config+0x74>
 8002ec0:	e020      	b.n	8002f04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ec2:	4b60      	ldr	r3, [pc, #384]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d11d      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed2:	e01a      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ed4:	4b5b      	ldr	r3, [pc, #364]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d116      	bne.n	8002f0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee4:	e013      	b.n	8002f0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ee6:	4b57      	ldr	r3, [pc, #348]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10f      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ef2:	4b54      	ldr	r3, [pc, #336]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f02:	e006      	b.n	8002f12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      break;
 8002f08:	e004      	b.n	8002f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e002      	b.n	8002f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f12:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10d      	bne.n	8002f36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	4944      	ldr	r1, [pc, #272]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d17d      	bne.n	8003038 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f3c:	4b41      	ldr	r3, [pc, #260]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a40      	ldr	r2, [pc, #256]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f48:	f7fe f95e 	bl	8001208 <HAL_GetTick>
 8002f4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f4e:	e009      	b.n	8002f64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f50:	f7fe f95a 	bl	8001208 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d902      	bls.n	8002f64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	73fb      	strb	r3, [r7, #15]
        break;
 8002f62:	e005      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f64:	4b37      	ldr	r3, [pc, #220]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ef      	bne.n	8002f50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d160      	bne.n	8003038 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d111      	bne.n	8002fa0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f7c:	4b31      	ldr	r3, [pc, #196]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6892      	ldr	r2, [r2, #8]
 8002f8c:	0211      	lsls	r1, r2, #8
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68d2      	ldr	r2, [r2, #12]
 8002f92:	0912      	lsrs	r2, r2, #4
 8002f94:	0452      	lsls	r2, r2, #17
 8002f96:	430a      	orrs	r2, r1
 8002f98:	492a      	ldr	r1, [pc, #168]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	610b      	str	r3, [r1, #16]
 8002f9e:	e027      	b.n	8002ff0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d112      	bne.n	8002fcc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa6:	4b27      	ldr	r3, [pc, #156]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002fae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6892      	ldr	r2, [r2, #8]
 8002fb6:	0211      	lsls	r1, r2, #8
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6912      	ldr	r2, [r2, #16]
 8002fbc:	0852      	lsrs	r2, r2, #1
 8002fbe:	3a01      	subs	r2, #1
 8002fc0:	0552      	lsls	r2, r2, #21
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	491f      	ldr	r1, [pc, #124]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	610b      	str	r3, [r1, #16]
 8002fca:	e011      	b.n	8002ff0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fd4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6892      	ldr	r2, [r2, #8]
 8002fdc:	0211      	lsls	r1, r2, #8
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6952      	ldr	r2, [r2, #20]
 8002fe2:	0852      	lsrs	r2, r2, #1
 8002fe4:	3a01      	subs	r2, #1
 8002fe6:	0652      	lsls	r2, r2, #25
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	4916      	ldr	r1, [pc, #88]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ff0:	4b14      	ldr	r3, [pc, #80]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a13      	ldr	r2, [pc, #76]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ffa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7fe f904 	bl	8001208 <HAL_GetTick>
 8003000:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003002:	e009      	b.n	8003018 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003004:	f7fe f900 	bl	8001208 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d902      	bls.n	8003018 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	73fb      	strb	r3, [r7, #15]
          break;
 8003016:	e005      	b.n	8003024 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003018:	4b0a      	ldr	r3, [pc, #40]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ef      	beq.n	8003004 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800302a:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	4904      	ldr	r1, [pc, #16]	@ (8003044 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000

08003048 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003056:	4b6a      	ldr	r3, [pc, #424]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d018      	beq.n	8003094 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003062:	4b67      	ldr	r3, [pc, #412]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0203 	and.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d10d      	bne.n	800308e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
       ||
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800307a:	4b61      	ldr	r3, [pc, #388]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
       ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d047      	beq.n	800311e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	e044      	b.n	800311e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d018      	beq.n	80030ce <RCCEx_PLLSAI2_Config+0x86>
 800309c:	2b03      	cmp	r3, #3
 800309e:	d825      	bhi.n	80030ec <RCCEx_PLLSAI2_Config+0xa4>
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d002      	beq.n	80030aa <RCCEx_PLLSAI2_Config+0x62>
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d009      	beq.n	80030bc <RCCEx_PLLSAI2_Config+0x74>
 80030a8:	e020      	b.n	80030ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030aa:	4b55      	ldr	r3, [pc, #340]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d11d      	bne.n	80030f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ba:	e01a      	b.n	80030f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030bc:	4b50      	ldr	r3, [pc, #320]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d116      	bne.n	80030f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030cc:	e013      	b.n	80030f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030da:	4b49      	ldr	r3, [pc, #292]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ea:	e006      	b.n	80030fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	e004      	b.n	80030fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030f2:	bf00      	nop
 80030f4:	e002      	b.n	80030fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030f6:	bf00      	nop
 80030f8:	e000      	b.n	80030fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003102:	4b3f      	ldr	r3, [pc, #252]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6819      	ldr	r1, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	430b      	orrs	r3, r1
 8003118:	4939      	ldr	r1, [pc, #228]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311a:	4313      	orrs	r3, r2
 800311c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d167      	bne.n	80031f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003124:	4b36      	ldr	r3, [pc, #216]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a35      	ldr	r2, [pc, #212]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800312e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003130:	f7fe f86a 	bl	8001208 <HAL_GetTick>
 8003134:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003136:	e009      	b.n	800314c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003138:	f7fe f866 	bl	8001208 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d902      	bls.n	800314c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	73fb      	strb	r3, [r7, #15]
        break;
 800314a:	e005      	b.n	8003158 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800314c:	4b2c      	ldr	r3, [pc, #176]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1ef      	bne.n	8003138 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d14a      	bne.n	80031f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d111      	bne.n	8003188 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003164:	4b26      	ldr	r3, [pc, #152]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800316c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6892      	ldr	r2, [r2, #8]
 8003174:	0211      	lsls	r1, r2, #8
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68d2      	ldr	r2, [r2, #12]
 800317a:	0912      	lsrs	r2, r2, #4
 800317c:	0452      	lsls	r2, r2, #17
 800317e:	430a      	orrs	r2, r1
 8003180:	491f      	ldr	r1, [pc, #124]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	614b      	str	r3, [r1, #20]
 8003186:	e011      	b.n	80031ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003188:	4b1d      	ldr	r3, [pc, #116]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003190:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6892      	ldr	r2, [r2, #8]
 8003198:	0211      	lsls	r1, r2, #8
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6912      	ldr	r2, [r2, #16]
 800319e:	0852      	lsrs	r2, r2, #1
 80031a0:	3a01      	subs	r2, #1
 80031a2:	0652      	lsls	r2, r2, #25
 80031a4:	430a      	orrs	r2, r1
 80031a6:	4916      	ldr	r1, [pc, #88]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031ac:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a13      	ldr	r2, [pc, #76]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fe f826 	bl	8001208 <HAL_GetTick>
 80031bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031be:	e009      	b.n	80031d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031c0:	f7fe f822 	bl	8001208 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d902      	bls.n	80031d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	73fb      	strb	r3, [r7, #15]
          break;
 80031d2:	e005      	b.n	80031e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ef      	beq.n	80031c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031e6:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4904      	ldr	r1, [pc, #16]	@ (8003200 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000

08003204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e040      	b.n	8003298 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd fd30 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	@ 0x24
 8003230:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0201 	bic.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 ff3a 	bl	80040c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fc7f 	bl	8003b54 <UART_SetConfig>
 8003256:	4603      	mov	r3, r0
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e01b      	b.n	8003298 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800326e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800327e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 ffb9 	bl	8004208 <UART_CheckIdleState>
 8003296:	4603      	mov	r3, r0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	@ 0x28
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d177      	bne.n	80033a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_UART_Transmit+0x24>
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e070      	b.n	80033aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2221      	movs	r2, #33	@ 0x21
 80032d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d6:	f7fd ff97 	bl	8001208 <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	88fa      	ldrh	r2, [r7, #6]
 80032e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f4:	d108      	bne.n	8003308 <HAL_UART_Transmit+0x68>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d104      	bne.n	8003308 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	e003      	b.n	8003310 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003310:	e02f      	b.n	8003372 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2200      	movs	r2, #0
 800331a:	2180      	movs	r1, #128	@ 0x80
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f001 f81b 	bl	8004358 <UART_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d004      	beq.n	8003332 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e03b      	b.n	80033aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	881a      	ldrh	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003344:	b292      	uxth	r2, r2
 8003346:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	3302      	adds	r3, #2
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	e007      	b.n	8003360 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	781a      	ldrb	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1c9      	bne.n	8003312 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	2140      	movs	r1, #64	@ 0x40
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 ffe5 	bl	8004358 <UART_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e005      	b.n	80033aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b08b      	sub	sp, #44	@ 0x2c
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d147      	bne.n	800345a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_UART_Transmit_IT+0x22>
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e040      	b.n	800345c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2221      	movs	r2, #33	@ 0x21
 8003402:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800340c:	d107      	bne.n	800341e <HAL_UART_Transmit_IT+0x6a>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d103      	bne.n	800341e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a13      	ldr	r2, [pc, #76]	@ (8003468 <HAL_UART_Transmit_IT+0xb4>)
 800341a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800341c:	e002      	b.n	8003424 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a12      	ldr	r2, [pc, #72]	@ (800346c <HAL_UART_Transmit_IT+0xb8>)
 8003422:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	613b      	str	r3, [r7, #16]
   return(result);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	69f9      	ldr	r1, [r7, #28]
 8003448:	6a3a      	ldr	r2, [r7, #32]
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e6      	bne.n	8003424 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	372c      	adds	r7, #44	@ 0x2c
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	0800476b 	.word	0x0800476b
 800346c:	080046b5 	.word	0x080046b5

08003470 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	@ 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	4613      	mov	r3, r2
 800347c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003484:	2b20      	cmp	r3, #32
 8003486:	d137      	bne.n	80034f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_UART_Receive_IT+0x24>
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e030      	b.n	80034fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a18      	ldr	r2, [pc, #96]	@ (8003504 <HAL_UART_Receive_IT+0x94>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d01f      	beq.n	80034e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	e853 3f00 	ldrex	r3, [r3]
 80034c2:	613b      	str	r3, [r7, #16]
   return(result);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	623b      	str	r3, [r7, #32]
 80034d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	69f9      	ldr	r1, [r7, #28]
 80034da:	6a3a      	ldr	r2, [r7, #32]
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e6      	bne.n	80034b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 ffa0 	bl	8004434 <UART_Start_Receive_IT>
 80034f4:	4603      	mov	r3, r0
 80034f6:	e000      	b.n	80034fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3728      	adds	r7, #40	@ 0x28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40008000 	.word	0x40008000

08003508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b0ba      	sub	sp, #232	@ 0xe8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800352e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003532:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003536:	4013      	ands	r3, r2
 8003538:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800353c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d115      	bne.n	8003570 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00f      	beq.n	8003570 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 82ca 	beq.w	8003afa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
      }
      return;
 800356e:	e2c4      	b.n	8003afa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 8117 	beq.w	80037a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800357a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800358a:	4b85      	ldr	r3, [pc, #532]	@ (80037a0 <HAL_UART_IRQHandler+0x298>)
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 810a 	beq.w	80037a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d011      	beq.n	80035c4 <HAL_UART_IRQHandler+0xbc>
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2201      	movs	r2, #1
 80035b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d011      	beq.n	80035f4 <HAL_UART_IRQHandler+0xec>
 80035d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00b      	beq.n	80035f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2202      	movs	r2, #2
 80035e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ea:	f043 0204 	orr.w	r2, r3, #4
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d011      	beq.n	8003624 <HAL_UART_IRQHandler+0x11c>
 8003600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00b      	beq.n	8003624 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2204      	movs	r2, #4
 8003612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800361a:	f043 0202 	orr.w	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d017      	beq.n	8003660 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800363c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003640:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00b      	beq.n	8003660 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2208      	movs	r2, #8
 800364e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003656:	f043 0208 	orr.w	r2, r3, #8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003668:	2b00      	cmp	r3, #0
 800366a:	d012      	beq.n	8003692 <HAL_UART_IRQHandler+0x18a>
 800366c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003670:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00c      	beq.n	8003692 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8230 	beq.w	8003afe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036da:	2b40      	cmp	r3, #64	@ 0x40
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d04f      	beq.n	800378a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 ff68 	bl	80045c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fa:	2b40      	cmp	r3, #64	@ 0x40
 80036fc:	d141      	bne.n	8003782 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3308      	adds	r3, #8
 8003704:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003714:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800371c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3308      	adds	r3, #8
 8003726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800372a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800372e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1d9      	bne.n	80036fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374e:	2b00      	cmp	r3, #0
 8003750:	d013      	beq.n	800377a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003756:	4a13      	ldr	r2, [pc, #76]	@ (80037a4 <HAL_UART_IRQHandler+0x29c>)
 8003758:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd ff66 	bl	8001630 <HAL_DMA_Abort_IT>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d017      	beq.n	800379a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003774:	4610      	mov	r0, r2
 8003776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003778:	e00f      	b.n	800379a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9d4 	bl	8003b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	e00b      	b.n	800379a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9d0 	bl	8003b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	e007      	b.n	800379a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9cc 	bl	8003b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003798:	e1b1      	b.n	8003afe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800379a:	bf00      	nop
    return;
 800379c:	e1af      	b.n	8003afe <HAL_UART_IRQHandler+0x5f6>
 800379e:	bf00      	nop
 80037a0:	04000120 	.word	0x04000120
 80037a4:	08004689 	.word	0x08004689

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	f040 816a 	bne.w	8003a86 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8163 	beq.w	8003a86 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 815c 	beq.w	8003a86 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2210      	movs	r2, #16
 80037d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e0:	2b40      	cmp	r3, #64	@ 0x40
 80037e2:	f040 80d4 	bne.w	800398e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80ad 	beq.w	8003956 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003806:	429a      	cmp	r2, r3
 8003808:	f080 80a5 	bcs.w	8003956 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003812:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 8086 	bne.w	8003934 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800383c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003852:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003856:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800385e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800386a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1da      	bne.n	8003828 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3308      	adds	r3, #8
 8003878:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003882:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3308      	adds	r3, #8
 8003892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003896:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800389a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800389e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e1      	bne.n	8003872 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3308      	adds	r3, #8
 80038b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80038be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3308      	adds	r3, #8
 80038ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80038d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80038d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038da:	e841 2300 	strex	r3, r2, [r1]
 80038de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80038e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1e3      	bne.n	80038ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003904:	f023 0310 	bic.w	r3, r3, #16
 8003908:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003916:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003918:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800391c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e4      	bne.n	80038f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fe40 	bl	80015b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003946:	b29b      	uxth	r3, r3
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	b29b      	uxth	r3, r3
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8f4 	bl	8003b3c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003954:	e0d5      	b.n	8003b02 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800395c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003960:	429a      	cmp	r2, r3
 8003962:	f040 80ce 	bne.w	8003b02 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	f040 80c5 	bne.w	8003b02 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003984:	4619      	mov	r1, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8d8 	bl	8003b3c <HAL_UARTEx_RxEventCallback>
      return;
 800398c:	e0b9      	b.n	8003b02 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800399a:	b29b      	uxth	r3, r3
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80ab 	beq.w	8003b06 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80039b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80a6 	beq.w	8003b06 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e4      	bne.n	80039ba <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3308      	adds	r3, #8
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3308      	adds	r3, #8
 8003a10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a14:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e3      	bne.n	80039f0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f023 0310 	bic.w	r3, r3, #16
 8003a50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	69b9      	ldr	r1, [r7, #24]
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e4      	bne.n	8003a3c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f85c 	bl	8003b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a84:	e03f      	b.n	8003b06 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00e      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x5a8>
 8003a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003aa6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 f8a5 	bl	8004bf8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003aae:	e02d      	b.n	8003b0c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01c      	beq.n	8003b0a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
    }
    return;
 8003ad8:	e017      	b.n	8003b0a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d012      	beq.n	8003b0c <HAL_UART_IRQHandler+0x604>
 8003ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fe99 	bl	800482a <UART_EndTransmit_IT>
    return;
 8003af8:	e008      	b.n	8003b0c <HAL_UART_IRQHandler+0x604>
      return;
 8003afa:	bf00      	nop
 8003afc:	e006      	b.n	8003b0c <HAL_UART_IRQHandler+0x604>
    return;
 8003afe:	bf00      	nop
 8003b00:	e004      	b.n	8003b0c <HAL_UART_IRQHandler+0x604>
      return;
 8003b02:	bf00      	nop
 8003b04:	e002      	b.n	8003b0c <HAL_UART_IRQHandler+0x604>
      return;
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <HAL_UART_IRQHandler+0x604>
    return;
 8003b0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003b0c:	37e8      	adds	r7, #232	@ 0xe8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop

08003b14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b58:	b08a      	sub	sp, #40	@ 0x28
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4ba4      	ldr	r3, [pc, #656]	@ (8003e14 <UART_SetConfig+0x2c0>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a99      	ldr	r2, [pc, #612]	@ (8003e18 <UART_SetConfig+0x2c4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a90      	ldr	r2, [pc, #576]	@ (8003e1c <UART_SetConfig+0x2c8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d126      	bne.n	8003c2c <UART_SetConfig+0xd8>
 8003bde:	4b90      	ldr	r3, [pc, #576]	@ (8003e20 <UART_SetConfig+0x2cc>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d81b      	bhi.n	8003c24 <UART_SetConfig+0xd0>
 8003bec:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <UART_SetConfig+0xa0>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c15 	.word	0x08003c15
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c1d 	.word	0x08003c1d
 8003c04:	2301      	movs	r3, #1
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0a:	e116      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c12:	e112      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003c14:	2304      	movs	r3, #4
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1a:	e10e      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c22:	e10a      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003c24:	2310      	movs	r3, #16
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2a:	e106      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a7c      	ldr	r2, [pc, #496]	@ (8003e24 <UART_SetConfig+0x2d0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d138      	bne.n	8003ca8 <UART_SetConfig+0x154>
 8003c36:	4b7a      	ldr	r3, [pc, #488]	@ (8003e20 <UART_SetConfig+0x2cc>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	d82d      	bhi.n	8003ca0 <UART_SetConfig+0x14c>
 8003c44:	a201      	add	r2, pc, #4	@ (adr r2, 8003c4c <UART_SetConfig+0xf8>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c81 	.word	0x08003c81
 8003c50:	08003ca1 	.word	0x08003ca1
 8003c54:	08003ca1 	.word	0x08003ca1
 8003c58:	08003ca1 	.word	0x08003ca1
 8003c5c:	08003c91 	.word	0x08003c91
 8003c60:	08003ca1 	.word	0x08003ca1
 8003c64:	08003ca1 	.word	0x08003ca1
 8003c68:	08003ca1 	.word	0x08003ca1
 8003c6c:	08003c89 	.word	0x08003c89
 8003c70:	08003ca1 	.word	0x08003ca1
 8003c74:	08003ca1 	.word	0x08003ca1
 8003c78:	08003ca1 	.word	0x08003ca1
 8003c7c:	08003c99 	.word	0x08003c99
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c86:	e0d8      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8e:	e0d4      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003c90:	2304      	movs	r3, #4
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c96:	e0d0      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003c98:	2308      	movs	r3, #8
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c9e:	e0cc      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ca6:	e0c8      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a5e      	ldr	r2, [pc, #376]	@ (8003e28 <UART_SetConfig+0x2d4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d125      	bne.n	8003cfe <UART_SetConfig+0x1aa>
 8003cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8003e20 <UART_SetConfig+0x2cc>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003cbc:	2b30      	cmp	r3, #48	@ 0x30
 8003cbe:	d016      	beq.n	8003cee <UART_SetConfig+0x19a>
 8003cc0:	2b30      	cmp	r3, #48	@ 0x30
 8003cc2:	d818      	bhi.n	8003cf6 <UART_SetConfig+0x1a2>
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d00a      	beq.n	8003cde <UART_SetConfig+0x18a>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d814      	bhi.n	8003cf6 <UART_SetConfig+0x1a2>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <UART_SetConfig+0x182>
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d008      	beq.n	8003ce6 <UART_SetConfig+0x192>
 8003cd4:	e00f      	b.n	8003cf6 <UART_SetConfig+0x1a2>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cdc:	e0ad      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce4:	e0a9      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cec:	e0a5      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003cee:	2308      	movs	r3, #8
 8003cf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf4:	e0a1      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003cf6:	2310      	movs	r3, #16
 8003cf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfc:	e09d      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a4a      	ldr	r2, [pc, #296]	@ (8003e2c <UART_SetConfig+0x2d8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d125      	bne.n	8003d54 <UART_SetConfig+0x200>
 8003d08:	4b45      	ldr	r3, [pc, #276]	@ (8003e20 <UART_SetConfig+0x2cc>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d12:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d14:	d016      	beq.n	8003d44 <UART_SetConfig+0x1f0>
 8003d16:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d18:	d818      	bhi.n	8003d4c <UART_SetConfig+0x1f8>
 8003d1a:	2b80      	cmp	r3, #128	@ 0x80
 8003d1c:	d00a      	beq.n	8003d34 <UART_SetConfig+0x1e0>
 8003d1e:	2b80      	cmp	r3, #128	@ 0x80
 8003d20:	d814      	bhi.n	8003d4c <UART_SetConfig+0x1f8>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <UART_SetConfig+0x1d8>
 8003d26:	2b40      	cmp	r3, #64	@ 0x40
 8003d28:	d008      	beq.n	8003d3c <UART_SetConfig+0x1e8>
 8003d2a:	e00f      	b.n	8003d4c <UART_SetConfig+0x1f8>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d32:	e082      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003d34:	2302      	movs	r3, #2
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3a:	e07e      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d42:	e07a      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003d44:	2308      	movs	r3, #8
 8003d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4a:	e076      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d52:	e072      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a35      	ldr	r2, [pc, #212]	@ (8003e30 <UART_SetConfig+0x2dc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d12a      	bne.n	8003db4 <UART_SetConfig+0x260>
 8003d5e:	4b30      	ldr	r3, [pc, #192]	@ (8003e20 <UART_SetConfig+0x2cc>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d6c:	d01a      	beq.n	8003da4 <UART_SetConfig+0x250>
 8003d6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d72:	d81b      	bhi.n	8003dac <UART_SetConfig+0x258>
 8003d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d78:	d00c      	beq.n	8003d94 <UART_SetConfig+0x240>
 8003d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d7e:	d815      	bhi.n	8003dac <UART_SetConfig+0x258>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <UART_SetConfig+0x238>
 8003d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d88:	d008      	beq.n	8003d9c <UART_SetConfig+0x248>
 8003d8a:	e00f      	b.n	8003dac <UART_SetConfig+0x258>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d92:	e052      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003d94:	2302      	movs	r3, #2
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9a:	e04e      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da2:	e04a      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003da4:	2308      	movs	r3, #8
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003daa:	e046      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e042      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a17      	ldr	r2, [pc, #92]	@ (8003e18 <UART_SetConfig+0x2c4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d13a      	bne.n	8003e34 <UART_SetConfig+0x2e0>
 8003dbe:	4b18      	ldr	r3, [pc, #96]	@ (8003e20 <UART_SetConfig+0x2cc>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003dc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dcc:	d01a      	beq.n	8003e04 <UART_SetConfig+0x2b0>
 8003dce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dd2:	d81b      	bhi.n	8003e0c <UART_SetConfig+0x2b8>
 8003dd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dd8:	d00c      	beq.n	8003df4 <UART_SetConfig+0x2a0>
 8003dda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dde:	d815      	bhi.n	8003e0c <UART_SetConfig+0x2b8>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <UART_SetConfig+0x298>
 8003de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de8:	d008      	beq.n	8003dfc <UART_SetConfig+0x2a8>
 8003dea:	e00f      	b.n	8003e0c <UART_SetConfig+0x2b8>
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df2:	e022      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003df4:	2302      	movs	r3, #2
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfa:	e01e      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e02:	e01a      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003e04:	2308      	movs	r3, #8
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0a:	e016      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e12:	e012      	b.n	8003e3a <UART_SetConfig+0x2e6>
 8003e14:	efff69f3 	.word	0xefff69f3
 8003e18:	40008000 	.word	0x40008000
 8003e1c:	40013800 	.word	0x40013800
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40004400 	.word	0x40004400
 8003e28:	40004800 	.word	0x40004800
 8003e2c:	40004c00 	.word	0x40004c00
 8003e30:	40005000 	.word	0x40005000
 8003e34:	2310      	movs	r3, #16
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a9f      	ldr	r2, [pc, #636]	@ (80040bc <UART_SetConfig+0x568>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d17a      	bne.n	8003f3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d824      	bhi.n	8003e96 <UART_SetConfig+0x342>
 8003e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <UART_SetConfig+0x300>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003e97 	.word	0x08003e97
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08003e97 	.word	0x08003e97
 8003e64:	08003e87 	.word	0x08003e87
 8003e68:	08003e97 	.word	0x08003e97
 8003e6c:	08003e97 	.word	0x08003e97
 8003e70:	08003e97 	.word	0x08003e97
 8003e74:	08003e8f 	.word	0x08003e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e78:	f7fe fc7c 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8003e7c:	61f8      	str	r0, [r7, #28]
        break;
 8003e7e:	e010      	b.n	8003ea2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e80:	4b8f      	ldr	r3, [pc, #572]	@ (80040c0 <UART_SetConfig+0x56c>)
 8003e82:	61fb      	str	r3, [r7, #28]
        break;
 8003e84:	e00d      	b.n	8003ea2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e86:	f7fe fbdd 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8003e8a:	61f8      	str	r0, [r7, #28]
        break;
 8003e8c:	e009      	b.n	8003ea2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e92:	61fb      	str	r3, [r7, #28]
        break;
 8003e94:	e005      	b.n	8003ea2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ea0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80fb 	beq.w	80040a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d305      	bcc.n	8003ec6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d903      	bls.n	8003ece <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ecc:	e0e8      	b.n	80040a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	461c      	mov	r4, r3
 8003ed4:	4615      	mov	r5, r2
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	022b      	lsls	r3, r5, #8
 8003ee0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ee4:	0222      	lsls	r2, r4, #8
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	6849      	ldr	r1, [r1, #4]
 8003eea:	0849      	lsrs	r1, r1, #1
 8003eec:	2000      	movs	r0, #0
 8003eee:	4688      	mov	r8, r1
 8003ef0:	4681      	mov	r9, r0
 8003ef2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ef6:	eb43 0b09 	adc.w	fp, r3, r9
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f08:	4650      	mov	r0, sl
 8003f0a:	4659      	mov	r1, fp
 8003f0c:	f7fc f9b8 	bl	8000280 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4613      	mov	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f1e:	d308      	bcc.n	8003f32 <UART_SetConfig+0x3de>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f26:	d204      	bcs.n	8003f32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	60da      	str	r2, [r3, #12]
 8003f30:	e0b6      	b.n	80040a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f38:	e0b2      	b.n	80040a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f42:	d15e      	bne.n	8004002 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d828      	bhi.n	8003f9e <UART_SetConfig+0x44a>
 8003f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f54 <UART_SetConfig+0x400>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f79 	.word	0x08003f79
 8003f58:	08003f81 	.word	0x08003f81
 8003f5c:	08003f89 	.word	0x08003f89
 8003f60:	08003f9f 	.word	0x08003f9f
 8003f64:	08003f8f 	.word	0x08003f8f
 8003f68:	08003f9f 	.word	0x08003f9f
 8003f6c:	08003f9f 	.word	0x08003f9f
 8003f70:	08003f9f 	.word	0x08003f9f
 8003f74:	08003f97 	.word	0x08003f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f78:	f7fe fbfc 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8003f7c:	61f8      	str	r0, [r7, #28]
        break;
 8003f7e:	e014      	b.n	8003faa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f80:	f7fe fc0e 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8003f84:	61f8      	str	r0, [r7, #28]
        break;
 8003f86:	e010      	b.n	8003faa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f88:	4b4d      	ldr	r3, [pc, #308]	@ (80040c0 <UART_SetConfig+0x56c>)
 8003f8a:	61fb      	str	r3, [r7, #28]
        break;
 8003f8c:	e00d      	b.n	8003faa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8e:	f7fe fb59 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8003f92:	61f8      	str	r0, [r7, #28]
        break;
 8003f94:	e009      	b.n	8003faa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f9a:	61fb      	str	r3, [r7, #28]
        break;
 8003f9c:	e005      	b.n	8003faa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d077      	beq.n	80040a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005a      	lsls	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	441a      	add	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b0f      	cmp	r3, #15
 8003fca:	d916      	bls.n	8003ffa <UART_SetConfig+0x4a6>
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd2:	d212      	bcs.n	8003ffa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	f023 030f 	bic.w	r3, r3, #15
 8003fdc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	085b      	lsrs	r3, r3, #1
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	8afb      	ldrh	r3, [r7, #22]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	8afa      	ldrh	r2, [r7, #22]
 8003ff6:	60da      	str	r2, [r3, #12]
 8003ff8:	e052      	b.n	80040a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004000:	e04e      	b.n	80040a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004002:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004006:	2b08      	cmp	r3, #8
 8004008:	d827      	bhi.n	800405a <UART_SetConfig+0x506>
 800400a:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <UART_SetConfig+0x4bc>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004035 	.word	0x08004035
 8004014:	0800403d 	.word	0x0800403d
 8004018:	08004045 	.word	0x08004045
 800401c:	0800405b 	.word	0x0800405b
 8004020:	0800404b 	.word	0x0800404b
 8004024:	0800405b 	.word	0x0800405b
 8004028:	0800405b 	.word	0x0800405b
 800402c:	0800405b 	.word	0x0800405b
 8004030:	08004053 	.word	0x08004053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004034:	f7fe fb9e 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8004038:	61f8      	str	r0, [r7, #28]
        break;
 800403a:	e014      	b.n	8004066 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800403c:	f7fe fbb0 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 8004040:	61f8      	str	r0, [r7, #28]
        break;
 8004042:	e010      	b.n	8004066 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004044:	4b1e      	ldr	r3, [pc, #120]	@ (80040c0 <UART_SetConfig+0x56c>)
 8004046:	61fb      	str	r3, [r7, #28]
        break;
 8004048:	e00d      	b.n	8004066 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404a:	f7fe fafb 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 800404e:	61f8      	str	r0, [r7, #28]
        break;
 8004050:	e009      	b.n	8004066 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004056:	61fb      	str	r3, [r7, #28]
        break;
 8004058:	e005      	b.n	8004066 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004064:	bf00      	nop
    }

    if (pclk != 0U)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d019      	beq.n	80040a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	085a      	lsrs	r2, r3, #1
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	441a      	add	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b0f      	cmp	r3, #15
 8004084:	d909      	bls.n	800409a <UART_SetConfig+0x546>
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408c:	d205      	bcs.n	800409a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	e002      	b.n	80040a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3728      	adds	r7, #40	@ 0x28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ba:	bf00      	nop
 80040bc:	40008000 	.word	0x40008000
 80040c0:	00f42400 	.word	0x00f42400

080040c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01a      	beq.n	80041da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041c2:	d10a      	bne.n	80041da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]
  }
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b098      	sub	sp, #96	@ 0x60
 800420c:	af02      	add	r7, sp, #8
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004218:	f7fc fff6 	bl	8001208 <HAL_GetTick>
 800421c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b08      	cmp	r3, #8
 800422a:	d12e      	bne.n	800428a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800422c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004234:	2200      	movs	r2, #0
 8004236:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f88c 	bl	8004358 <UART_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d021      	beq.n	800428a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800425a:	653b      	str	r3, [r7, #80]	@ 0x50
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004264:	647b      	str	r3, [r7, #68]	@ 0x44
 8004266:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800426a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e6      	bne.n	8004246 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e062      	b.n	8004350 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b04      	cmp	r3, #4
 8004296:	d149      	bne.n	800432c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004298:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a0:	2200      	movs	r2, #0
 80042a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f856 	bl	8004358 <UART_WaitOnFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d03c      	beq.n	800432c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	623b      	str	r3, [r7, #32]
   return(result);
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e6      	bne.n	80042b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3308      	adds	r3, #8
 80042ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	e853 3f00 	ldrex	r3, [r3]
 80042f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0301 	bic.w	r3, r3, #1
 80042fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3308      	adds	r3, #8
 8004302:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004304:	61fa      	str	r2, [r7, #28]
 8004306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	69b9      	ldr	r1, [r7, #24]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	617b      	str	r3, [r7, #20]
   return(result);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e5      	bne.n	80042e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e011      	b.n	8004350 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3758      	adds	r7, #88	@ 0x58
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	4613      	mov	r3, r2
 8004366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004368:	e04f      	b.n	800440a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004370:	d04b      	beq.n	800440a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7fc ff49 	bl	8001208 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <UART_WaitOnFlagUntilTimeout+0x30>
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e04e      	b.n	800442a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d037      	beq.n	800440a <UART_WaitOnFlagUntilTimeout+0xb2>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b80      	cmp	r3, #128	@ 0x80
 800439e:	d034      	beq.n	800440a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b40      	cmp	r3, #64	@ 0x40
 80043a4:	d031      	beq.n	800440a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d110      	bne.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2208      	movs	r2, #8
 80043ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f8ff 	bl	80045c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2208      	movs	r2, #8
 80043c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e029      	b.n	800442a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e4:	d111      	bne.n	800440a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f8e5 	bl	80045c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e00f      	b.n	800442a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4013      	ands	r3, r2
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	bf0c      	ite	eq
 800441a:	2301      	moveq	r3, #1
 800441c:	2300      	movne	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	429a      	cmp	r2, r3
 8004426:	d0a0      	beq.n	800436a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004434:	b480      	push	{r7}
 8004436:	b097      	sub	sp, #92	@ 0x5c
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	88fa      	ldrh	r2, [r7, #6]
 800444c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004466:	d10e      	bne.n	8004486 <UART_Start_Receive_IT+0x52>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <UART_Start_Receive_IT+0x48>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004476:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800447a:	e02d      	b.n	80044d8 <UART_Start_Receive_IT+0xa4>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	22ff      	movs	r2, #255	@ 0xff
 8004480:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004484:	e028      	b.n	80044d8 <UART_Start_Receive_IT+0xa4>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10d      	bne.n	80044aa <UART_Start_Receive_IT+0x76>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d104      	bne.n	80044a0 <UART_Start_Receive_IT+0x6c>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	22ff      	movs	r2, #255	@ 0xff
 800449a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800449e:	e01b      	b.n	80044d8 <UART_Start_Receive_IT+0xa4>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	227f      	movs	r2, #127	@ 0x7f
 80044a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044a8:	e016      	b.n	80044d8 <UART_Start_Receive_IT+0xa4>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044b2:	d10d      	bne.n	80044d0 <UART_Start_Receive_IT+0x9c>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d104      	bne.n	80044c6 <UART_Start_Receive_IT+0x92>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	227f      	movs	r2, #127	@ 0x7f
 80044c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044c4:	e008      	b.n	80044d8 <UART_Start_Receive_IT+0xa4>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	223f      	movs	r2, #63	@ 0x3f
 80044ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044ce:	e003      	b.n	80044d8 <UART_Start_Receive_IT+0xa4>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2222      	movs	r2, #34	@ 0x22
 80044e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004508:	64ba      	str	r2, [r7, #72]	@ 0x48
 800450a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800450e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004524:	d107      	bne.n	8004536 <UART_Start_Receive_IT+0x102>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d103      	bne.n	8004536 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a21      	ldr	r2, [pc, #132]	@ (80045b8 <UART_Start_Receive_IT+0x184>)
 8004532:	669a      	str	r2, [r3, #104]	@ 0x68
 8004534:	e002      	b.n	800453c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4a20      	ldr	r2, [pc, #128]	@ (80045bc <UART_Start_Receive_IT+0x188>)
 800453a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d019      	beq.n	8004578 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004562:	637b      	str	r3, [r7, #52]	@ 0x34
 8004564:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004568:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e6      	bne.n	8004544 <UART_Start_Receive_IT+0x110>
 8004576:	e018      	b.n	80045aa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	613b      	str	r3, [r7, #16]
   return(result);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f043 0320 	orr.w	r3, r3, #32
 800458c:	653b      	str	r3, [r7, #80]	@ 0x50
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004596:	623b      	str	r3, [r7, #32]
 8004598:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	69f9      	ldr	r1, [r7, #28]
 800459c:	6a3a      	ldr	r2, [r7, #32]
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e6      	bne.n	8004578 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	375c      	adds	r7, #92	@ 0x5c
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	08004a3d 	.word	0x08004a3d
 80045bc:	08004881 	.word	0x08004881

080045c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b095      	sub	sp, #84	@ 0x54
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80045e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e6      	bne.n	80045c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3308      	adds	r3, #8
 8004600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	61fb      	str	r3, [r7, #28]
   return(result);
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3308      	adds	r3, #8
 8004618:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800461a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800461c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004620:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e5      	bne.n	80045fa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004632:	2b01      	cmp	r3, #1
 8004634:	d118      	bne.n	8004668 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	60bb      	str	r3, [r7, #8]
   return(result);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f023 0310 	bic.w	r3, r3, #16
 800464a:	647b      	str	r3, [r7, #68]	@ 0x44
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6979      	ldr	r1, [r7, #20]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	613b      	str	r3, [r7, #16]
   return(result);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e6      	bne.n	8004636 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800467c:	bf00      	nop
 800467e:	3754      	adds	r7, #84	@ 0x54
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7ff fa3e 	bl	8003b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b08f      	sub	sp, #60	@ 0x3c
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046c0:	2b21      	cmp	r3, #33	@ 0x21
 80046c2:	d14c      	bne.n	800475e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d132      	bne.n	8004736 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046f0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e6      	bne.n	80046d0 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004716:	633b      	str	r3, [r7, #48]	@ 0x30
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6979      	ldr	r1, [r7, #20]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	613b      	str	r3, [r7, #16]
   return(result);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e6      	bne.n	8004702 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004734:	e013      	b.n	800475e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800473a:	781a      	ldrb	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800475e:	bf00      	nop
 8004760:	373c      	adds	r7, #60	@ 0x3c
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800476a:	b480      	push	{r7}
 800476c:	b091      	sub	sp, #68	@ 0x44
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004776:	2b21      	cmp	r3, #33	@ 0x21
 8004778:	d151      	bne.n	800481e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d132      	bne.n	80047ec <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	623b      	str	r3, [r7, #32]
   return(result);
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800479a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e6      	bne.n	8004786 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	69b9      	ldr	r1, [r7, #24]
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	617b      	str	r3, [r7, #20]
   return(result);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e6      	bne.n	80047b8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80047ea:	e018      	b.n	800481e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80047f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f4:	881a      	ldrh	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047fe:	b292      	uxth	r2, r2
 8004800:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004806:	1c9a      	adds	r2, r3, #2
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800481e:	bf00      	nop
 8004820:	3744      	adds	r7, #68	@ 0x44
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b088      	sub	sp, #32
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6979      	ldr	r1, [r7, #20]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	613b      	str	r3, [r7, #16]
   return(result);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e6      	bne.n	8004832 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff f94f 	bl	8003b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004876:	bf00      	nop
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b09c      	sub	sp, #112	@ 0x70
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800488e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004898:	2b22      	cmp	r3, #34	@ 0x22
 800489a:	f040 80be 	bne.w	8004a1a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80048a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80048ac:	b2d9      	uxtb	r1, r3
 80048ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b8:	400a      	ands	r2, r1
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 80a3 	bne.w	8004a2e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004906:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004908:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800490c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e6      	bne.n	80048e8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3308      	adds	r3, #8
 8004920:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800492a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	667b      	str	r3, [r7, #100]	@ 0x64
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3308      	adds	r3, #8
 8004938:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800493a:	647a      	str	r2, [r7, #68]	@ 0x44
 800493c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004940:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e5      	bne.n	800491a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a34      	ldr	r2, [pc, #208]	@ (8004a38 <UART_RxISR_8BIT+0x1b8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d01f      	beq.n	80049ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d018      	beq.n	80049ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	623b      	str	r3, [r7, #32]
   return(result);
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800498e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004998:	633b      	str	r3, [r7, #48]	@ 0x30
 800499a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800499e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e6      	bne.n	800497a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d12e      	bne.n	8004a12 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0310 	bic.w	r3, r3, #16
 80049ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	69b9      	ldr	r1, [r7, #24]
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	617b      	str	r3, [r7, #20]
   return(result);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e6      	bne.n	80049ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	2b10      	cmp	r3, #16
 80049f8:	d103      	bne.n	8004a02 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2210      	movs	r2, #16
 8004a00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff f896 	bl	8003b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a10:	e00d      	b.n	8004a2e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fc f8a2 	bl	8000b5c <HAL_UART_RxCpltCallback>
}
 8004a18:	e009      	b.n	8004a2e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	8b1b      	ldrh	r3, [r3, #24]
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0208 	orr.w	r2, r2, #8
 8004a2a:	b292      	uxth	r2, r2
 8004a2c:	831a      	strh	r2, [r3, #24]
}
 8004a2e:	bf00      	nop
 8004a30:	3770      	adds	r7, #112	@ 0x70
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40008000 	.word	0x40008000

08004a3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b09c      	sub	sp, #112	@ 0x70
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a54:	2b22      	cmp	r3, #34	@ 0x22
 8004a56:	f040 80be 	bne.w	8004bd6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a68:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004a6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a72:	4013      	ands	r3, r2
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7e:	1c9a      	adds	r2, r3, #2
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f040 80a3 	bne.w	8004bea <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ab8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ac2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ac4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ac8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e6      	bne.n	8004aa4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3308      	adds	r3, #8
 8004adc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae8:	f023 0301 	bic.w	r3, r3, #1
 8004aec:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3308      	adds	r3, #8
 8004af4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004af6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004afc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e5      	bne.n	8004ad6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a34      	ldr	r2, [pc, #208]	@ (8004bf4 <UART_RxISR_16BIT+0x1b8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d01f      	beq.n	8004b68 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d018      	beq.n	8004b68 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b56:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e6      	bne.n	8004b36 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d12e      	bne.n	8004bce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f023 0310 	bic.w	r3, r3, #16
 8004b8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6979      	ldr	r1, [r7, #20]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e6      	bne.n	8004b76 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d103      	bne.n	8004bbe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2210      	movs	r2, #16
 8004bbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fe ffb8 	bl	8003b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bcc:	e00d      	b.n	8004bea <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fb ffc4 	bl	8000b5c <HAL_UART_RxCpltCallback>
}
 8004bd4:	e009      	b.n	8004bea <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	8b1b      	ldrh	r3, [r3, #24]
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0208 	orr.w	r2, r2, #8
 8004be6:	b292      	uxth	r2, r2
 8004be8:	831a      	strh	r2, [r3, #24]
}
 8004bea:	bf00      	nop
 8004bec:	3770      	adds	r7, #112	@ 0x70
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40008000 	.word	0x40008000

08004bf8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <sniprintf>:
 8004c0c:	b40c      	push	{r2, r3}
 8004c0e:	b530      	push	{r4, r5, lr}
 8004c10:	4b18      	ldr	r3, [pc, #96]	@ (8004c74 <sniprintf+0x68>)
 8004c12:	1e0c      	subs	r4, r1, #0
 8004c14:	681d      	ldr	r5, [r3, #0]
 8004c16:	b09d      	sub	sp, #116	@ 0x74
 8004c18:	da08      	bge.n	8004c2c <sniprintf+0x20>
 8004c1a:	238b      	movs	r3, #139	@ 0x8b
 8004c1c:	602b      	str	r3, [r5, #0]
 8004c1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c22:	b01d      	add	sp, #116	@ 0x74
 8004c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c28:	b002      	add	sp, #8
 8004c2a:	4770      	bx	lr
 8004c2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004c3a:	bf14      	ite	ne
 8004c3c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004c40:	4623      	moveq	r3, r4
 8004c42:	9304      	str	r3, [sp, #16]
 8004c44:	9307      	str	r3, [sp, #28]
 8004c46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c4a:	9002      	str	r0, [sp, #8]
 8004c4c:	9006      	str	r0, [sp, #24]
 8004c4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c54:	ab21      	add	r3, sp, #132	@ 0x84
 8004c56:	a902      	add	r1, sp, #8
 8004c58:	4628      	mov	r0, r5
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	f000 f994 	bl	8004f88 <_svfiprintf_r>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	bfbc      	itt	lt
 8004c64:	238b      	movlt	r3, #139	@ 0x8b
 8004c66:	602b      	strlt	r3, [r5, #0]
 8004c68:	2c00      	cmp	r4, #0
 8004c6a:	d0da      	beq.n	8004c22 <sniprintf+0x16>
 8004c6c:	9b02      	ldr	r3, [sp, #8]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	e7d6      	b.n	8004c22 <sniprintf+0x16>
 8004c74:	2000000c 	.word	0x2000000c

08004c78 <memset>:
 8004c78:	4402      	add	r2, r0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d100      	bne.n	8004c82 <memset+0xa>
 8004c80:	4770      	bx	lr
 8004c82:	f803 1b01 	strb.w	r1, [r3], #1
 8004c86:	e7f9      	b.n	8004c7c <memset+0x4>

08004c88 <__errno>:
 8004c88:	4b01      	ldr	r3, [pc, #4]	@ (8004c90 <__errno+0x8>)
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	2000000c 	.word	0x2000000c

08004c94 <__libc_init_array>:
 8004c94:	b570      	push	{r4, r5, r6, lr}
 8004c96:	4d0d      	ldr	r5, [pc, #52]	@ (8004ccc <__libc_init_array+0x38>)
 8004c98:	4c0d      	ldr	r4, [pc, #52]	@ (8004cd0 <__libc_init_array+0x3c>)
 8004c9a:	1b64      	subs	r4, r4, r5
 8004c9c:	10a4      	asrs	r4, r4, #2
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	42a6      	cmp	r6, r4
 8004ca2:	d109      	bne.n	8004cb8 <__libc_init_array+0x24>
 8004ca4:	4d0b      	ldr	r5, [pc, #44]	@ (8004cd4 <__libc_init_array+0x40>)
 8004ca6:	4c0c      	ldr	r4, [pc, #48]	@ (8004cd8 <__libc_init_array+0x44>)
 8004ca8:	f000 fc64 	bl	8005574 <_init>
 8004cac:	1b64      	subs	r4, r4, r5
 8004cae:	10a4      	asrs	r4, r4, #2
 8004cb0:	2600      	movs	r6, #0
 8004cb2:	42a6      	cmp	r6, r4
 8004cb4:	d105      	bne.n	8004cc2 <__libc_init_array+0x2e>
 8004cb6:	bd70      	pop	{r4, r5, r6, pc}
 8004cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cbc:	4798      	blx	r3
 8004cbe:	3601      	adds	r6, #1
 8004cc0:	e7ee      	b.n	8004ca0 <__libc_init_array+0xc>
 8004cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc6:	4798      	blx	r3
 8004cc8:	3601      	adds	r6, #1
 8004cca:	e7f2      	b.n	8004cb2 <__libc_init_array+0x1e>
 8004ccc:	08005648 	.word	0x08005648
 8004cd0:	08005648 	.word	0x08005648
 8004cd4:	08005648 	.word	0x08005648
 8004cd8:	0800564c 	.word	0x0800564c

08004cdc <__retarget_lock_acquire_recursive>:
 8004cdc:	4770      	bx	lr

08004cde <__retarget_lock_release_recursive>:
 8004cde:	4770      	bx	lr

08004ce0 <_free_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	2900      	cmp	r1, #0
 8004ce6:	d041      	beq.n	8004d6c <_free_r+0x8c>
 8004ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cec:	1f0c      	subs	r4, r1, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bfb8      	it	lt
 8004cf2:	18e4      	addlt	r4, r4, r3
 8004cf4:	f000 f8e0 	bl	8004eb8 <__malloc_lock>
 8004cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d70 <_free_r+0x90>)
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	b933      	cbnz	r3, 8004d0c <_free_r+0x2c>
 8004cfe:	6063      	str	r3, [r4, #4]
 8004d00:	6014      	str	r4, [r2, #0]
 8004d02:	4628      	mov	r0, r5
 8004d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d08:	f000 b8dc 	b.w	8004ec4 <__malloc_unlock>
 8004d0c:	42a3      	cmp	r3, r4
 8004d0e:	d908      	bls.n	8004d22 <_free_r+0x42>
 8004d10:	6820      	ldr	r0, [r4, #0]
 8004d12:	1821      	adds	r1, r4, r0
 8004d14:	428b      	cmp	r3, r1
 8004d16:	bf01      	itttt	eq
 8004d18:	6819      	ldreq	r1, [r3, #0]
 8004d1a:	685b      	ldreq	r3, [r3, #4]
 8004d1c:	1809      	addeq	r1, r1, r0
 8004d1e:	6021      	streq	r1, [r4, #0]
 8004d20:	e7ed      	b.n	8004cfe <_free_r+0x1e>
 8004d22:	461a      	mov	r2, r3
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b10b      	cbz	r3, 8004d2c <_free_r+0x4c>
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	d9fa      	bls.n	8004d22 <_free_r+0x42>
 8004d2c:	6811      	ldr	r1, [r2, #0]
 8004d2e:	1850      	adds	r0, r2, r1
 8004d30:	42a0      	cmp	r0, r4
 8004d32:	d10b      	bne.n	8004d4c <_free_r+0x6c>
 8004d34:	6820      	ldr	r0, [r4, #0]
 8004d36:	4401      	add	r1, r0
 8004d38:	1850      	adds	r0, r2, r1
 8004d3a:	4283      	cmp	r3, r0
 8004d3c:	6011      	str	r1, [r2, #0]
 8004d3e:	d1e0      	bne.n	8004d02 <_free_r+0x22>
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	6053      	str	r3, [r2, #4]
 8004d46:	4408      	add	r0, r1
 8004d48:	6010      	str	r0, [r2, #0]
 8004d4a:	e7da      	b.n	8004d02 <_free_r+0x22>
 8004d4c:	d902      	bls.n	8004d54 <_free_r+0x74>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	602b      	str	r3, [r5, #0]
 8004d52:	e7d6      	b.n	8004d02 <_free_r+0x22>
 8004d54:	6820      	ldr	r0, [r4, #0]
 8004d56:	1821      	adds	r1, r4, r0
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	bf04      	itt	eq
 8004d5c:	6819      	ldreq	r1, [r3, #0]
 8004d5e:	685b      	ldreq	r3, [r3, #4]
 8004d60:	6063      	str	r3, [r4, #4]
 8004d62:	bf04      	itt	eq
 8004d64:	1809      	addeq	r1, r1, r0
 8004d66:	6021      	streq	r1, [r4, #0]
 8004d68:	6054      	str	r4, [r2, #4]
 8004d6a:	e7ca      	b.n	8004d02 <_free_r+0x22>
 8004d6c:	bd38      	pop	{r3, r4, r5, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000510 	.word	0x20000510

08004d74 <sbrk_aligned>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	4e0f      	ldr	r6, [pc, #60]	@ (8004db4 <sbrk_aligned+0x40>)
 8004d78:	460c      	mov	r4, r1
 8004d7a:	6831      	ldr	r1, [r6, #0]
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	b911      	cbnz	r1, 8004d86 <sbrk_aligned+0x12>
 8004d80:	f000 fba4 	bl	80054cc <_sbrk_r>
 8004d84:	6030      	str	r0, [r6, #0]
 8004d86:	4621      	mov	r1, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 fb9f 	bl	80054cc <_sbrk_r>
 8004d8e:	1c43      	adds	r3, r0, #1
 8004d90:	d103      	bne.n	8004d9a <sbrk_aligned+0x26>
 8004d92:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004d96:	4620      	mov	r0, r4
 8004d98:	bd70      	pop	{r4, r5, r6, pc}
 8004d9a:	1cc4      	adds	r4, r0, #3
 8004d9c:	f024 0403 	bic.w	r4, r4, #3
 8004da0:	42a0      	cmp	r0, r4
 8004da2:	d0f8      	beq.n	8004d96 <sbrk_aligned+0x22>
 8004da4:	1a21      	subs	r1, r4, r0
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 fb90 	bl	80054cc <_sbrk_r>
 8004dac:	3001      	adds	r0, #1
 8004dae:	d1f2      	bne.n	8004d96 <sbrk_aligned+0x22>
 8004db0:	e7ef      	b.n	8004d92 <sbrk_aligned+0x1e>
 8004db2:	bf00      	nop
 8004db4:	2000050c 	.word	0x2000050c

08004db8 <_malloc_r>:
 8004db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dbc:	1ccd      	adds	r5, r1, #3
 8004dbe:	f025 0503 	bic.w	r5, r5, #3
 8004dc2:	3508      	adds	r5, #8
 8004dc4:	2d0c      	cmp	r5, #12
 8004dc6:	bf38      	it	cc
 8004dc8:	250c      	movcc	r5, #12
 8004dca:	2d00      	cmp	r5, #0
 8004dcc:	4606      	mov	r6, r0
 8004dce:	db01      	blt.n	8004dd4 <_malloc_r+0x1c>
 8004dd0:	42a9      	cmp	r1, r5
 8004dd2:	d904      	bls.n	8004dde <_malloc_r+0x26>
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	6033      	str	r3, [r6, #0]
 8004dd8:	2000      	movs	r0, #0
 8004dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004eb4 <_malloc_r+0xfc>
 8004de2:	f000 f869 	bl	8004eb8 <__malloc_lock>
 8004de6:	f8d8 3000 	ldr.w	r3, [r8]
 8004dea:	461c      	mov	r4, r3
 8004dec:	bb44      	cbnz	r4, 8004e40 <_malloc_r+0x88>
 8004dee:	4629      	mov	r1, r5
 8004df0:	4630      	mov	r0, r6
 8004df2:	f7ff ffbf 	bl	8004d74 <sbrk_aligned>
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	4604      	mov	r4, r0
 8004dfa:	d158      	bne.n	8004eae <_malloc_r+0xf6>
 8004dfc:	f8d8 4000 	ldr.w	r4, [r8]
 8004e00:	4627      	mov	r7, r4
 8004e02:	2f00      	cmp	r7, #0
 8004e04:	d143      	bne.n	8004e8e <_malloc_r+0xd6>
 8004e06:	2c00      	cmp	r4, #0
 8004e08:	d04b      	beq.n	8004ea2 <_malloc_r+0xea>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	4630      	mov	r0, r6
 8004e10:	eb04 0903 	add.w	r9, r4, r3
 8004e14:	f000 fb5a 	bl	80054cc <_sbrk_r>
 8004e18:	4581      	cmp	r9, r0
 8004e1a:	d142      	bne.n	8004ea2 <_malloc_r+0xea>
 8004e1c:	6821      	ldr	r1, [r4, #0]
 8004e1e:	1a6d      	subs	r5, r5, r1
 8004e20:	4629      	mov	r1, r5
 8004e22:	4630      	mov	r0, r6
 8004e24:	f7ff ffa6 	bl	8004d74 <sbrk_aligned>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d03a      	beq.n	8004ea2 <_malloc_r+0xea>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	442b      	add	r3, r5
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	f8d8 3000 	ldr.w	r3, [r8]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	bb62      	cbnz	r2, 8004e94 <_malloc_r+0xdc>
 8004e3a:	f8c8 7000 	str.w	r7, [r8]
 8004e3e:	e00f      	b.n	8004e60 <_malloc_r+0xa8>
 8004e40:	6822      	ldr	r2, [r4, #0]
 8004e42:	1b52      	subs	r2, r2, r5
 8004e44:	d420      	bmi.n	8004e88 <_malloc_r+0xd0>
 8004e46:	2a0b      	cmp	r2, #11
 8004e48:	d917      	bls.n	8004e7a <_malloc_r+0xc2>
 8004e4a:	1961      	adds	r1, r4, r5
 8004e4c:	42a3      	cmp	r3, r4
 8004e4e:	6025      	str	r5, [r4, #0]
 8004e50:	bf18      	it	ne
 8004e52:	6059      	strne	r1, [r3, #4]
 8004e54:	6863      	ldr	r3, [r4, #4]
 8004e56:	bf08      	it	eq
 8004e58:	f8c8 1000 	streq.w	r1, [r8]
 8004e5c:	5162      	str	r2, [r4, r5]
 8004e5e:	604b      	str	r3, [r1, #4]
 8004e60:	4630      	mov	r0, r6
 8004e62:	f000 f82f 	bl	8004ec4 <__malloc_unlock>
 8004e66:	f104 000b 	add.w	r0, r4, #11
 8004e6a:	1d23      	adds	r3, r4, #4
 8004e6c:	f020 0007 	bic.w	r0, r0, #7
 8004e70:	1ac2      	subs	r2, r0, r3
 8004e72:	bf1c      	itt	ne
 8004e74:	1a1b      	subne	r3, r3, r0
 8004e76:	50a3      	strne	r3, [r4, r2]
 8004e78:	e7af      	b.n	8004dda <_malloc_r+0x22>
 8004e7a:	6862      	ldr	r2, [r4, #4]
 8004e7c:	42a3      	cmp	r3, r4
 8004e7e:	bf0c      	ite	eq
 8004e80:	f8c8 2000 	streq.w	r2, [r8]
 8004e84:	605a      	strne	r2, [r3, #4]
 8004e86:	e7eb      	b.n	8004e60 <_malloc_r+0xa8>
 8004e88:	4623      	mov	r3, r4
 8004e8a:	6864      	ldr	r4, [r4, #4]
 8004e8c:	e7ae      	b.n	8004dec <_malloc_r+0x34>
 8004e8e:	463c      	mov	r4, r7
 8004e90:	687f      	ldr	r7, [r7, #4]
 8004e92:	e7b6      	b.n	8004e02 <_malloc_r+0x4a>
 8004e94:	461a      	mov	r2, r3
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	d1fb      	bne.n	8004e94 <_malloc_r+0xdc>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6053      	str	r3, [r2, #4]
 8004ea0:	e7de      	b.n	8004e60 <_malloc_r+0xa8>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f000 f80c 	bl	8004ec4 <__malloc_unlock>
 8004eac:	e794      	b.n	8004dd8 <_malloc_r+0x20>
 8004eae:	6005      	str	r5, [r0, #0]
 8004eb0:	e7d6      	b.n	8004e60 <_malloc_r+0xa8>
 8004eb2:	bf00      	nop
 8004eb4:	20000510 	.word	0x20000510

08004eb8 <__malloc_lock>:
 8004eb8:	4801      	ldr	r0, [pc, #4]	@ (8004ec0 <__malloc_lock+0x8>)
 8004eba:	f7ff bf0f 	b.w	8004cdc <__retarget_lock_acquire_recursive>
 8004ebe:	bf00      	nop
 8004ec0:	20000508 	.word	0x20000508

08004ec4 <__malloc_unlock>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	@ (8004ecc <__malloc_unlock+0x8>)
 8004ec6:	f7ff bf0a 	b.w	8004cde <__retarget_lock_release_recursive>
 8004eca:	bf00      	nop
 8004ecc:	20000508 	.word	0x20000508

08004ed0 <__ssputs_r>:
 8004ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	688e      	ldr	r6, [r1, #8]
 8004ed6:	461f      	mov	r7, r3
 8004ed8:	42be      	cmp	r6, r7
 8004eda:	680b      	ldr	r3, [r1, #0]
 8004edc:	4682      	mov	sl, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	4690      	mov	r8, r2
 8004ee2:	d82d      	bhi.n	8004f40 <__ssputs_r+0x70>
 8004ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ee8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004eec:	d026      	beq.n	8004f3c <__ssputs_r+0x6c>
 8004eee:	6965      	ldr	r5, [r4, #20]
 8004ef0:	6909      	ldr	r1, [r1, #16]
 8004ef2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ef6:	eba3 0901 	sub.w	r9, r3, r1
 8004efa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004efe:	1c7b      	adds	r3, r7, #1
 8004f00:	444b      	add	r3, r9
 8004f02:	106d      	asrs	r5, r5, #1
 8004f04:	429d      	cmp	r5, r3
 8004f06:	bf38      	it	cc
 8004f08:	461d      	movcc	r5, r3
 8004f0a:	0553      	lsls	r3, r2, #21
 8004f0c:	d527      	bpl.n	8004f5e <__ssputs_r+0x8e>
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f7ff ff52 	bl	8004db8 <_malloc_r>
 8004f14:	4606      	mov	r6, r0
 8004f16:	b360      	cbz	r0, 8004f72 <__ssputs_r+0xa2>
 8004f18:	6921      	ldr	r1, [r4, #16]
 8004f1a:	464a      	mov	r2, r9
 8004f1c:	f000 fae6 	bl	80054ec <memcpy>
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f2a:	81a3      	strh	r3, [r4, #12]
 8004f2c:	6126      	str	r6, [r4, #16]
 8004f2e:	6165      	str	r5, [r4, #20]
 8004f30:	444e      	add	r6, r9
 8004f32:	eba5 0509 	sub.w	r5, r5, r9
 8004f36:	6026      	str	r6, [r4, #0]
 8004f38:	60a5      	str	r5, [r4, #8]
 8004f3a:	463e      	mov	r6, r7
 8004f3c:	42be      	cmp	r6, r7
 8004f3e:	d900      	bls.n	8004f42 <__ssputs_r+0x72>
 8004f40:	463e      	mov	r6, r7
 8004f42:	6820      	ldr	r0, [r4, #0]
 8004f44:	4632      	mov	r2, r6
 8004f46:	4641      	mov	r1, r8
 8004f48:	f000 faa6 	bl	8005498 <memmove>
 8004f4c:	68a3      	ldr	r3, [r4, #8]
 8004f4e:	1b9b      	subs	r3, r3, r6
 8004f50:	60a3      	str	r3, [r4, #8]
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	4433      	add	r3, r6
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	2000      	movs	r0, #0
 8004f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5e:	462a      	mov	r2, r5
 8004f60:	f000 fad2 	bl	8005508 <_realloc_r>
 8004f64:	4606      	mov	r6, r0
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d1e0      	bne.n	8004f2c <__ssputs_r+0x5c>
 8004f6a:	6921      	ldr	r1, [r4, #16]
 8004f6c:	4650      	mov	r0, sl
 8004f6e:	f7ff feb7 	bl	8004ce0 <_free_r>
 8004f72:	230c      	movs	r3, #12
 8004f74:	f8ca 3000 	str.w	r3, [sl]
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f7e:	81a3      	strh	r3, [r4, #12]
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f84:	e7e9      	b.n	8004f5a <__ssputs_r+0x8a>
	...

08004f88 <_svfiprintf_r>:
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	4698      	mov	r8, r3
 8004f8e:	898b      	ldrh	r3, [r1, #12]
 8004f90:	061b      	lsls	r3, r3, #24
 8004f92:	b09d      	sub	sp, #116	@ 0x74
 8004f94:	4607      	mov	r7, r0
 8004f96:	460d      	mov	r5, r1
 8004f98:	4614      	mov	r4, r2
 8004f9a:	d510      	bpl.n	8004fbe <_svfiprintf_r+0x36>
 8004f9c:	690b      	ldr	r3, [r1, #16]
 8004f9e:	b973      	cbnz	r3, 8004fbe <_svfiprintf_r+0x36>
 8004fa0:	2140      	movs	r1, #64	@ 0x40
 8004fa2:	f7ff ff09 	bl	8004db8 <_malloc_r>
 8004fa6:	6028      	str	r0, [r5, #0]
 8004fa8:	6128      	str	r0, [r5, #16]
 8004faa:	b930      	cbnz	r0, 8004fba <_svfiprintf_r+0x32>
 8004fac:	230c      	movs	r3, #12
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fb4:	b01d      	add	sp, #116	@ 0x74
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fba:	2340      	movs	r3, #64	@ 0x40
 8004fbc:	616b      	str	r3, [r5, #20]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fc2:	2320      	movs	r3, #32
 8004fc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004fc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fcc:	2330      	movs	r3, #48	@ 0x30
 8004fce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800516c <_svfiprintf_r+0x1e4>
 8004fd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004fd6:	f04f 0901 	mov.w	r9, #1
 8004fda:	4623      	mov	r3, r4
 8004fdc:	469a      	mov	sl, r3
 8004fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fe2:	b10a      	cbz	r2, 8004fe8 <_svfiprintf_r+0x60>
 8004fe4:	2a25      	cmp	r2, #37	@ 0x25
 8004fe6:	d1f9      	bne.n	8004fdc <_svfiprintf_r+0x54>
 8004fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8004fec:	d00b      	beq.n	8005006 <_svfiprintf_r+0x7e>
 8004fee:	465b      	mov	r3, fp
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	f7ff ff6b 	bl	8004ed0 <__ssputs_r>
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	f000 80a7 	beq.w	800514e <_svfiprintf_r+0x1c6>
 8005000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005002:	445a      	add	r2, fp
 8005004:	9209      	str	r2, [sp, #36]	@ 0x24
 8005006:	f89a 3000 	ldrb.w	r3, [sl]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 809f 	beq.w	800514e <_svfiprintf_r+0x1c6>
 8005010:	2300      	movs	r3, #0
 8005012:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800501a:	f10a 0a01 	add.w	sl, sl, #1
 800501e:	9304      	str	r3, [sp, #16]
 8005020:	9307      	str	r3, [sp, #28]
 8005022:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005026:	931a      	str	r3, [sp, #104]	@ 0x68
 8005028:	4654      	mov	r4, sl
 800502a:	2205      	movs	r2, #5
 800502c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005030:	484e      	ldr	r0, [pc, #312]	@ (800516c <_svfiprintf_r+0x1e4>)
 8005032:	f7fb f8d5 	bl	80001e0 <memchr>
 8005036:	9a04      	ldr	r2, [sp, #16]
 8005038:	b9d8      	cbnz	r0, 8005072 <_svfiprintf_r+0xea>
 800503a:	06d0      	lsls	r0, r2, #27
 800503c:	bf44      	itt	mi
 800503e:	2320      	movmi	r3, #32
 8005040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005044:	0711      	lsls	r1, r2, #28
 8005046:	bf44      	itt	mi
 8005048:	232b      	movmi	r3, #43	@ 0x2b
 800504a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800504e:	f89a 3000 	ldrb.w	r3, [sl]
 8005052:	2b2a      	cmp	r3, #42	@ 0x2a
 8005054:	d015      	beq.n	8005082 <_svfiprintf_r+0xfa>
 8005056:	9a07      	ldr	r2, [sp, #28]
 8005058:	4654      	mov	r4, sl
 800505a:	2000      	movs	r0, #0
 800505c:	f04f 0c0a 	mov.w	ip, #10
 8005060:	4621      	mov	r1, r4
 8005062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005066:	3b30      	subs	r3, #48	@ 0x30
 8005068:	2b09      	cmp	r3, #9
 800506a:	d94b      	bls.n	8005104 <_svfiprintf_r+0x17c>
 800506c:	b1b0      	cbz	r0, 800509c <_svfiprintf_r+0x114>
 800506e:	9207      	str	r2, [sp, #28]
 8005070:	e014      	b.n	800509c <_svfiprintf_r+0x114>
 8005072:	eba0 0308 	sub.w	r3, r0, r8
 8005076:	fa09 f303 	lsl.w	r3, r9, r3
 800507a:	4313      	orrs	r3, r2
 800507c:	9304      	str	r3, [sp, #16]
 800507e:	46a2      	mov	sl, r4
 8005080:	e7d2      	b.n	8005028 <_svfiprintf_r+0xa0>
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	1d19      	adds	r1, r3, #4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	9103      	str	r1, [sp, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	bfbb      	ittet	lt
 800508e:	425b      	neglt	r3, r3
 8005090:	f042 0202 	orrlt.w	r2, r2, #2
 8005094:	9307      	strge	r3, [sp, #28]
 8005096:	9307      	strlt	r3, [sp, #28]
 8005098:	bfb8      	it	lt
 800509a:	9204      	strlt	r2, [sp, #16]
 800509c:	7823      	ldrb	r3, [r4, #0]
 800509e:	2b2e      	cmp	r3, #46	@ 0x2e
 80050a0:	d10a      	bne.n	80050b8 <_svfiprintf_r+0x130>
 80050a2:	7863      	ldrb	r3, [r4, #1]
 80050a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050a6:	d132      	bne.n	800510e <_svfiprintf_r+0x186>
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	1d1a      	adds	r2, r3, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	9203      	str	r2, [sp, #12]
 80050b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050b4:	3402      	adds	r4, #2
 80050b6:	9305      	str	r3, [sp, #20]
 80050b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800517c <_svfiprintf_r+0x1f4>
 80050bc:	7821      	ldrb	r1, [r4, #0]
 80050be:	2203      	movs	r2, #3
 80050c0:	4650      	mov	r0, sl
 80050c2:	f7fb f88d 	bl	80001e0 <memchr>
 80050c6:	b138      	cbz	r0, 80050d8 <_svfiprintf_r+0x150>
 80050c8:	9b04      	ldr	r3, [sp, #16]
 80050ca:	eba0 000a 	sub.w	r0, r0, sl
 80050ce:	2240      	movs	r2, #64	@ 0x40
 80050d0:	4082      	lsls	r2, r0
 80050d2:	4313      	orrs	r3, r2
 80050d4:	3401      	adds	r4, #1
 80050d6:	9304      	str	r3, [sp, #16]
 80050d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050dc:	4824      	ldr	r0, [pc, #144]	@ (8005170 <_svfiprintf_r+0x1e8>)
 80050de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80050e2:	2206      	movs	r2, #6
 80050e4:	f7fb f87c 	bl	80001e0 <memchr>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d036      	beq.n	800515a <_svfiprintf_r+0x1d2>
 80050ec:	4b21      	ldr	r3, [pc, #132]	@ (8005174 <_svfiprintf_r+0x1ec>)
 80050ee:	bb1b      	cbnz	r3, 8005138 <_svfiprintf_r+0x1b0>
 80050f0:	9b03      	ldr	r3, [sp, #12]
 80050f2:	3307      	adds	r3, #7
 80050f4:	f023 0307 	bic.w	r3, r3, #7
 80050f8:	3308      	adds	r3, #8
 80050fa:	9303      	str	r3, [sp, #12]
 80050fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050fe:	4433      	add	r3, r6
 8005100:	9309      	str	r3, [sp, #36]	@ 0x24
 8005102:	e76a      	b.n	8004fda <_svfiprintf_r+0x52>
 8005104:	fb0c 3202 	mla	r2, ip, r2, r3
 8005108:	460c      	mov	r4, r1
 800510a:	2001      	movs	r0, #1
 800510c:	e7a8      	b.n	8005060 <_svfiprintf_r+0xd8>
 800510e:	2300      	movs	r3, #0
 8005110:	3401      	adds	r4, #1
 8005112:	9305      	str	r3, [sp, #20]
 8005114:	4619      	mov	r1, r3
 8005116:	f04f 0c0a 	mov.w	ip, #10
 800511a:	4620      	mov	r0, r4
 800511c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005120:	3a30      	subs	r2, #48	@ 0x30
 8005122:	2a09      	cmp	r2, #9
 8005124:	d903      	bls.n	800512e <_svfiprintf_r+0x1a6>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0c6      	beq.n	80050b8 <_svfiprintf_r+0x130>
 800512a:	9105      	str	r1, [sp, #20]
 800512c:	e7c4      	b.n	80050b8 <_svfiprintf_r+0x130>
 800512e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005132:	4604      	mov	r4, r0
 8005134:	2301      	movs	r3, #1
 8005136:	e7f0      	b.n	800511a <_svfiprintf_r+0x192>
 8005138:	ab03      	add	r3, sp, #12
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	462a      	mov	r2, r5
 800513e:	4b0e      	ldr	r3, [pc, #56]	@ (8005178 <_svfiprintf_r+0x1f0>)
 8005140:	a904      	add	r1, sp, #16
 8005142:	4638      	mov	r0, r7
 8005144:	f3af 8000 	nop.w
 8005148:	1c42      	adds	r2, r0, #1
 800514a:	4606      	mov	r6, r0
 800514c:	d1d6      	bne.n	80050fc <_svfiprintf_r+0x174>
 800514e:	89ab      	ldrh	r3, [r5, #12]
 8005150:	065b      	lsls	r3, r3, #25
 8005152:	f53f af2d 	bmi.w	8004fb0 <_svfiprintf_r+0x28>
 8005156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005158:	e72c      	b.n	8004fb4 <_svfiprintf_r+0x2c>
 800515a:	ab03      	add	r3, sp, #12
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	462a      	mov	r2, r5
 8005160:	4b05      	ldr	r3, [pc, #20]	@ (8005178 <_svfiprintf_r+0x1f0>)
 8005162:	a904      	add	r1, sp, #16
 8005164:	4638      	mov	r0, r7
 8005166:	f000 f879 	bl	800525c <_printf_i>
 800516a:	e7ed      	b.n	8005148 <_svfiprintf_r+0x1c0>
 800516c:	0800560c 	.word	0x0800560c
 8005170:	08005616 	.word	0x08005616
 8005174:	00000000 	.word	0x00000000
 8005178:	08004ed1 	.word	0x08004ed1
 800517c:	08005612 	.word	0x08005612

08005180 <_printf_common>:
 8005180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005184:	4616      	mov	r6, r2
 8005186:	4698      	mov	r8, r3
 8005188:	688a      	ldr	r2, [r1, #8]
 800518a:	690b      	ldr	r3, [r1, #16]
 800518c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005190:	4293      	cmp	r3, r2
 8005192:	bfb8      	it	lt
 8005194:	4613      	movlt	r3, r2
 8005196:	6033      	str	r3, [r6, #0]
 8005198:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800519c:	4607      	mov	r7, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	b10a      	cbz	r2, 80051a6 <_printf_common+0x26>
 80051a2:	3301      	adds	r3, #1
 80051a4:	6033      	str	r3, [r6, #0]
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	0699      	lsls	r1, r3, #26
 80051aa:	bf42      	ittt	mi
 80051ac:	6833      	ldrmi	r3, [r6, #0]
 80051ae:	3302      	addmi	r3, #2
 80051b0:	6033      	strmi	r3, [r6, #0]
 80051b2:	6825      	ldr	r5, [r4, #0]
 80051b4:	f015 0506 	ands.w	r5, r5, #6
 80051b8:	d106      	bne.n	80051c8 <_printf_common+0x48>
 80051ba:	f104 0a19 	add.w	sl, r4, #25
 80051be:	68e3      	ldr	r3, [r4, #12]
 80051c0:	6832      	ldr	r2, [r6, #0]
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	42ab      	cmp	r3, r5
 80051c6:	dc26      	bgt.n	8005216 <_printf_common+0x96>
 80051c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	3b00      	subs	r3, #0
 80051d0:	bf18      	it	ne
 80051d2:	2301      	movne	r3, #1
 80051d4:	0692      	lsls	r2, r2, #26
 80051d6:	d42b      	bmi.n	8005230 <_printf_common+0xb0>
 80051d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051dc:	4641      	mov	r1, r8
 80051de:	4638      	mov	r0, r7
 80051e0:	47c8      	blx	r9
 80051e2:	3001      	adds	r0, #1
 80051e4:	d01e      	beq.n	8005224 <_printf_common+0xa4>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	6922      	ldr	r2, [r4, #16]
 80051ea:	f003 0306 	and.w	r3, r3, #6
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	bf02      	ittt	eq
 80051f2:	68e5      	ldreq	r5, [r4, #12]
 80051f4:	6833      	ldreq	r3, [r6, #0]
 80051f6:	1aed      	subeq	r5, r5, r3
 80051f8:	68a3      	ldr	r3, [r4, #8]
 80051fa:	bf0c      	ite	eq
 80051fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005200:	2500      	movne	r5, #0
 8005202:	4293      	cmp	r3, r2
 8005204:	bfc4      	itt	gt
 8005206:	1a9b      	subgt	r3, r3, r2
 8005208:	18ed      	addgt	r5, r5, r3
 800520a:	2600      	movs	r6, #0
 800520c:	341a      	adds	r4, #26
 800520e:	42b5      	cmp	r5, r6
 8005210:	d11a      	bne.n	8005248 <_printf_common+0xc8>
 8005212:	2000      	movs	r0, #0
 8005214:	e008      	b.n	8005228 <_printf_common+0xa8>
 8005216:	2301      	movs	r3, #1
 8005218:	4652      	mov	r2, sl
 800521a:	4641      	mov	r1, r8
 800521c:	4638      	mov	r0, r7
 800521e:	47c8      	blx	r9
 8005220:	3001      	adds	r0, #1
 8005222:	d103      	bne.n	800522c <_printf_common+0xac>
 8005224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522c:	3501      	adds	r5, #1
 800522e:	e7c6      	b.n	80051be <_printf_common+0x3e>
 8005230:	18e1      	adds	r1, r4, r3
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	2030      	movs	r0, #48	@ 0x30
 8005236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800523a:	4422      	add	r2, r4
 800523c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005244:	3302      	adds	r3, #2
 8005246:	e7c7      	b.n	80051d8 <_printf_common+0x58>
 8005248:	2301      	movs	r3, #1
 800524a:	4622      	mov	r2, r4
 800524c:	4641      	mov	r1, r8
 800524e:	4638      	mov	r0, r7
 8005250:	47c8      	blx	r9
 8005252:	3001      	adds	r0, #1
 8005254:	d0e6      	beq.n	8005224 <_printf_common+0xa4>
 8005256:	3601      	adds	r6, #1
 8005258:	e7d9      	b.n	800520e <_printf_common+0x8e>
	...

0800525c <_printf_i>:
 800525c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005260:	7e0f      	ldrb	r7, [r1, #24]
 8005262:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005264:	2f78      	cmp	r7, #120	@ 0x78
 8005266:	4691      	mov	r9, r2
 8005268:	4680      	mov	r8, r0
 800526a:	460c      	mov	r4, r1
 800526c:	469a      	mov	sl, r3
 800526e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005272:	d807      	bhi.n	8005284 <_printf_i+0x28>
 8005274:	2f62      	cmp	r7, #98	@ 0x62
 8005276:	d80a      	bhi.n	800528e <_printf_i+0x32>
 8005278:	2f00      	cmp	r7, #0
 800527a:	f000 80d1 	beq.w	8005420 <_printf_i+0x1c4>
 800527e:	2f58      	cmp	r7, #88	@ 0x58
 8005280:	f000 80b8 	beq.w	80053f4 <_printf_i+0x198>
 8005284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800528c:	e03a      	b.n	8005304 <_printf_i+0xa8>
 800528e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005292:	2b15      	cmp	r3, #21
 8005294:	d8f6      	bhi.n	8005284 <_printf_i+0x28>
 8005296:	a101      	add	r1, pc, #4	@ (adr r1, 800529c <_printf_i+0x40>)
 8005298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800529c:	080052f5 	.word	0x080052f5
 80052a0:	08005309 	.word	0x08005309
 80052a4:	08005285 	.word	0x08005285
 80052a8:	08005285 	.word	0x08005285
 80052ac:	08005285 	.word	0x08005285
 80052b0:	08005285 	.word	0x08005285
 80052b4:	08005309 	.word	0x08005309
 80052b8:	08005285 	.word	0x08005285
 80052bc:	08005285 	.word	0x08005285
 80052c0:	08005285 	.word	0x08005285
 80052c4:	08005285 	.word	0x08005285
 80052c8:	08005407 	.word	0x08005407
 80052cc:	08005333 	.word	0x08005333
 80052d0:	080053c1 	.word	0x080053c1
 80052d4:	08005285 	.word	0x08005285
 80052d8:	08005285 	.word	0x08005285
 80052dc:	08005429 	.word	0x08005429
 80052e0:	08005285 	.word	0x08005285
 80052e4:	08005333 	.word	0x08005333
 80052e8:	08005285 	.word	0x08005285
 80052ec:	08005285 	.word	0x08005285
 80052f0:	080053c9 	.word	0x080053c9
 80052f4:	6833      	ldr	r3, [r6, #0]
 80052f6:	1d1a      	adds	r2, r3, #4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6032      	str	r2, [r6, #0]
 80052fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005304:	2301      	movs	r3, #1
 8005306:	e09c      	b.n	8005442 <_printf_i+0x1e6>
 8005308:	6833      	ldr	r3, [r6, #0]
 800530a:	6820      	ldr	r0, [r4, #0]
 800530c:	1d19      	adds	r1, r3, #4
 800530e:	6031      	str	r1, [r6, #0]
 8005310:	0606      	lsls	r6, r0, #24
 8005312:	d501      	bpl.n	8005318 <_printf_i+0xbc>
 8005314:	681d      	ldr	r5, [r3, #0]
 8005316:	e003      	b.n	8005320 <_printf_i+0xc4>
 8005318:	0645      	lsls	r5, r0, #25
 800531a:	d5fb      	bpl.n	8005314 <_printf_i+0xb8>
 800531c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005320:	2d00      	cmp	r5, #0
 8005322:	da03      	bge.n	800532c <_printf_i+0xd0>
 8005324:	232d      	movs	r3, #45	@ 0x2d
 8005326:	426d      	negs	r5, r5
 8005328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800532c:	4858      	ldr	r0, [pc, #352]	@ (8005490 <_printf_i+0x234>)
 800532e:	230a      	movs	r3, #10
 8005330:	e011      	b.n	8005356 <_printf_i+0xfa>
 8005332:	6821      	ldr	r1, [r4, #0]
 8005334:	6833      	ldr	r3, [r6, #0]
 8005336:	0608      	lsls	r0, r1, #24
 8005338:	f853 5b04 	ldr.w	r5, [r3], #4
 800533c:	d402      	bmi.n	8005344 <_printf_i+0xe8>
 800533e:	0649      	lsls	r1, r1, #25
 8005340:	bf48      	it	mi
 8005342:	b2ad      	uxthmi	r5, r5
 8005344:	2f6f      	cmp	r7, #111	@ 0x6f
 8005346:	4852      	ldr	r0, [pc, #328]	@ (8005490 <_printf_i+0x234>)
 8005348:	6033      	str	r3, [r6, #0]
 800534a:	bf14      	ite	ne
 800534c:	230a      	movne	r3, #10
 800534e:	2308      	moveq	r3, #8
 8005350:	2100      	movs	r1, #0
 8005352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005356:	6866      	ldr	r6, [r4, #4]
 8005358:	60a6      	str	r6, [r4, #8]
 800535a:	2e00      	cmp	r6, #0
 800535c:	db05      	blt.n	800536a <_printf_i+0x10e>
 800535e:	6821      	ldr	r1, [r4, #0]
 8005360:	432e      	orrs	r6, r5
 8005362:	f021 0104 	bic.w	r1, r1, #4
 8005366:	6021      	str	r1, [r4, #0]
 8005368:	d04b      	beq.n	8005402 <_printf_i+0x1a6>
 800536a:	4616      	mov	r6, r2
 800536c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005370:	fb03 5711 	mls	r7, r3, r1, r5
 8005374:	5dc7      	ldrb	r7, [r0, r7]
 8005376:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800537a:	462f      	mov	r7, r5
 800537c:	42bb      	cmp	r3, r7
 800537e:	460d      	mov	r5, r1
 8005380:	d9f4      	bls.n	800536c <_printf_i+0x110>
 8005382:	2b08      	cmp	r3, #8
 8005384:	d10b      	bne.n	800539e <_printf_i+0x142>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	07df      	lsls	r7, r3, #31
 800538a:	d508      	bpl.n	800539e <_printf_i+0x142>
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	6861      	ldr	r1, [r4, #4]
 8005390:	4299      	cmp	r1, r3
 8005392:	bfde      	ittt	le
 8005394:	2330      	movle	r3, #48	@ 0x30
 8005396:	f806 3c01 	strble.w	r3, [r6, #-1]
 800539a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800539e:	1b92      	subs	r2, r2, r6
 80053a0:	6122      	str	r2, [r4, #16]
 80053a2:	f8cd a000 	str.w	sl, [sp]
 80053a6:	464b      	mov	r3, r9
 80053a8:	aa03      	add	r2, sp, #12
 80053aa:	4621      	mov	r1, r4
 80053ac:	4640      	mov	r0, r8
 80053ae:	f7ff fee7 	bl	8005180 <_printf_common>
 80053b2:	3001      	adds	r0, #1
 80053b4:	d14a      	bne.n	800544c <_printf_i+0x1f0>
 80053b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053ba:	b004      	add	sp, #16
 80053bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	f043 0320 	orr.w	r3, r3, #32
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	4832      	ldr	r0, [pc, #200]	@ (8005494 <_printf_i+0x238>)
 80053ca:	2778      	movs	r7, #120	@ 0x78
 80053cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	6831      	ldr	r1, [r6, #0]
 80053d4:	061f      	lsls	r7, r3, #24
 80053d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80053da:	d402      	bmi.n	80053e2 <_printf_i+0x186>
 80053dc:	065f      	lsls	r7, r3, #25
 80053de:	bf48      	it	mi
 80053e0:	b2ad      	uxthmi	r5, r5
 80053e2:	6031      	str	r1, [r6, #0]
 80053e4:	07d9      	lsls	r1, r3, #31
 80053e6:	bf44      	itt	mi
 80053e8:	f043 0320 	orrmi.w	r3, r3, #32
 80053ec:	6023      	strmi	r3, [r4, #0]
 80053ee:	b11d      	cbz	r5, 80053f8 <_printf_i+0x19c>
 80053f0:	2310      	movs	r3, #16
 80053f2:	e7ad      	b.n	8005350 <_printf_i+0xf4>
 80053f4:	4826      	ldr	r0, [pc, #152]	@ (8005490 <_printf_i+0x234>)
 80053f6:	e7e9      	b.n	80053cc <_printf_i+0x170>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	f023 0320 	bic.w	r3, r3, #32
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	e7f6      	b.n	80053f0 <_printf_i+0x194>
 8005402:	4616      	mov	r6, r2
 8005404:	e7bd      	b.n	8005382 <_printf_i+0x126>
 8005406:	6833      	ldr	r3, [r6, #0]
 8005408:	6825      	ldr	r5, [r4, #0]
 800540a:	6961      	ldr	r1, [r4, #20]
 800540c:	1d18      	adds	r0, r3, #4
 800540e:	6030      	str	r0, [r6, #0]
 8005410:	062e      	lsls	r6, r5, #24
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	d501      	bpl.n	800541a <_printf_i+0x1be>
 8005416:	6019      	str	r1, [r3, #0]
 8005418:	e002      	b.n	8005420 <_printf_i+0x1c4>
 800541a:	0668      	lsls	r0, r5, #25
 800541c:	d5fb      	bpl.n	8005416 <_printf_i+0x1ba>
 800541e:	8019      	strh	r1, [r3, #0]
 8005420:	2300      	movs	r3, #0
 8005422:	6123      	str	r3, [r4, #16]
 8005424:	4616      	mov	r6, r2
 8005426:	e7bc      	b.n	80053a2 <_printf_i+0x146>
 8005428:	6833      	ldr	r3, [r6, #0]
 800542a:	1d1a      	adds	r2, r3, #4
 800542c:	6032      	str	r2, [r6, #0]
 800542e:	681e      	ldr	r6, [r3, #0]
 8005430:	6862      	ldr	r2, [r4, #4]
 8005432:	2100      	movs	r1, #0
 8005434:	4630      	mov	r0, r6
 8005436:	f7fa fed3 	bl	80001e0 <memchr>
 800543a:	b108      	cbz	r0, 8005440 <_printf_i+0x1e4>
 800543c:	1b80      	subs	r0, r0, r6
 800543e:	6060      	str	r0, [r4, #4]
 8005440:	6863      	ldr	r3, [r4, #4]
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	2300      	movs	r3, #0
 8005446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800544a:	e7aa      	b.n	80053a2 <_printf_i+0x146>
 800544c:	6923      	ldr	r3, [r4, #16]
 800544e:	4632      	mov	r2, r6
 8005450:	4649      	mov	r1, r9
 8005452:	4640      	mov	r0, r8
 8005454:	47d0      	blx	sl
 8005456:	3001      	adds	r0, #1
 8005458:	d0ad      	beq.n	80053b6 <_printf_i+0x15a>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	079b      	lsls	r3, r3, #30
 800545e:	d413      	bmi.n	8005488 <_printf_i+0x22c>
 8005460:	68e0      	ldr	r0, [r4, #12]
 8005462:	9b03      	ldr	r3, [sp, #12]
 8005464:	4298      	cmp	r0, r3
 8005466:	bfb8      	it	lt
 8005468:	4618      	movlt	r0, r3
 800546a:	e7a6      	b.n	80053ba <_printf_i+0x15e>
 800546c:	2301      	movs	r3, #1
 800546e:	4632      	mov	r2, r6
 8005470:	4649      	mov	r1, r9
 8005472:	4640      	mov	r0, r8
 8005474:	47d0      	blx	sl
 8005476:	3001      	adds	r0, #1
 8005478:	d09d      	beq.n	80053b6 <_printf_i+0x15a>
 800547a:	3501      	adds	r5, #1
 800547c:	68e3      	ldr	r3, [r4, #12]
 800547e:	9903      	ldr	r1, [sp, #12]
 8005480:	1a5b      	subs	r3, r3, r1
 8005482:	42ab      	cmp	r3, r5
 8005484:	dcf2      	bgt.n	800546c <_printf_i+0x210>
 8005486:	e7eb      	b.n	8005460 <_printf_i+0x204>
 8005488:	2500      	movs	r5, #0
 800548a:	f104 0619 	add.w	r6, r4, #25
 800548e:	e7f5      	b.n	800547c <_printf_i+0x220>
 8005490:	0800561d 	.word	0x0800561d
 8005494:	0800562e 	.word	0x0800562e

08005498 <memmove>:
 8005498:	4288      	cmp	r0, r1
 800549a:	b510      	push	{r4, lr}
 800549c:	eb01 0402 	add.w	r4, r1, r2
 80054a0:	d902      	bls.n	80054a8 <memmove+0x10>
 80054a2:	4284      	cmp	r4, r0
 80054a4:	4623      	mov	r3, r4
 80054a6:	d807      	bhi.n	80054b8 <memmove+0x20>
 80054a8:	1e43      	subs	r3, r0, #1
 80054aa:	42a1      	cmp	r1, r4
 80054ac:	d008      	beq.n	80054c0 <memmove+0x28>
 80054ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054b6:	e7f8      	b.n	80054aa <memmove+0x12>
 80054b8:	4402      	add	r2, r0
 80054ba:	4601      	mov	r1, r0
 80054bc:	428a      	cmp	r2, r1
 80054be:	d100      	bne.n	80054c2 <memmove+0x2a>
 80054c0:	bd10      	pop	{r4, pc}
 80054c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054ca:	e7f7      	b.n	80054bc <memmove+0x24>

080054cc <_sbrk_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d06      	ldr	r5, [pc, #24]	@ (80054e8 <_sbrk_r+0x1c>)
 80054d0:	2300      	movs	r3, #0
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	f7fb fdb4 	bl	8001044 <_sbrk>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_sbrk_r+0x1a>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_sbrk_r+0x1a>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	20000504 	.word	0x20000504

080054ec <memcpy>:
 80054ec:	440a      	add	r2, r1
 80054ee:	4291      	cmp	r1, r2
 80054f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80054f4:	d100      	bne.n	80054f8 <memcpy+0xc>
 80054f6:	4770      	bx	lr
 80054f8:	b510      	push	{r4, lr}
 80054fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005502:	4291      	cmp	r1, r2
 8005504:	d1f9      	bne.n	80054fa <memcpy+0xe>
 8005506:	bd10      	pop	{r4, pc}

08005508 <_realloc_r>:
 8005508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550c:	4607      	mov	r7, r0
 800550e:	4614      	mov	r4, r2
 8005510:	460d      	mov	r5, r1
 8005512:	b921      	cbnz	r1, 800551e <_realloc_r+0x16>
 8005514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005518:	4611      	mov	r1, r2
 800551a:	f7ff bc4d 	b.w	8004db8 <_malloc_r>
 800551e:	b92a      	cbnz	r2, 800552c <_realloc_r+0x24>
 8005520:	f7ff fbde 	bl	8004ce0 <_free_r>
 8005524:	4625      	mov	r5, r4
 8005526:	4628      	mov	r0, r5
 8005528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800552c:	f000 f81a 	bl	8005564 <_malloc_usable_size_r>
 8005530:	4284      	cmp	r4, r0
 8005532:	4606      	mov	r6, r0
 8005534:	d802      	bhi.n	800553c <_realloc_r+0x34>
 8005536:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800553a:	d8f4      	bhi.n	8005526 <_realloc_r+0x1e>
 800553c:	4621      	mov	r1, r4
 800553e:	4638      	mov	r0, r7
 8005540:	f7ff fc3a 	bl	8004db8 <_malloc_r>
 8005544:	4680      	mov	r8, r0
 8005546:	b908      	cbnz	r0, 800554c <_realloc_r+0x44>
 8005548:	4645      	mov	r5, r8
 800554a:	e7ec      	b.n	8005526 <_realloc_r+0x1e>
 800554c:	42b4      	cmp	r4, r6
 800554e:	4622      	mov	r2, r4
 8005550:	4629      	mov	r1, r5
 8005552:	bf28      	it	cs
 8005554:	4632      	movcs	r2, r6
 8005556:	f7ff ffc9 	bl	80054ec <memcpy>
 800555a:	4629      	mov	r1, r5
 800555c:	4638      	mov	r0, r7
 800555e:	f7ff fbbf 	bl	8004ce0 <_free_r>
 8005562:	e7f1      	b.n	8005548 <_realloc_r+0x40>

08005564 <_malloc_usable_size_r>:
 8005564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005568:	1f18      	subs	r0, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	bfbc      	itt	lt
 800556e:	580b      	ldrlt	r3, [r1, r0]
 8005570:	18c0      	addlt	r0, r0, r3
 8005572:	4770      	bx	lr

08005574 <_init>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	bf00      	nop
 8005578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557a:	bc08      	pop	{r3}
 800557c:	469e      	mov	lr, r3
 800557e:	4770      	bx	lr

08005580 <_fini>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	bf00      	nop
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr
