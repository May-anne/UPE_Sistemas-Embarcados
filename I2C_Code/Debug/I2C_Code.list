
I2C_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000779c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800792c  0800792c  0000892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c2c  08007c2c  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c2c  08007c2c  00008c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c34  08007c34  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c34  08007c34  00008c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c38  08007c38  00008c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007c3c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000005c  08007c98  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08007c98  0000934c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcbd  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022eb  00000000  00000000  00018d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0001b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3d  00000000  00000000  0001bd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026735  00000000  00000000  0001c7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fce7  00000000  00000000  00042eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaeec  00000000  00000000  00052bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013daad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  0013daf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00141724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007914 	.word	0x08007914

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007914 	.word	0x08007914

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0a2      	sub	sp, #136	@ 0x88
 80005d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fdd7 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8f1 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f9f1 	bl	80009c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005de:	f000 f93f 	bl	8000860 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f9bd 	bl	8000960 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80005e6:	f000 f97b 	bl	80008e0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  UART_Print("Iniciando scanner I2C...\r\n");
 80005ea:	4860      	ldr	r0, [pc, #384]	@ (800076c <main+0x1a0>)
 80005ec:	f000 fad2 	bl	8000b94 <UART_Print>
  for (uint8_t addr = 1; addr < 128; addr++) {
 80005f0:	2301      	movs	r3, #1
 80005f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80005f6:	e01e      	b.n	8000636 <main+0x6a>
      if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 3, 10) == HAL_OK) {
 80005f8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	b299      	uxth	r1, r3
 8000602:	230a      	movs	r3, #10
 8000604:	2203      	movs	r2, #3
 8000606:	485a      	ldr	r0, [pc, #360]	@ (8000770 <main+0x1a4>)
 8000608:	f001 fcfc 	bl	8002004 <HAL_I2C_IsDeviceReady>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10c      	bne.n	800062c <main+0x60>
          char msg[64];
          snprintf(msg, sizeof(msg), "Dispositivo encontrado: 0x%02X\r\n", addr);
 8000612:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000616:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800061a:	4a56      	ldr	r2, [pc, #344]	@ (8000774 <main+0x1a8>)
 800061c:	2140      	movs	r1, #64	@ 0x40
 800061e:	f006 fcb3 	bl	8006f88 <sniprintf>
          UART_Print(msg);
 8000622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fab4 	bl	8000b94 <UART_Print>
  for (uint8_t addr = 1; addr < 128; addr++) {
 800062c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000630:	3301      	adds	r3, #1
 8000632:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8000636:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 800063a:	2b00      	cmp	r3, #0
 800063c:	dadc      	bge.n	80005f8 <main+0x2c>
      }
  }
  UART_Print("Scanner concluido.\r\n");
 800063e:	484e      	ldr	r0, [pc, #312]	@ (8000778 <main+0x1ac>)
 8000640:	f000 faa8 	bl	8000b94 <UART_Print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  UART_Print("UART Funcionando!\r\n");
 8000644:	484d      	ldr	r0, [pc, #308]	@ (800077c <main+0x1b0>)
 8000646:	f000 faa5 	bl	8000b94 <UART_Print>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_byte, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	494c      	ldr	r1, [pc, #304]	@ (8000780 <main+0x1b4>)
 800064e:	484d      	ldr	r0, [pc, #308]	@ (8000784 <main+0x1b8>)
 8000650:	f005 f900 	bl	8005854 <HAL_UART_Receive_IT>
  while (1)
  {
	  if (status) {
 8000654:	4b4c      	ldr	r3, [pc, #304]	@ (8000788 <main+0x1bc>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0fa      	beq.n	8000654 <main+0x88>
	 	status = 0;
 800065e:	4b4a      	ldr	r3, [pc, #296]	@ (8000788 <main+0x1bc>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
		char debug_msg[80];
		snprintf(debug_msg, sizeof(debug_msg), "Recebido: [%s]\r\n", rx_buffer);
 8000664:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000668:	4b48      	ldr	r3, [pc, #288]	@ (800078c <main+0x1c0>)
 800066a:	4a49      	ldr	r2, [pc, #292]	@ (8000790 <main+0x1c4>)
 800066c:	2150      	movs	r1, #80	@ 0x50
 800066e:	f006 fc8b 	bl	8006f88 <sniprintf>
		UART_Print(debug_msg);
 8000672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fa8c 	bl	8000b94 <UART_Print>

        if (strncmp(rx_buffer, "Set_DAC_", 8) == 0) {
 800067c:	2208      	movs	r2, #8
 800067e:	4945      	ldr	r1, [pc, #276]	@ (8000794 <main+0x1c8>)
 8000680:	4842      	ldr	r0, [pc, #264]	@ (800078c <main+0x1c0>)
 8000682:	f006 fcbf 	bl	8007004 <strncmp>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d118      	bne.n	80006be <main+0xf2>
            value = atoi(&rx_buffer[8]);
 800068c:	4842      	ldr	r0, [pc, #264]	@ (8000798 <main+0x1cc>)
 800068e:	f006 fbf3 	bl	8006e78 <atoi>
 8000692:	4603      	mov	r3, r0
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b41      	ldr	r3, [pc, #260]	@ (800079c <main+0x1d0>)
 8000698:	701a      	strb	r2, [r3, #0]

    		char debug_value[10];
    		snprintf(debug_value, sizeof(debug_value), "Valor: [%u]\r\n", value);
 800069a:	4b40      	ldr	r3, [pc, #256]	@ (800079c <main+0x1d0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80006a2:	4a3f      	ldr	r2, [pc, #252]	@ (80007a0 <main+0x1d4>)
 80006a4:	210a      	movs	r1, #10
 80006a6:	f006 fc6f 	bl	8006f88 <sniprintf>
    		UART_Print(debug_value);
 80006aa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fa70 	bl	8000b94 <UART_Print>

            if (value >= 0 && value <= 255) {
                PCF8591_SetDAC((uint8_t)value);
 80006b4:	4b39      	ldr	r3, [pc, #228]	@ (800079c <main+0x1d0>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 faf5 	bl	8000ca8 <PCF8591_SetDAC>
            } else {
                UART_Print("Valor fora do intervalo (0–255)\r\n");
            }
        }

		if (strcmp(rx_buffer, "Read_AIN0") == 0){
 80006be:	4939      	ldr	r1, [pc, #228]	@ (80007a4 <main+0x1d8>)
 80006c0:	4832      	ldr	r0, [pc, #200]	@ (800078c <main+0x1c0>)
 80006c2:	f7ff fd85 	bl	80001d0 <strcmp>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10c      	bne.n	80006e6 <main+0x11a>
			channel = 0;
 80006cc:	4b36      	ldr	r3, [pc, #216]	@ (80007a8 <main+0x1dc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
			value = PCF8591_ReadAnalog(channel);
 80006d2:	4b35      	ldr	r3, [pc, #212]	@ (80007a8 <main+0x1dc>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f9e0 	bl	8000a9c <PCF8591_ReadAnalog>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b2e      	ldr	r3, [pc, #184]	@ (800079c <main+0x1d0>)
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e030      	b.n	8000748 <main+0x17c>
		}
		else if (strcmp(rx_buffer, "Read_AIN1") == 0){
 80006e6:	4931      	ldr	r1, [pc, #196]	@ (80007ac <main+0x1e0>)
 80006e8:	4828      	ldr	r0, [pc, #160]	@ (800078c <main+0x1c0>)
 80006ea:	f7ff fd71 	bl	80001d0 <strcmp>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10c      	bne.n	800070e <main+0x142>
			channel = 1;
 80006f4:	4b2c      	ldr	r3, [pc, #176]	@ (80007a8 <main+0x1dc>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
			value = PCF8591_ReadAnalog(channel);
 80006fa:	4b2b      	ldr	r3, [pc, #172]	@ (80007a8 <main+0x1dc>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f9cc 	bl	8000a9c <PCF8591_ReadAnalog>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4b24      	ldr	r3, [pc, #144]	@ (800079c <main+0x1d0>)
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	e01c      	b.n	8000748 <main+0x17c>
		}
		else if (strcmp(rx_buffer, "Read_AIN3") == 0){
 800070e:	4928      	ldr	r1, [pc, #160]	@ (80007b0 <main+0x1e4>)
 8000710:	481e      	ldr	r0, [pc, #120]	@ (800078c <main+0x1c0>)
 8000712:	f7ff fd5d 	bl	80001d0 <strcmp>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d10c      	bne.n	8000736 <main+0x16a>
			channel = 3;
 800071c:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <main+0x1dc>)
 800071e:	2203      	movs	r2, #3
 8000720:	701a      	strb	r2, [r3, #0]
			value = PCF8591_ReadAnalog(channel);
 8000722:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <main+0x1dc>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f9b8 	bl	8000a9c <PCF8591_ReadAnalog>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <main+0x1d0>)
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	e008      	b.n	8000748 <main+0x17c>
		}
		else {
			UART_Print("Canal invalido\r\n");
 8000736:	481f      	ldr	r0, [pc, #124]	@ (80007b4 <main+0x1e8>)
 8000738:	f000 fa2c 	bl	8000b94 <UART_Print>
			channel = -1;
 800073c:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <main+0x1dc>)
 800073e:	22ff      	movs	r2, #255	@ 0xff
 8000740:	701a      	strb	r2, [r3, #0]
			value = 0;
 8000742:	4b16      	ldr	r3, [pc, #88]	@ (800079c <main+0x1d0>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
		}

		char msg[32];
		snprintf(msg, sizeof(msg), "Canal %d: %u\r\n", channel, value);
 8000748:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <main+0x1dc>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <main+0x1d0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	1d38      	adds	r0, r7, #4
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	4613      	mov	r3, r2
 8000758:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <main+0x1ec>)
 800075a:	2120      	movs	r1, #32
 800075c:	f006 fc14 	bl	8006f88 <sniprintf>
		UART_Print(msg);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fa16 	bl	8000b94 <UART_Print>
	  if (status) {
 8000768:	e774      	b.n	8000654 <main+0x88>
 800076a:	bf00      	nop
 800076c:	0800792c 	.word	0x0800792c
 8000770:	200000cc 	.word	0x200000cc
 8000774:	08007948 	.word	0x08007948
 8000778:	0800796c 	.word	0x0800796c
 800077c:	08007984 	.word	0x08007984
 8000780:	200001a8 	.word	0x200001a8
 8000784:	20000120 	.word	0x20000120
 8000788:	200001ed 	.word	0x200001ed
 800078c:	200001ac 	.word	0x200001ac
 8000790:	08007998 	.word	0x08007998
 8000794:	080079ac 	.word	0x080079ac
 8000798:	200001b4 	.word	0x200001b4
 800079c:	200001f9 	.word	0x200001f9
 80007a0:	080079b8 	.word	0x080079b8
 80007a4:	080079c8 	.word	0x080079c8
 80007a8:	200001f8 	.word	0x200001f8
 80007ac:	080079d4 	.word	0x080079d4
 80007b0:	080079e0 	.word	0x080079e0
 80007b4:	080079ec 	.word	0x080079ec
 80007b8:	08007a00 	.word	0x08007a00

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	@ 0x58
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2244      	movs	r2, #68	@ 0x44
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f006 fc12 	bl	8006ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007e2:	f003 fc4d 	bl	8004080 <HAL_PWREx_ControlVoltageScaling>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ec:	f000 fa9e 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fa:	2310      	movs	r3, #16
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800080a:	2308      	movs	r3, #8
 800080c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800080e:	2307      	movs	r3, #7
 8000810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fc84 	bl	800412c <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800082a:	f000 fa7f 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2303      	movs	r3, #3
 8000834:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000842:	463b      	mov	r3, r7
 8000844:	2103      	movs	r1, #3
 8000846:	4618      	mov	r0, r3
 8000848:	f004 f84c 	bl	80048e4 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000852:	f000 fa6b 	bl	8000d2c <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3758      	adds	r7, #88	@ 0x58
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <MX_I2C1_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	@ (80008d8 <MX_I2C1_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_I2C1_Init+0x74>)
 800086c:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <MX_I2C1_Init+0x7c>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_I2C1_Init+0x74>)
 8000878:	2201      	movs	r2, #1
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_I2C1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_I2C1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089a:	480e      	ldr	r0, [pc, #56]	@ (80008d4 <MX_I2C1_Init+0x74>)
 800089c:	f001 f871 	bl	8001982 <HAL_I2C_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008a6:	f000 fa41 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <MX_I2C1_Init+0x74>)
 80008ae:	f003 fb41 	bl	8003f34 <HAL_I2CEx_ConfigAnalogFilter>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008b8:	f000 fa38 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_I2C1_Init+0x74>)
 80008c0:	f003 fb83 	bl	8003fca <HAL_I2CEx_ConfigDigitalFilter>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 fa2f 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000078 	.word	0x20000078
 80008d8:	40005400 	.word	0x40005400
 80008dc:	10707dbc 	.word	0x10707dbc

080008e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <MX_I2C2_Init+0x74>)
 80008e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000958 <MX_I2C2_Init+0x78>)
 80008e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <MX_I2C2_Init+0x74>)
 80008ec:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <MX_I2C2_Init+0x7c>)
 80008ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <MX_I2C2_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <MX_I2C2_Init+0x74>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <MX_I2C2_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_I2C2_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_I2C2_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_I2C2_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <MX_I2C2_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <MX_I2C2_Init+0x74>)
 800091c:	f001 f831 	bl	8001982 <HAL_I2C_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000926:	f000 fa01 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4809      	ldr	r0, [pc, #36]	@ (8000954 <MX_I2C2_Init+0x74>)
 800092e:	f003 fb01 	bl	8003f34 <HAL_I2CEx_ConfigAnalogFilter>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000938:	f000 f9f8 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_I2C2_Init+0x74>)
 8000940:	f003 fb43 	bl	8003fca <HAL_I2CEx_ConfigDigitalFilter>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800094a:	f000 f9ef 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000cc 	.word	0x200000cc
 8000958:	40005800 	.word	0x40005800
 800095c:	10707dbc 	.word	0x10707dbc

08000960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_USART2_UART_Init+0x58>)
 8000966:	4a15      	ldr	r2, [pc, #84]	@ (80009bc <MX_USART2_UART_Init+0x5c>)
 8000968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <MX_USART2_UART_Init+0x58>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_USART2_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_USART2_UART_Init+0x58>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_USART2_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_USART2_UART_Init+0x58>)
 80009a4:	f004 fe7e 	bl	80056a4 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ae:	f000 f9bd 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000120 	.word	0x20000120
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a2e      	ldr	r2, [pc, #184]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a28      	ldr	r2, [pc, #160]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a22      	ldr	r2, [pc, #136]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	4a1c      	ldr	r2, [pc, #112]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_GPIO_Init+0xd4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2120      	movs	r1, #32
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3e:	f000 ff65 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a48:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	480f      	ldr	r0, [pc, #60]	@ (8000a98 <MX_GPIO_Init+0xd8>)
 8000a5a:	f000 fdad 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f000 fd9e 	bl	80015b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2028      	movs	r0, #40	@ 0x28
 8000a82:	f000 fcd6 	bl	8001432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a86:	2028      	movs	r0, #40	@ 0x28
 8000a88:	f000 fcef 	bl	800146a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000800 	.word	0x48000800

08000a9c <PCF8591_ReadAnalog>:

/* USER CODE BEGIN 4 */
uint8_t PCF8591_ReadAnalog(uint8_t channel)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b096      	sub	sp, #88	@ 0x58
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
   uint8_t config_byte = 0x40 | (channel & 0x03);
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	f003 0303 	and.w	r3, r3, #3
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
   uint8_t analog_data[2] = {0};
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
   HAL_StatusTypeDef ret;
   char msg[64];
   snprintf(msg, sizeof(msg), "Iniciando leitura do canal %d\r\n", channel);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f107 000c 	add.w	r0, r7, #12
 8000ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8000b80 <PCF8591_ReadAnalog+0xe4>)
 8000aca:	2140      	movs	r1, #64	@ 0x40
 8000acc:	f006 fa5c 	bl	8006f88 <sniprintf>
   UART_Print(msg);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f85d 	bl	8000b94 <UART_Print>
   ret = HAL_I2C_Master_Transmit(&hi2c2, PCF8591_ADDRESS, &config_byte, 1, 1000);
 8000ada:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	2190      	movs	r1, #144	@ 0x90
 8000ae8:	4826      	ldr	r0, [pc, #152]	@ (8000b84 <PCF8591_ReadAnalog+0xe8>)
 8000aea:	f000 ffe5 	bl	8001ab8 <HAL_I2C_Master_Transmit>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
   if (ret != HAL_OK) {
 8000af4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00e      	beq.n	8000b1a <PCF8591_ReadAnalog+0x7e>
       snprintf(msg, sizeof(msg), "ERRO TX I2C: %d\r\n", ret);
 8000afc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b00:	f107 000c 	add.w	r0, r7, #12
 8000b04:	4a20      	ldr	r2, [pc, #128]	@ (8000b88 <PCF8591_ReadAnalog+0xec>)
 8000b06:	2140      	movs	r1, #64	@ 0x40
 8000b08:	f006 fa3e 	bl	8006f88 <sniprintf>
       UART_Print(msg);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f83f 	bl	8000b94 <UART_Print>
       return 0xFF;
 8000b16:	23ff      	movs	r3, #255	@ 0xff
 8000b18:	e02e      	b.n	8000b78 <PCF8591_ReadAnalog+0xdc>
   }
   ret = HAL_I2C_Master_Receive(&hi2c2, PCF8591_ADDRESS, analog_data, 2, 1000);
 8000b1a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2302      	movs	r3, #2
 8000b26:	2190      	movs	r1, #144	@ 0x90
 8000b28:	4816      	ldr	r0, [pc, #88]	@ (8000b84 <PCF8591_ReadAnalog+0xe8>)
 8000b2a:	f001 f8dd 	bl	8001ce8 <HAL_I2C_Master_Receive>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
   if (ret != HAL_OK) {
 8000b34:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00e      	beq.n	8000b5a <PCF8591_ReadAnalog+0xbe>
       snprintf(msg, sizeof(msg), "ERRO RX I2C: %d\r\n", ret);
 8000b3c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b40:	f107 000c 	add.w	r0, r7, #12
 8000b44:	4a11      	ldr	r2, [pc, #68]	@ (8000b8c <PCF8591_ReadAnalog+0xf0>)
 8000b46:	2140      	movs	r1, #64	@ 0x40
 8000b48:	f006 fa1e 	bl	8006f88 <sniprintf>
       UART_Print(msg);
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f81f 	bl	8000b94 <UART_Print>
       return 0xFF;
 8000b56:	23ff      	movs	r3, #255	@ 0xff
 8000b58:	e00e      	b.n	8000b78 <PCF8591_ReadAnalog+0xdc>
   }
   snprintf(msg, sizeof(msg), "Dados recebidos: [%u]\r\n", analog_data[1]);
 8000b5a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000b5e:	f107 000c 	add.w	r0, r7, #12
 8000b62:	4a0b      	ldr	r2, [pc, #44]	@ (8000b90 <PCF8591_ReadAnalog+0xf4>)
 8000b64:	2140      	movs	r1, #64	@ 0x40
 8000b66:	f006 fa0f 	bl	8006f88 <sniprintf>
   UART_Print(msg);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f810 	bl	8000b94 <UART_Print>
   return analog_data[1];
 8000b74:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3750      	adds	r7, #80	@ 0x50
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	08007a10 	.word	0x08007a10
 8000b84:	200000cc 	.word	0x200000cc
 8000b88:	08007a30 	.word	0x08007a30
 8000b8c:	08007a44 	.word	0x08007a44
 8000b90:	08007a58 	.word	0x08007a58

08000b94 <UART_Print>:
void UART_Print(char *msg) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fb21 	bl	80001e4 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <UART_Print+0x28>)
 8000bae:	f004 fdc7 	bl	8005740 <HAL_UART_Transmit>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000120 	.word	0x20000120

08000bc0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART2) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c38 <HAL_UART_RxCpltCallback+0x78>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12e      	bne.n	8000c30 <HAL_UART_RxCpltCallback+0x70>
       if (rx_byte != '\r' && rx_byte != '\n' && rx_index < sizeof(rx_buffer)-1) {
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <HAL_UART_RxCpltCallback+0x7c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b0d      	cmp	r3, #13
 8000bda:	d017      	beq.n	8000c0c <HAL_UART_RxCpltCallback+0x4c>
 8000bdc:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <HAL_UART_RxCpltCallback+0x7c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b0a      	cmp	r3, #10
 8000be4:	d012      	beq.n	8000c0c <HAL_UART_RxCpltCallback+0x4c>
 8000be6:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <HAL_UART_RxCpltCallback+0x80>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b3e      	cmp	r3, #62	@ 0x3e
 8000bee:	d80d      	bhi.n	8000c0c <HAL_UART_RxCpltCallback+0x4c>
           rx_buffer[rx_index++] = (char)rx_byte;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <HAL_UART_RxCpltCallback+0x80>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	b2d1      	uxtb	r1, r2
 8000bfa:	4a11      	ldr	r2, [pc, #68]	@ (8000c40 <HAL_UART_RxCpltCallback+0x80>)
 8000bfc:	7011      	strb	r1, [r2, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <HAL_UART_RxCpltCallback+0x7c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2d9      	uxtb	r1, r3
 8000c06:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <HAL_UART_RxCpltCallback+0x84>)
 8000c08:	5499      	strb	r1, [r3, r2]
 8000c0a:	e00c      	b.n	8000c26 <HAL_UART_RxCpltCallback+0x66>
       } else {
           rx_buffer[rx_index] = '\0';
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <HAL_UART_RxCpltCallback+0x80>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <HAL_UART_RxCpltCallback+0x84>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	5499      	strb	r1, [r3, r2]
           rx_index = 0;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <HAL_UART_RxCpltCallback+0x80>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
           status = 1;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <HAL_UART_RxCpltCallback+0x88>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
       }
       HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_byte, 1);
 8000c26:	2201      	movs	r2, #1
 8000c28:	4904      	ldr	r1, [pc, #16]	@ (8000c3c <HAL_UART_RxCpltCallback+0x7c>)
 8000c2a:	4808      	ldr	r0, [pc, #32]	@ (8000c4c <HAL_UART_RxCpltCallback+0x8c>)
 8000c2c:	f004 fe12 	bl	8005854 <HAL_UART_Receive_IT>
   }
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	200001a8 	.word	0x200001a8
 8000c40:	200001ec 	.word	0x200001ec
 8000c44:	200001ac 	.word	0x200001ac
 8000c48:	200001ed 	.word	0x200001ed
 8000c4c:	20000120 	.word	0x20000120

08000c50 <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
   HAL_I2C_Master_Receive(&hi2c2, PCF8591_ADDRESS, current_request.data, 2, 1000);
 8000c58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2302      	movs	r3, #2
 8000c60:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8000c62:	2190      	movs	r1, #144	@ 0x90
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000c66:	f001 f83f 	bl	8001ce8 <HAL_I2C_Master_Receive>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200001f1 	.word	0x200001f1
 8000c78:	200000cc 	.word	0x200000cc

08000c7c <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
   if(current_request.complete_callback) {
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d007      	beq.n	8000c9c <HAL_I2C_MasterRxCpltCallback+0x20>
       current_request.complete_callback(current_request.channel, current_request.data[1]);
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000c92:	7812      	ldrb	r2, [r2, #0]
 8000c94:	4903      	ldr	r1, [pc, #12]	@ (8000ca4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000c96:	7889      	ldrb	r1, [r1, #2]
 8000c98:	4610      	mov	r0, r2
 8000c9a:	4798      	blx	r3
   }
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200001f0 	.word	0x200001f0

08000ca8 <PCF8591_SetDAC>:
void PCF8591_SetDAC(uint8_t value)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b09e      	sub	sp, #120	@ 0x78
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    data[0] = 0x40;
 8000cb2:	2340      	movs	r3, #64	@ 0x40
 8000cb4:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    data[1] = value;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75

    char msg[50];
    snprintf(msg, sizeof(msg), "DAC set to %u\r\n", value);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000cc4:	4a15      	ldr	r2, [pc, #84]	@ (8000d1c <PCF8591_SetDAC+0x74>)
 8000cc6:	2132      	movs	r1, #50	@ 0x32
 8000cc8:	f006 f95e 	bl	8006f88 <sniprintf>
    UART_Print(msg);
 8000ccc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff5f 	bl	8000b94 <UART_Print>

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit_IT(&hi2c2, PCF8591_ADDRESS, data, 2);
 8000cd6:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8000cda:	2302      	movs	r3, #2
 8000cdc:	2190      	movs	r1, #144	@ 0x90
 8000cde:	4810      	ldr	r0, [pc, #64]	@ (8000d20 <PCF8591_SetDAC+0x78>)
 8000ce0:	f001 f8f8 	bl	8001ed4 <HAL_I2C_Master_Transmit_IT>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret == HAL_OK) {
 8000cea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10c      	bne.n	8000d0c <PCF8591_SetDAC+0x64>
		char msg[50];
		snprintf(msg, sizeof(msg), "DAC: %u\r\n", value);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f107 000c 	add.w	r0, r7, #12
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <PCF8591_SetDAC+0x7c>)
 8000cfa:	2132      	movs	r1, #50	@ 0x32
 8000cfc:	f006 f944 	bl	8006f88 <sniprintf>
		UART_Print(msg);
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff45 	bl	8000b94 <UART_Print>
    } else {
        UART_Print("Erro ao enviar valor para DAC!\r\n");
    }
}
 8000d0a:	e002      	b.n	8000d12 <PCF8591_SetDAC+0x6a>
        UART_Print("Erro ao enviar valor para DAC!\r\n");
 8000d0c:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <PCF8591_SetDAC+0x80>)
 8000d0e:	f7ff ff41 	bl	8000b94 <UART_Print>
}
 8000d12:	bf00      	nop
 8000d14:	3778      	adds	r7, #120	@ 0x78
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	08007a70 	.word	0x08007a70
 8000d20:	200000cc 	.word	0x200000cc
 8000d24:	08007a80 	.word	0x08007a80
 8000d28:	08007a8c 	.word	0x08007a8c

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d42:	4a0e      	ldr	r2, [pc, #56]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5a:	4a08      	ldr	r2, [pc, #32]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0ae      	sub	sp, #184	@ 0xb8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	2288      	movs	r2, #136	@ 0x88
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 f927 	bl	8006ff4 <memset>
  if(hi2c->Instance==I2C1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a52      	ldr	r2, [pc, #328]	@ (8000ef4 <HAL_I2C_MspInit+0x174>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d14b      	bne.n	8000e48 <HAL_I2C_MspInit+0xc8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000db0:	2340      	movs	r3, #64	@ 0x40
 8000db2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f003 ffb5 	bl	8004d2c <HAL_RCCEx_PeriphCLKConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dc8:	f7ff ffb0 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd0:	4a49      	ldr	r2, [pc, #292]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd8:	4b47      	ldr	r3, [pc, #284]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000de4:	23c0      	movs	r3, #192	@ 0xc0
 8000de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dea:	2312      	movs	r3, #18
 8000dec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e06:	4619      	mov	r1, r3
 8000e08:	483c      	ldr	r0, [pc, #240]	@ (8000efc <HAL_I2C_MspInit+0x17c>)
 8000e0a:	f000 fbd5 	bl	80015b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e12:	4a39      	ldr	r2, [pc, #228]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000e14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e1a:	4b37      	ldr	r3, [pc, #220]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	201f      	movs	r0, #31
 8000e2c:	f000 fb01 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e30:	201f      	movs	r0, #31
 8000e32:	f000 fb1a 	bl	800146a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2020      	movs	r0, #32
 8000e3c:	f000 faf9 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e40:	2020      	movs	r0, #32
 8000e42:	f000 fb12 	bl	800146a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e46:	e050      	b.n	8000eea <HAL_I2C_MspInit+0x16a>
  else if(hi2c->Instance==I2C2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000f00 <HAL_I2C_MspInit+0x180>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d14b      	bne.n	8000eea <HAL_I2C_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 ff64 	bl	8004d2c <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000e6a:	f7ff ff5f 	bl	8000d2c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e86:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4813      	ldr	r0, [pc, #76]	@ (8000efc <HAL_I2C_MspInit+0x17c>)
 8000eae:	f000 fb83 	bl	80015b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000eb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_I2C_MspInit+0x178>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2021      	movs	r0, #33	@ 0x21
 8000ed0:	f000 faaf 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000ed4:	2021      	movs	r0, #33	@ 0x21
 8000ed6:	f000 fac8 	bl	800146a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2022      	movs	r0, #34	@ 0x22
 8000ee0:	f000 faa7 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000ee4:	2022      	movs	r0, #34	@ 0x22
 8000ee6:	f000 fac0 	bl	800146a <HAL_NVIC_EnableIRQ>
}
 8000eea:	bf00      	nop
 8000eec:	37b8      	adds	r7, #184	@ 0xb8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	48000400 	.word	0x48000400
 8000f00:	40005800 	.word	0x40005800

08000f04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0ac      	sub	sp, #176	@ 0xb0
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2288      	movs	r2, #136	@ 0x88
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f006 f865 	bl	8006ff4 <memset>
  if(huart->Instance==USART2)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a25      	ldr	r2, [pc, #148]	@ (8000fc4 <HAL_UART_MspInit+0xc0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d143      	bne.n	8000fbc <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 fef3 	bl	8004d2c <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f4c:	f7ff feee 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f50:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <HAL_UART_MspInit+0xc4>)
 8000f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f54:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <HAL_UART_MspInit+0xc4>)
 8000f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <HAL_UART_MspInit+0xc4>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <HAL_UART_MspInit+0xc4>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6c:	4a16      	ldr	r2, [pc, #88]	@ (8000fc8 <HAL_UART_MspInit+0xc4>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f74:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <HAL_UART_MspInit+0xc4>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f80:	230c      	movs	r3, #12
 8000f82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa8:	f000 fb06 	bl	80015b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2026      	movs	r0, #38	@ 0x26
 8000fb2:	f000 fa3e 	bl	8001432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fb6:	2026      	movs	r0, #38	@ 0x26
 8000fb8:	f000 fa57 	bl	800146a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fbc:	bf00      	nop
 8000fbe:	37b0      	adds	r7, #176	@ 0xb0
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	40021000 	.word	0x40021000

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001022:	f000 f90b 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <I2C1_EV_IRQHandler+0x10>)
 8001032:	f001 f8d3 	bl	80021dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000078 	.word	0x20000078

08001040 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <I2C1_ER_IRQHandler+0x10>)
 8001046:	f001 f8e3 	bl	8002210 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000078 	.word	0x20000078

08001054 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <I2C2_EV_IRQHandler+0x10>)
 800105a:	f001 f8bf 	bl	80021dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000cc 	.word	0x200000cc

08001068 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <I2C2_ER_IRQHandler+0x10>)
 800106e:	f001 f8cf 	bl	8002210 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000cc 	.word	0x200000cc

0800107c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <USART2_IRQHandler+0x10>)
 8001082:	f004 fc33 	bl	80058ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000120 	.word	0x20000120

08001090 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001094:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001098:	f000 fc50 	bl	800193c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f005 ffaa 	bl	8007028 <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20018000 	.word	0x20018000
 8001100:	00000400 	.word	0x00000400
 8001104:	200001fc 	.word	0x200001fc
 8001108:	20000350 	.word	0x20000350

0800110c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001168 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001134:	f7ff ffea 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <LoopForever+0x6>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	@ (8001170 <LoopForever+0xa>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <LoopForever+0xe>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	@ (800117c <LoopForever+0x16>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115e:	f005 ff69 	bl	8007034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001162:	f7ff fa33 	bl	80005cc <main>

08001166 <LoopForever>:

LoopForever:
    b LoopForever
 8001166:	e7fe      	b.n	8001166 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001168:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001174:	08007c3c 	.word	0x08007c3c
  ldr r2, =_sbss
 8001178:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800117c:	2000034c 	.word	0x2000034c

08001180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC1_2_IRQHandler>
	...

08001184 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <HAL_Init+0x3c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <HAL_Init+0x3c>)
 8001194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001198:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119a:	2003      	movs	r0, #3
 800119c:	f000 f93e 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a0:	2000      	movs	r0, #0
 80011a2:	f000 f80f 	bl	80011c4 <HAL_InitTick>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	e001      	b.n	80011b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011b2:	f7ff fdc1 	bl	8000d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b6:	79fb      	ldrb	r3, [r7, #7]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40022000 	.word	0x40022000

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011d0:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_InitTick+0x6c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d023      	beq.n	8001220 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011d8:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <HAL_InitTick+0x70>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_InitTick+0x6c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f949 	bl	8001486 <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d809      	bhi.n	8001214 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001208:	f000 f913 	bl	8001432 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800120c:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <HAL_InitTick+0x74>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e007      	b.n	8001224 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e004      	b.n	8001224 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e001      	b.n	8001224 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000000 	.word	0x20000000
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008
 8001260:	20000200 	.word	0x20000200

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	@ (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000200 	.word	0x20000200

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4907      	ldr	r1, [pc, #28]	@ (8001318 <__NVIC_EnableIRQ+0x38>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	@ (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	@ (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	@ 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013fc:	f7ff ff8e 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff29 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff3e 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff8e 	bl	8001370 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff31 	bl	80012e0 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa2 	bl	80013d8 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800149e:	b480      	push	{r7}
 80014a0:	b085      	sub	sp, #20
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d008      	beq.n	80014c8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2204      	movs	r2, #4
 80014ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e022      	b.n	800150e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 020e 	bic.w	r2, r2, #14
 80014d6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	f003 021c 	and.w	r2, r3, #28
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d005      	beq.n	800153e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2204      	movs	r2, #4
 8001536:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e029      	b.n	8001592 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 020e 	bic.w	r2, r2, #14
 800154c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0201 	bic.w	r2, r2, #1
 800155c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	f003 021c 	and.w	r2, r3, #28
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
    }
  }
  return status;
 8001592:	7bfb      	ldrb	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015aa:	b2db      	uxtb	r3, r3
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	e17f      	b.n	80018c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2101      	movs	r1, #1
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	4013      	ands	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8171 	beq.w	80018c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d005      	beq.n	80015f8 <HAL_GPIO_Init+0x40>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d130      	bne.n	800165a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800162e:	2201      	movs	r2, #1
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	f003 0201 	and.w	r2, r3, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b03      	cmp	r3, #3
 8001664:	d118      	bne.n	8001698 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800166c:	2201      	movs	r2, #1
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	08db      	lsrs	r3, r3, #3
 8001682:	f003 0201 	and.w	r2, r3, #1
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d017      	beq.n	80016d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	2203      	movs	r2, #3
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d123      	bne.n	8001728 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	08da      	lsrs	r2, r3, #3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3208      	adds	r2, #8
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	6939      	ldr	r1, [r7, #16]
 8001724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0203 	and.w	r2, r3, #3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80ac 	beq.w	80018c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	4b5f      	ldr	r3, [pc, #380]	@ (80018e8 <HAL_GPIO_Init+0x330>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176e:	4a5e      	ldr	r2, [pc, #376]	@ (80018e8 <HAL_GPIO_Init+0x330>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6613      	str	r3, [r2, #96]	@ 0x60
 8001776:	4b5c      	ldr	r3, [pc, #368]	@ (80018e8 <HAL_GPIO_Init+0x330>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001782:	4a5a      	ldr	r2, [pc, #360]	@ (80018ec <HAL_GPIO_Init+0x334>)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x242>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4f      	ldr	r2, [pc, #316]	@ (80018f0 <HAL_GPIO_Init+0x338>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x23e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4e      	ldr	r2, [pc, #312]	@ (80018f4 <HAL_GPIO_Init+0x33c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x23a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4d      	ldr	r2, [pc, #308]	@ (80018f8 <HAL_GPIO_Init+0x340>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x236>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4c      	ldr	r2, [pc, #304]	@ (80018fc <HAL_GPIO_Init+0x344>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x232>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001900 <HAL_GPIO_Init+0x348>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x22e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001904 <HAL_GPIO_Init+0x34c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x22a>
 80017de:	2306      	movs	r3, #6
 80017e0:	e00c      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017e2:	2307      	movs	r3, #7
 80017e4:	e00a      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017e6:	2305      	movs	r3, #5
 80017e8:	e008      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017ea:	2304      	movs	r3, #4
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017ee:	2303      	movs	r3, #3
 80017f0:	e004      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x244>
 80017fa:	2300      	movs	r3, #0
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	f002 0203 	and.w	r2, r2, #3
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	4093      	lsls	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800180c:	4937      	ldr	r1, [pc, #220]	@ (80018ec <HAL_GPIO_Init+0x334>)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800181a:	4b3b      	ldr	r3, [pc, #236]	@ (8001908 <HAL_GPIO_Init+0x350>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800183e:	4a32      	ldr	r2, [pc, #200]	@ (8001908 <HAL_GPIO_Init+0x350>)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001844:	4b30      	ldr	r3, [pc, #192]	@ (8001908 <HAL_GPIO_Init+0x350>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001868:	4a27      	ldr	r2, [pc, #156]	@ (8001908 <HAL_GPIO_Init+0x350>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800186e:	4b26      	ldr	r3, [pc, #152]	@ (8001908 <HAL_GPIO_Init+0x350>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001892:	4a1d      	ldr	r2, [pc, #116]	@ (8001908 <HAL_GPIO_Init+0x350>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_GPIO_Init+0x350>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018bc:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <HAL_GPIO_Init+0x350>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f47f ae78 	bne.w	80015c8 <HAL_GPIO_Init+0x10>
  }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010000 	.word	0x40010000
 80018f0:	48000400 	.word	0x48000400
 80018f4:	48000800 	.word	0x48000800
 80018f8:	48000c00 	.word	0x48000c00
 80018fc:	48001000 	.word	0x48001000
 8001900:	48001400 	.word	0x48001400
 8001904:	48001800 	.word	0x48001800
 8001908:	40010400 	.word	0x40010400

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001928:	e002      	b.n	8001930 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001946:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f806 	bl	800196c <HAL_GPIO_EXTI_Callback>
  }
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e08d      	b.n	8001ab0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d106      	bne.n	80019ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff f9e9 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2224      	movs	r2, #36	@ 0x24
 80019b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	e006      	b.n	8001a0a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d108      	bne.n	8001a24 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	e007      	b.n	8001a34 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a32:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a46:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69d9      	ldr	r1, [r3, #28]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1a      	ldr	r2, [r3, #32]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	817b      	strh	r3, [r7, #10]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	f040 80fd 	bne.w	8001cd4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_I2C_Master_Transmit+0x30>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e0f6      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x21e>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001af0:	f7ff fbb8 	bl	8001264 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2319      	movs	r3, #25
 8001afc:	2201      	movs	r2, #1
 8001afe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f001 feb3 	bl	800386e <I2C_WaitOnFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e0e1      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2221      	movs	r2, #33	@ 0x21
 8001b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	893a      	ldrh	r2, [r7, #8]
 8001b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2bff      	cmp	r3, #255	@ 0xff
 8001b42:	d906      	bls.n	8001b52 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	22ff      	movs	r2, #255	@ 0xff
 8001b48:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e007      	b.n	8001b62 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b60:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d024      	beq.n	8001bb4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	781a      	ldrb	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	8979      	ldrh	r1, [r7, #10]
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8001ce0 <HAL_I2C_Master_Transmit+0x228>)
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f002 f8ad 	bl	8003d0c <I2C_TransferConfig>
 8001bb2:	e066      	b.n	8001c82 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	8979      	ldrh	r1, [r7, #10]
 8001bbc:	4b48      	ldr	r3, [pc, #288]	@ (8001ce0 <HAL_I2C_Master_Transmit+0x228>)
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f002 f8a2 	bl	8003d0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bc8:	e05b      	b.n	8001c82 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	6a39      	ldr	r1, [r7, #32]
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f001 fea6 	bl	8003920 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e07b      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d034      	beq.n	8001c82 <HAL_I2C_Master_Transmit+0x1ca>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d130      	bne.n	8001c82 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	2200      	movs	r2, #0
 8001c28:	2180      	movs	r1, #128	@ 0x80
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f001 fe1f 	bl	800386e <I2C_WaitOnFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e04d      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2bff      	cmp	r3, #255	@ 0xff
 8001c42:	d90e      	bls.n	8001c62 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	22ff      	movs	r2, #255	@ 0xff
 8001c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	8979      	ldrh	r1, [r7, #10]
 8001c52:	2300      	movs	r3, #0
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f002 f856 	bl	8003d0c <I2C_TransferConfig>
 8001c60:	e00f      	b.n	8001c82 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	8979      	ldrh	r1, [r7, #10]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f002 f845 	bl	8003d0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d19e      	bne.n	8001bca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	6a39      	ldr	r1, [r7, #32]
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f001 fe8c 	bl	80039ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e01a      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6859      	ldr	r1, [r3, #4]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <HAL_I2C_Master_Transmit+0x22c>)
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e000      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
  }
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	80002000 	.word	0x80002000
 8001ce4:	fe00e800 	.word	0xfe00e800

08001ce8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	817b      	strh	r3, [r7, #10]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	f040 80db 	bne.w	8001ec0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_I2C_Master_Receive+0x30>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e0d4      	b.n	8001ec2 <HAL_I2C_Master_Receive+0x1da>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d20:	f7ff faa0 	bl	8001264 <HAL_GetTick>
 8001d24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2319      	movs	r3, #25
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f001 fd9b 	bl	800386e <I2C_WaitOnFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0bf      	b.n	8001ec2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2222      	movs	r2, #34	@ 0x22
 8001d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	893a      	ldrh	r2, [r7, #8]
 8001d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2bff      	cmp	r3, #255	@ 0xff
 8001d72:	d90e      	bls.n	8001d92 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2201      	movs	r2, #1
 8001d78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	8979      	ldrh	r1, [r7, #10]
 8001d82:	4b52      	ldr	r3, [pc, #328]	@ (8001ecc <HAL_I2C_Master_Receive+0x1e4>)
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f001 ffbe 	bl	8003d0c <I2C_TransferConfig>
 8001d90:	e06d      	b.n	8001e6e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	8979      	ldrh	r1, [r7, #10]
 8001da4:	4b49      	ldr	r3, [pc, #292]	@ (8001ecc <HAL_I2C_Master_Receive+0x1e4>)
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f001 ffad 	bl	8003d0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001db2:	e05c      	b.n	8001e6e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	6a39      	ldr	r1, [r7, #32]
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f001 fe3b 	bl	8003a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e07c      	b.n	8001ec2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d034      	beq.n	8001e6e <HAL_I2C_Master_Receive+0x186>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d130      	bne.n	8001e6e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	2200      	movs	r2, #0
 8001e14:	2180      	movs	r1, #128	@ 0x80
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f001 fd29 	bl	800386e <I2C_WaitOnFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e04d      	b.n	8001ec2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	2bff      	cmp	r3, #255	@ 0xff
 8001e2e:	d90e      	bls.n	8001e4e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	22ff      	movs	r2, #255	@ 0xff
 8001e34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	8979      	ldrh	r1, [r7, #10]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f001 ff60 	bl	8003d0c <I2C_TransferConfig>
 8001e4c:	e00f      	b.n	8001e6e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	8979      	ldrh	r1, [r7, #10]
 8001e60:	2300      	movs	r3, #0
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f001 ff4f 	bl	8003d0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d19d      	bne.n	8001db4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	6a39      	ldr	r1, [r7, #32]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f001 fd96 	bl	80039ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e01a      	b.n	8001ec2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2220      	movs	r2, #32
 8001e92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <HAL_I2C_Master_Receive+0x1e8>)
 8001ea0:	400b      	ands	r3, r1
 8001ea2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e000      	b.n	8001ec2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
  }
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	80002400 	.word	0x80002400
 8001ed0:	fe00e800 	.word	0xfe00e800

08001ed4 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	817b      	strh	r3, [r7, #10]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d17c      	bne.n	8001fee <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f02:	d101      	bne.n	8001f08 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
 8001f06:	e073      	b.n	8001ff0 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Master_Transmit_IT+0x42>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e06c      	b.n	8001ff0 <HAL_I2C_Master_Transmit_IT+0x11c>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2221      	movs	r2, #33	@ 0x21
 8001f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	893a      	ldrh	r2, [r7, #8]
 8001f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff8 <HAL_I2C_Master_Transmit_IT+0x124>)
 8001f44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4a2c      	ldr	r2, [pc, #176]	@ (8001ffc <HAL_I2C_Master_Transmit_IT+0x128>)
 8001f4a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2bff      	cmp	r3, #255	@ 0xff
 8001f54:	d906      	bls.n	8001f64 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	22ff      	movs	r2, #255	@ 0xff
 8001f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001f5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	e007      	b.n	8001f74 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f72:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d024      	beq.n	8001fc6 <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	8979      	ldrh	r1, [r7, #10]
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f001 fea4 	bl	8003d0c <I2C_TransferConfig>
 8001fc4:	e009      	b.n	8001fda <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	8979      	ldrh	r1, [r7, #10]
 8001fce:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f001 fe99 	bl	8003d0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f001 fec3 	bl	8003d70 <I2C_Enable_IRQ>

    return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
  }
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	ffff0000 	.word	0xffff0000
 8001ffc:	0800237b 	.word	0x0800237b
 8002000:	80002000 	.word	0x80002000

08002004 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	@ 0x28
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	460b      	mov	r3, r1
 8002012:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b20      	cmp	r3, #32
 8002022:	f040 80d6 	bne.w	80021d2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002034:	d101      	bne.n	800203a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002036:	2302      	movs	r3, #2
 8002038:	e0cc      	b.n	80021d4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_I2C_IsDeviceReady+0x44>
 8002044:	2302      	movs	r3, #2
 8002046:	e0c5      	b.n	80021d4 <HAL_I2C_IsDeviceReady+0x1d0>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2224      	movs	r2, #36	@ 0x24
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_I2C_IsDeviceReady+0x72>
 8002066:	897b      	ldrh	r3, [r7, #10]
 8002068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800206c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002070:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002074:	e006      	b.n	8002084 <HAL_I2C_IsDeviceReady+0x80>
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800207c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002080:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800208a:	f7ff f8eb 	bl	8001264 <HAL_GetTick>
 800208e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b20      	cmp	r3, #32
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b10      	cmp	r3, #16
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80020bc:	e034      	b.n	8002128 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020c4:	d01a      	beq.n	80020fc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020c6:	f7ff f8cd 	bl	8001264 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d302      	bcc.n	80020dc <HAL_I2C_IsDeviceReady+0xd8>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10f      	bne.n	80020fc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e8:	f043 0220 	orr.w	r2, r3, #32
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e06b      	b.n	80021d4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b20      	cmp	r3, #32
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b10      	cmp	r3, #16
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002128:	7ffb      	ldrb	r3, [r7, #31]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_I2C_IsDeviceReady+0x130>
 800212e:	7fbb      	ldrb	r3, [r7, #30]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0c4      	beq.n	80020be <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b10      	cmp	r3, #16
 8002140:	d01a      	beq.n	8002178 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2200      	movs	r2, #0
 800214a:	2120      	movs	r1, #32
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f001 fb8e 	bl	800386e <I2C_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e03b      	b.n	80021d4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2220      	movs	r2, #32
 8002162:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	e02d      	b.n	80021d4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	2120      	movs	r1, #32
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f001 fb73 	bl	800386e <I2C_WaitOnFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e020      	b.n	80021d4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2210      	movs	r2, #16
 8002198:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2220      	movs	r2, #32
 80021a0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f63f af56 	bhi.w	800205e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
  }
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
  }
}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d010      	beq.n	8002256 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	09db      	lsrs	r3, r3, #7
 8002238:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002254:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	0a9b      	lsrs	r3, r3, #10
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	09db      	lsrs	r3, r3, #7
 8002266:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	f043 0208 	orr.w	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002282:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	0a5b      	lsrs	r3, r3, #9
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	09db      	lsrs	r3, r3, #7
 8002294:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a0:	f043 0202 	orr.w	r2, r3, #2
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022b0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 030b 	and.w	r3, r3, #11
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80022c2:	68f9      	ldr	r1, [r7, #12]
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f001 f979 	bl	80035bc <I2C_ITError>
  }
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	70fb      	strb	r3, [r7, #3]
 8002306:	4613      	mov	r3, r2
 8002308:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b088      	sub	sp, #32
 800237e:	af02      	add	r7, sp, #8
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <I2C_Master_ISR_IT+0x1e>
 8002394:	2302      	movs	r3, #2
 8002396:	e12e      	b.n	80025f6 <I2C_Master_ISR_IT+0x27c>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00d      	beq.n	80023d4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2210      	movs	r2, #16
 80023be:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c4:	f043 0204 	orr.w	r2, r3, #4
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f001 fa0c 	bl	80037ea <I2C_Flush_TXDR>
 80023d2:	e0fb      	b.n	80025cc <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d023      	beq.n	8002428 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01d      	beq.n	8002428 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f023 0304 	bic.w	r3, r3, #4
 80023f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002426:	e0d1      	b.n	80025cc <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	099b      	lsrs	r3, r3, #6
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d12a      	bne.n	800248a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800243c:	2b00      	cmp	r3, #0
 800243e:	d024      	beq.n	800248a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	085b      	lsrs	r3, r3, #1
 8002444:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01e      	beq.n	800248a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80ba 	beq.w	80025cc <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8002488:	e0a0      	b.n	80025cc <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	09db      	lsrs	r3, r3, #7
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d06b      	beq.n	800256e <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	099b      	lsrs	r3, r3, #6
 800249a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d065      	beq.n	800256e <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d04e      	beq.n	800254a <I2C_Master_ISR_IT+0x1d0>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d14a      	bne.n	800254a <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2bff      	cmp	r3, #255	@ 0xff
 80024ca:	d91c      	bls.n	8002506 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	0c1b      	lsrs	r3, r3, #16
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d103      	bne.n	80024e8 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80024e6:	e002      	b.n	80024ee <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	22ff      	movs	r2, #255	@ 0xff
 80024ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	8a79      	ldrh	r1, [r7, #18]
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f001 fc04 	bl	8003d0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002504:	e032      	b.n	800256c <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002518:	d00b      	beq.n	8002532 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002524:	8a79      	ldrh	r1, [r7, #18]
 8002526:	2000      	movs	r0, #0
 8002528:	9000      	str	r0, [sp, #0]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f001 fbee 	bl	8003d0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002530:	e01c      	b.n	800256c <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002536:	b2da      	uxtb	r2, r3
 8002538:	8a79      	ldrh	r1, [r7, #18]
 800253a:	2300      	movs	r3, #0
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f001 fbe2 	bl	8003d0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002548:	e010      	b.n	800256c <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002554:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002558:	d003      	beq.n	8002562 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fd09 	bl	8002f72 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002560:	e034      	b.n	80025cc <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002562:	2140      	movs	r1, #64	@ 0x40
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f001 f829 	bl	80035bc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800256a:	e02f      	b.n	80025cc <I2C_Master_ISR_IT+0x252>
 800256c:	e02e      	b.n	80025cc <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	099b      	lsrs	r3, r3, #6
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d028      	beq.n	80025cc <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002582:	2b00      	cmp	r3, #0
 8002584:	d022      	beq.n	80025cc <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d119      	bne.n	80025c4 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800259e:	d015      	beq.n	80025cc <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025a8:	d108      	bne.n	80025bc <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	e007      	b.n	80025cc <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fcd8 	bl	8002f72 <I2C_ITMasterSeqCplt>
 80025c2:	e003      	b.n	80025cc <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80025c4:	2140      	movs	r1, #64	@ 0x40
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fff8 	bl	80035bc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d009      	beq.n	80025ec <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80025e4:	6979      	ldr	r1, [r7, #20]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fd5e 	bl	80030a8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <I2C_Slave_ISR_IT+0x24>
 800261e:	2302      	movs	r3, #2
 8002620:	e0ed      	b.n	80027fe <I2C_Slave_ISR_IT+0x200>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002642:	6939      	ldr	r1, [r7, #16]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fdf9 	bl	800323c <I2C_ITSlaveCplt>
 800264a:	e0d3      	b.n	80027f4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d04d      	beq.n	80026f4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002660:	2b00      	cmp	r3, #0
 8002662:	d047      	beq.n	80026f4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d128      	bne.n	80026c0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b28      	cmp	r3, #40	@ 0x28
 8002678:	d108      	bne.n	800268c <I2C_Slave_ISR_IT+0x8e>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002680:	d104      	bne.n	800268c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002682:	6939      	ldr	r1, [r7, #16]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 ff43 	bl	8003510 <I2C_ITListenCplt>
 800268a:	e032      	b.n	80026f2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b29      	cmp	r3, #41	@ 0x29
 8002696:	d10e      	bne.n	80026b6 <I2C_Slave_ISR_IT+0xb8>
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800269e:	d00a      	beq.n	80026b6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2210      	movs	r2, #16
 80026a6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f001 f89e 	bl	80037ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fc9c 	bl	8002fec <I2C_ITSlaveSeqCplt>
 80026b4:	e01d      	b.n	80026f2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2210      	movs	r2, #16
 80026bc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80026be:	e096      	b.n	80027ee <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2210      	movs	r2, #16
 80026c6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026cc:	f043 0204 	orr.w	r2, r3, #4
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d004      	beq.n	80026e4 <I2C_Slave_ISR_IT+0xe6>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e0:	f040 8085 	bne.w	80027ee <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e8:	4619      	mov	r1, r3
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 ff66 	bl	80035bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80026f0:	e07d      	b.n	80027ee <I2C_Slave_ISR_IT+0x1f0>
 80026f2:	e07c      	b.n	80027ee <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d030      	beq.n	8002762 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002708:	2b00      	cmp	r3, #0
 800270a:	d02a      	beq.n	8002762 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d018      	beq.n	8002748 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d14f      	bne.n	80027f2 <I2C_Slave_ISR_IT+0x1f4>
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002758:	d04b      	beq.n	80027f2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fc46 	bl	8002fec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002760:	e047      	b.n	80027f2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	08db      	lsrs	r3, r3, #3
 8002772:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800277a:	6939      	ldr	r1, [r7, #16]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fb74 	bl	8002e6a <I2C_ITAddrCplt>
 8002782:	e037      	b.n	80027f4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d031      	beq.n	80027f4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02b      	beq.n	80027f4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d018      	beq.n	80027d8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80027d6:	e00d      	b.n	80027f4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027de:	d002      	beq.n	80027e6 <I2C_Slave_ISR_IT+0x1e8>
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fc00 	bl	8002fec <I2C_ITSlaveSeqCplt>
 80027ec:	e002      	b.n	80027f4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80027ee:	bf00      	nop
 80027f0:	e000      	b.n	80027f4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80027f2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b088      	sub	sp, #32
 800280a:	af02      	add	r7, sp, #8
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <I2C_Master_ISR_DMA+0x1a>
 800281c:	2302      	movs	r3, #2
 800281e:	e0f0      	b.n	8002a02 <I2C_Master_ISR_DMA+0x1fc>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d017      	beq.n	8002864 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800283c:	2b00      	cmp	r3, #0
 800283e:	d011      	beq.n	8002864 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2210      	movs	r2, #16
 8002846:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284c:	f043 0204 	orr.w	r2, r3, #4
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002854:	2120      	movs	r1, #32
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f001 fa8a 	bl	8003d70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 ffc4 	bl	80037ea <I2C_Flush_TXDR>
 8002862:	e0c9      	b.n	80029f8 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	09db      	lsrs	r3, r3, #7
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8081 	beq.w	8002974 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800287a:	2b00      	cmp	r3, #0
 800287c:	d07a      	beq.n	8002974 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800288c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05c      	beq.n	8002952 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2bff      	cmp	r3, #255	@ 0xff
 80028ae:	d914      	bls.n	80028da <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	0c1b      	lsrs	r3, r3, #16
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d103      	bne.n	80028cc <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80028ca:	e002      	b.n	80028d2 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	22ff      	movs	r2, #255	@ 0xff
 80028d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80028d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e010      	b.n	80028fc <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028ec:	d003      	beq.n	80028f6 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	e002      	b.n	80028fc <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80028f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028fa:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002900:	b2da      	uxtb	r2, r3
 8002902:	8a79      	ldrh	r1, [r7, #18]
 8002904:	2300      	movs	r3, #0
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f001 f9fe 	bl	8003d0c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b22      	cmp	r3, #34	@ 0x22
 800292c:	d108      	bne.n	8002940 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800293c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800293e:	e05b      	b.n	80029f8 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800294e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002950:	e052      	b.n	80029f8 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002960:	d003      	beq.n	800296a <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fb05 	bl	8002f72 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002968:	e046      	b.n	80029f8 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800296a:	2140      	movs	r1, #64	@ 0x40
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fe25 	bl	80035bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002972:	e041      	b.n	80029f8 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	099b      	lsrs	r3, r3, #6
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d029      	beq.n	80029d4 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002988:	2b00      	cmp	r3, #0
 800298a:	d023      	beq.n	80029d4 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d119      	bne.n	80029ca <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029a4:	d027      	beq.n	80029f6 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029ae:	d108      	bne.n	80029c2 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029be:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80029c0:	e019      	b.n	80029f6 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fad5 	bl	8002f72 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80029c8:	e015      	b.n	80029f6 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80029ca:	2140      	movs	r1, #64	@ 0x40
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fdf5 	bl	80035bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80029d2:	e010      	b.n	80029f6 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fb5a 	bl	80030a8 <I2C_ITMasterCplt>
 80029f4:	e000      	b.n	80029f8 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 80029f6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002a18:	4b94      	ldr	r3, [pc, #592]	@ (8002c6c <I2C_Mem_ISR_DMA+0x260>)
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <I2C_Mem_ISR_DMA+0x1e>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e139      	b.n	8002c9e <I2C_Mem_ISR_DMA+0x292>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d017      	beq.n	8002a6e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d011      	beq.n	8002a6e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2210      	movs	r2, #16
 8002a50:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	f043 0204 	orr.w	r2, r3, #4
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002a5e:	2120      	movs	r1, #32
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f001 f985 	bl	8003d70 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 febf 	bl	80037ea <I2C_Flush_TXDR>
 8002a6c:	e112      	b.n	8002c94 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00f      	beq.n	8002a9a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a8e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a96:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a98:	e0fc      	b.n	8002c94 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	09db      	lsrs	r3, r3, #7
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d06e      	beq.n	8002b84 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d068      	beq.n	8002b84 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f001 f9df 	bl	8003e78 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002aba:	2110      	movs	r1, #16
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f001 f957 	bl	8003d70 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d056      	beq.n	8002b7a <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2bff      	cmp	r3, #255	@ 0xff
 8002ad4:	d91e      	bls.n	8002b14 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	0c1b      	lsrs	r3, r3, #16
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d103      	bne.n	8002af2 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002af0:	e002      	b.n	8002af8 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	22ff      	movs	r2, #255	@ 0xff
 8002af6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afc:	b299      	uxth	r1, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	2300      	movs	r3, #0
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f001 f8fd 	bl	8003d0c <I2C_TransferConfig>
 8002b12:	e011      	b.n	8002b38 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b22:	b299      	uxth	r1, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f001 f8ea 	bl	8003d0c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b22      	cmp	r3, #34	@ 0x22
 8002b54:	d108      	bne.n	8002b68 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b64:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002b66:	e095      	b.n	8002c94 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b76:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002b78:	e08c      	b.n	8002c94 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b7a:	2140      	movs	r1, #64	@ 0x40
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fd1d 	bl	80035bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002b82:	e087      	b.n	8002c94 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	099b      	lsrs	r3, r3, #6
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d071      	beq.n	8002c74 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	099b      	lsrs	r3, r3, #6
 8002b94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d06b      	beq.n	8002c74 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f001 f96a 	bl	8003e78 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f001 f8e2 	bl	8003d70 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b22      	cmp	r3, #34	@ 0x22
 8002bb6:	d101      	bne.n	8002bbc <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c70 <I2C_Mem_ISR_DMA+0x264>)
 8002bba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2bff      	cmp	r3, #255	@ 0xff
 8002bc4:	d91e      	bls.n	8002c04 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d103      	bne.n	8002be2 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002be0:	e002      	b.n	8002be8 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	22ff      	movs	r2, #255	@ 0xff
 8002be6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bec:	b299      	uxth	r1, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f001 f885 	bl	8003d0c <I2C_TransferConfig>
 8002c02:	e011      	b.n	8002c28 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c12:	b299      	uxth	r1, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f001 f872 	bl	8003d0c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b22      	cmp	r3, #34	@ 0x22
 8002c44:	d108      	bne.n	8002c58 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c54:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c56:	e01d      	b.n	8002c94 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c66:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c68:	e014      	b.n	8002c94 <I2C_Mem_ISR_DMA+0x288>
 8002c6a:	bf00      	nop
 8002c6c:	80002000 	.word	0x80002000
 8002c70:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d009      	beq.n	8002c94 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fa0a 	bl	80030a8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop

08002ca8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b088      	sub	sp, #32
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <I2C_Slave_ISR_DMA+0x24>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e0ca      	b.n	8002e62 <I2C_Slave_ISR_DMA+0x1ba>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d004      	beq.n	8002cf6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 faa4 	bl	800323c <I2C_ITSlaveCplt>
 8002cf4:	e0b0      	b.n	8002e58 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 809a 	beq.w	8002e38 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8093 	beq.w	8002e38 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	0b9b      	lsrs	r3, r3, #14
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0bdb      	lsrs	r3, r3, #15
 8002d22:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d07f      	beq.n	8002e2a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0bdb      	lsrs	r3, r3, #15
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0b9b      	lsrs	r3, r3, #14
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d128      	bne.n	8002dca <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b28      	cmp	r3, #40	@ 0x28
 8002d82:	d108      	bne.n	8002d96 <I2C_Slave_ISR_DMA+0xee>
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d8a:	d104      	bne.n	8002d96 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fbbe 	bl	8003510 <I2C_ITListenCplt>
 8002d94:	e048      	b.n	8002e28 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b29      	cmp	r3, #41	@ 0x29
 8002da0:	d10e      	bne.n	8002dc0 <I2C_Slave_ISR_DMA+0x118>
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002da8:	d00a      	beq.n	8002dc0 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2210      	movs	r2, #16
 8002db0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fd19 	bl	80037ea <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f917 	bl	8002fec <I2C_ITSlaveSeqCplt>
 8002dbe:	e033      	b.n	8002e28 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002dc8:	e034      	b.n	8002e34 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2210      	movs	r2, #16
 8002dd0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f043 0204 	orr.w	r2, r3, #4
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <I2C_Slave_ISR_DMA+0x14c>
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df2:	d11f      	bne.n	8002e34 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
 8002df6:	2b21      	cmp	r3, #33	@ 0x21
 8002df8:	d002      	beq.n	8002e00 <I2C_Slave_ISR_DMA+0x158>
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	2b29      	cmp	r3, #41	@ 0x29
 8002dfe:	d103      	bne.n	8002e08 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2221      	movs	r2, #33	@ 0x21
 8002e04:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e06:	e008      	b.n	8002e1a <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	2b22      	cmp	r3, #34	@ 0x22
 8002e0c:	d002      	beq.n	8002e14 <I2C_Slave_ISR_DMA+0x16c>
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e12:	d102      	bne.n	8002e1a <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2222      	movs	r2, #34	@ 0x22
 8002e18:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	4619      	mov	r1, r3
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fbcb 	bl	80035bc <I2C_ITError>
      if (treatdmanack == 1U)
 8002e26:	e005      	b.n	8002e34 <I2C_Slave_ISR_DMA+0x18c>
 8002e28:	e004      	b.n	8002e34 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2210      	movs	r2, #16
 8002e30:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e32:	e011      	b.n	8002e58 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8002e34:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e36:	e00f      	b.n	8002e58 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	08db      	lsrs	r3, r3, #3
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d009      	beq.n	8002e58 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	08db      	lsrs	r3, r3, #3
 8002e48:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f809 	bl	8002e6a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e80:	2b28      	cmp	r3, #40	@ 0x28
 8002e82:	d16a      	bne.n	8002f5a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002ea2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002ebe:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d138      	bne.n	8002f3a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002ec8:	897b      	ldrh	r3, [r7, #10]
 8002eca:	09db      	lsrs	r3, r3, #7
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	89bb      	ldrh	r3, [r7, #12]
 8002ed0:	4053      	eors	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f003 0306 	and.w	r3, r3, #6
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11c      	bne.n	8002f16 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002edc:	897b      	ldrh	r3, [r7, #10]
 8002ede:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d13b      	bne.n	8002f6a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2208      	movs	r2, #8
 8002efe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f08:	89ba      	ldrh	r2, [r7, #12]
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff f9f3 	bl	80022fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f14:	e029      	b.n	8002f6a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 ffaa 	bl	8003e78 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f2c:	89ba      	ldrh	r2, [r7, #12]
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff f9e1 	bl	80022fa <HAL_I2C_AddrCallback>
}
 8002f38:	e017      	b.n	8002f6a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 ff9a 	bl	8003e78 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f4c:	89ba      	ldrh	r2, [r7, #12]
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff f9d1 	bl	80022fa <HAL_I2C_AddrCallback>
}
 8002f58:	e007      	b.n	8002f6a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2208      	movs	r2, #8
 8002f60:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b21      	cmp	r3, #33	@ 0x21
 8002f8c:	d115      	bne.n	8002fba <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2211      	movs	r2, #17
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 ff67 	bl	8003e78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fd fe4c 	bl	8000c50 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fb8:	e014      	b.n	8002fe4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2212      	movs	r2, #18
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fce:	2102      	movs	r1, #2
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 ff51 	bl	8003e78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fe4c 	bl	8000c7c <HAL_I2C_MasterRxCpltCallback>
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	0b9b      	lsrs	r3, r3, #14
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e00d      	b.n	800303e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	0bdb      	lsrs	r3, r3, #15
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800303c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b29      	cmp	r3, #41	@ 0x29
 8003048:	d112      	bne.n	8003070 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2228      	movs	r2, #40	@ 0x28
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2221      	movs	r2, #33	@ 0x21
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003058:	2101      	movs	r1, #1
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 ff0c 	bl	8003e78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff f932 	bl	80022d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800306e:	e017      	b.n	80030a0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b2a      	cmp	r3, #42	@ 0x2a
 800307a:	d111      	bne.n	80030a0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2228      	movs	r2, #40	@ 0x28
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2222      	movs	r2, #34	@ 0x22
 8003088:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800308a:	2102      	movs	r1, #2
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fef3 	bl	8003e78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff f923 	bl	80022e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2220      	movs	r2, #32
 80030bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b21      	cmp	r3, #33	@ 0x21
 80030c8:	d107      	bne.n	80030da <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030ca:	2101      	movs	r1, #1
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fed3 	bl	8003e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2211      	movs	r2, #17
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80030d8:	e00c      	b.n	80030f4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b22      	cmp	r3, #34	@ 0x22
 80030e4:	d106      	bne.n	80030f4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030e6:	2102      	movs	r1, #2
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fec5 	bl	8003e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2212      	movs	r2, #18
 80030f2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003234 <I2C_ITMasterCplt+0x18c>)
 8003100:	400b      	ands	r3, r1
 8003102:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4a      	ldr	r2, [pc, #296]	@ (8003238 <I2C_ITMasterCplt+0x190>)
 800310e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d009      	beq.n	8003130 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2210      	movs	r2, #16
 8003122:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003128:	f043 0204 	orr.w	r2, r3, #4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b60      	cmp	r3, #96	@ 0x60
 800313a:	d10b      	bne.n	8003154 <I2C_ITMasterCplt+0xac>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	b2db      	uxtb	r3, r3
 8003150:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003152:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fb48 	bl	80037ea <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b60      	cmp	r3, #96	@ 0x60
 800316a:	d002      	beq.n	8003172 <I2C_ITMasterCplt+0xca>
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d006      	beq.n	8003180 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fa1f 	bl	80035bc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800317e:	e054      	b.n	800322a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b21      	cmp	r3, #33	@ 0x21
 800318a:	d124      	bne.n	80031d6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b40      	cmp	r3, #64	@ 0x40
 80031a4:	d10b      	bne.n	80031be <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff f8b7 	bl	800232a <HAL_I2C_MemTxCpltCallback>
}
 80031bc:	e035      	b.n	800322a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd fd3e 	bl	8000c50 <HAL_I2C_MasterTxCpltCallback>
}
 80031d4:	e029      	b.n	800322a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b22      	cmp	r3, #34	@ 0x22
 80031e0:	d123      	bne.n	800322a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d10b      	bne.n	8003214 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff f896 	bl	800233e <HAL_I2C_MemRxCpltCallback>
}
 8003212:	e00a      	b.n	800322a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7fd fd29 	bl	8000c7c <HAL_I2C_MasterRxCpltCallback>
}
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	fe00e800 	.word	0xfe00e800
 8003238:	ffff0000 	.word	0xffff0000

0800323c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003256:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2220      	movs	r2, #32
 8003266:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003268:	7afb      	ldrb	r3, [r7, #11]
 800326a:	2b21      	cmp	r3, #33	@ 0x21
 800326c:	d002      	beq.n	8003274 <I2C_ITSlaveCplt+0x38>
 800326e:	7afb      	ldrb	r3, [r7, #11]
 8003270:	2b29      	cmp	r3, #41	@ 0x29
 8003272:	d108      	bne.n	8003286 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003274:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fdfd 	bl	8003e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2221      	movs	r2, #33	@ 0x21
 8003282:	631a      	str	r2, [r3, #48]	@ 0x30
 8003284:	e019      	b.n	80032ba <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003286:	7afb      	ldrb	r3, [r7, #11]
 8003288:	2b22      	cmp	r3, #34	@ 0x22
 800328a:	d002      	beq.n	8003292 <I2C_ITSlaveCplt+0x56>
 800328c:	7afb      	ldrb	r3, [r7, #11]
 800328e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003290:	d108      	bne.n	80032a4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003292:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fdee 	bl	8003e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2222      	movs	r2, #34	@ 0x22
 80032a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80032a2:	e00a      	b.n	80032ba <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80032a4:	7afb      	ldrb	r3, [r7, #11]
 80032a6:	2b28      	cmp	r3, #40	@ 0x28
 80032a8:	d107      	bne.n	80032ba <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80032aa:	f248 0103 	movw	r1, #32771	@ 0x8003
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fde2 	bl	8003e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032c8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003508 <I2C_ITSlaveCplt+0x2cc>)
 80032d6:	400b      	ands	r3, r1
 80032d8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa85 	bl	80037ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	0b9b      	lsrs	r3, r3, #14
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	2b00      	cmp	r3, #0
 8003302:	d020      	beq.n	8003346 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	b29a      	uxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003312:	e018      	b.n	8003346 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	0bdb      	lsrs	r3, r3, #15
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800332e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d006      	beq.n	8003346 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	b29a      	uxth	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d020      	beq.n	8003394 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f023 0304 	bic.w	r3, r3, #4
 8003358:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a2:	f043 0204 	orr.w	r2, r3, #4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d04a      	beq.n	800344c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d044      	beq.n	800344c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d128      	bne.n	800341e <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b28      	cmp	r3, #40	@ 0x28
 80033d6:	d108      	bne.n	80033ea <I2C_ITSlaveCplt+0x1ae>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033de:	d104      	bne.n	80033ea <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033e0:	6979      	ldr	r1, [r7, #20]
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f894 	bl	8003510 <I2C_ITListenCplt>
 80033e8:	e030      	b.n	800344c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b29      	cmp	r3, #41	@ 0x29
 80033f4:	d10e      	bne.n	8003414 <I2C_ITSlaveCplt+0x1d8>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033fc:	d00a      	beq.n	8003414 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2210      	movs	r2, #16
 8003404:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f9ef 	bl	80037ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fded 	bl	8002fec <I2C_ITSlaveSeqCplt>
 8003412:	e01b      	b.n	800344c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2210      	movs	r2, #16
 800341a:	61da      	str	r2, [r3, #28]
 800341c:	e016      	b.n	800344c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2210      	movs	r2, #16
 8003424:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	f043 0204 	orr.w	r2, r3, #4
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <I2C_ITSlaveCplt+0x204>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800343e:	d105      	bne.n	800344c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f8b8 	bl	80035bc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	2b00      	cmp	r3, #0
 8003460:	d010      	beq.n	8003484 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	4619      	mov	r1, r3
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f8a7 	bl	80035bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b28      	cmp	r3, #40	@ 0x28
 8003478:	d141      	bne.n	80034fe <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f847 	bl	8003510 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003482:	e03c      	b.n	80034fe <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800348c:	d014      	beq.n	80034b8 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fdac 	bl	8002fec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a1d      	ldr	r2, [pc, #116]	@ (800350c <I2C_ITSlaveCplt+0x2d0>)
 8003498:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7fe ff30 	bl	8002316 <HAL_I2C_ListenCpltCallback>
}
 80034b6:	e022      	b.n	80034fe <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b22      	cmp	r3, #34	@ 0x22
 80034c2:	d10e      	bne.n	80034e2 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe ff03 	bl	80022e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80034e0:	e00d      	b.n	80034fe <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7fe feea 	bl	80022d2 <HAL_I2C_SlaveTxCpltCallback>
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	fe00e800 	.word	0xfe00e800
 800350c:	ffff0000 	.word	0xffff0000

08003510 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a26      	ldr	r2, [pc, #152]	@ (80035b8 <I2C_ITListenCplt+0xa8>)
 800351e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d022      	beq.n	800358e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d012      	beq.n	800358e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	f043 0204 	orr.w	r2, r3, #4
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800358e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fc70 	bl	8003e78 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2210      	movs	r2, #16
 800359e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fe feb4 	bl	8002316 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	ffff0000 	.word	0xffff0000

080035bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035cc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a6d      	ldr	r2, [pc, #436]	@ (8003790 <I2C_ITError+0x1d4>)
 80035da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	2b28      	cmp	r3, #40	@ 0x28
 80035f2:	d005      	beq.n	8003600 <I2C_ITError+0x44>
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b29      	cmp	r3, #41	@ 0x29
 80035f8:	d002      	beq.n	8003600 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80035fe:	d10b      	bne.n	8003618 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003600:	2103      	movs	r1, #3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fc38 	bl	8003e78 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2228      	movs	r2, #40	@ 0x28
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a60      	ldr	r2, [pc, #384]	@ (8003794 <I2C_ITError+0x1d8>)
 8003614:	635a      	str	r2, [r3, #52]	@ 0x34
 8003616:	e030      	b.n	800367a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003618:	f248 0103 	movw	r1, #32771	@ 0x8003
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fc2b 	bl	8003e78 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8e1 	bl	80037ea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b60      	cmp	r3, #96	@ 0x60
 8003632:	d01f      	beq.n	8003674 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d114      	bne.n	8003674 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b10      	cmp	r3, #16
 8003656:	d109      	bne.n	800366c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2210      	movs	r2, #16
 800365e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2220      	movs	r2, #32
 8003672:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003684:	2b00      	cmp	r3, #0
 8003686:	d039      	beq.n	80036fc <I2C_ITError+0x140>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b11      	cmp	r3, #17
 800368c:	d002      	beq.n	8003694 <I2C_ITError+0xd8>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b21      	cmp	r3, #33	@ 0x21
 8003692:	d133      	bne.n	80036fc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800369e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036a2:	d107      	bne.n	80036b4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fd ff6f 	bl	800159c <HAL_DMA_GetState>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d017      	beq.n	80036f4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c8:	4a33      	ldr	r2, [pc, #204]	@ (8003798 <I2C_ITError+0x1dc>)
 80036ca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fd ff1e 	bl	800151a <HAL_DMA_Abort_IT>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d04d      	beq.n	8003780 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036ee:	4610      	mov	r0, r2
 80036f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036f2:	e045      	b.n	8003780 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f851 	bl	800379c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036fa:	e041      	b.n	8003780 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d039      	beq.n	8003778 <I2C_ITError+0x1bc>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b12      	cmp	r3, #18
 8003708:	d002      	beq.n	8003710 <I2C_ITError+0x154>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b22      	cmp	r3, #34	@ 0x22
 800370e:	d133      	bne.n	8003778 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800371a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800371e:	d107      	bne.n	8003730 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800372e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd ff31 	bl	800159c <HAL_DMA_GetState>
 800373a:	4603      	mov	r3, r0
 800373c:	2b01      	cmp	r3, #1
 800373e:	d017      	beq.n	8003770 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003744:	4a14      	ldr	r2, [pc, #80]	@ (8003798 <I2C_ITError+0x1dc>)
 8003746:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fee0 	bl	800151a <HAL_DMA_Abort_IT>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d011      	beq.n	8003784 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800376a:	4610      	mov	r0, r2
 800376c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800376e:	e009      	b.n	8003784 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f813 	bl	800379c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003776:	e005      	b.n	8003784 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f80f 	bl	800379c <I2C_TreatErrorCallback>
  }
}
 800377e:	e002      	b.n	8003786 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003780:	bf00      	nop
 8003782:	e000      	b.n	8003786 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003784:	bf00      	nop
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	ffff0000 	.word	0xffff0000
 8003794:	080025ff 	.word	0x080025ff
 8003798:	08003833 	.word	0x08003833

0800379c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b60      	cmp	r3, #96	@ 0x60
 80037ae:	d10e      	bne.n	80037ce <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fe fdcd 	bl	8002366 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037cc:	e009      	b.n	80037e2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7fe fdb8 	bl	8002352 <HAL_I2C_ErrorCallback>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d103      	bne.n	8003808 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2200      	movs	r2, #0
 8003806:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d007      	beq.n	8003826 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	619a      	str	r2, [r3, #24]
  }
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	2200      	movs	r2, #0
 800384e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385c:	2200      	movs	r2, #0
 800385e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7ff ff9b 	bl	800379c <I2C_TreatErrorCallback>
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800387e:	e03b      	b.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	6839      	ldr	r1, [r7, #0]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f961 	bl	8003b4c <I2C_IsErrorOccurred>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e041      	b.n	8003918 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800389a:	d02d      	beq.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7fd fce2 	bl	8001264 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <I2C_WaitOnFlagUntilTimeout+0x44>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d122      	bne.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4013      	ands	r3, r2
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d113      	bne.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e00f      	b.n	8003918 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4013      	ands	r3, r2
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	429a      	cmp	r2, r3
 8003914:	d0b4      	beq.n	8003880 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800392c:	e033      	b.n	8003996 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f90a 	bl	8003b4c <I2C_IsErrorOccurred>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e031      	b.n	80039a6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003948:	d025      	beq.n	8003996 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fd fc8b 	bl	8001264 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11a      	bne.n	8003996 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d013      	beq.n	8003996 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e007      	b.n	80039a6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d1c4      	bne.n	800392e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039ba:	e02f      	b.n	8003a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f8c3 	bl	8003b4c <I2C_IsErrorOccurred>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e02d      	b.n	8003a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d0:	f7fd fc48 	bl	8001264 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11a      	bne.n	8003a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d013      	beq.n	8003a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e007      	b.n	8003a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d1c8      	bne.n	80039bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a44:	e071      	b.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f87e 	bl	8003b4c <I2C_IsErrorOccurred>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d13b      	bne.n	8003ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d138      	bne.n	8003ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d105      	bne.n	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d121      	bne.n	8003ada <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b24      	ldr	r3, [pc, #144]	@ (8003b48 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003ab8:	400b      	ands	r3, r1
 8003aba:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
 8003ad8:	e002      	b.n	8003ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003ae0:	f7fd fbc0 	bl	8001264 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d302      	bcc.n	8003af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d119      	bne.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d116      	bne.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d00f      	beq.n	8003b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f043 0220 	orr.w	r2, r3, #32
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d002      	beq.n	8003b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d083      	beq.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	fe00e800 	.word	0xfe00e800

08003b4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	@ 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d068      	beq.n	8003c4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b80:	e049      	b.n	8003c16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b88:	d045      	beq.n	8003c16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b8a:	f7fd fb6b 	bl	8001264 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d302      	bcc.n	8003ba0 <I2C_IsErrorOccurred+0x54>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d13a      	bne.n	8003c16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003baa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc2:	d121      	bne.n	8003c08 <I2C_IsErrorOccurred+0xbc>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bca:	d01d      	beq.n	8003c08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d01a      	beq.n	8003c08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003be0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003be2:	f7fd fb3f 	bl	8001264 <HAL_GetTick>
 8003be6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be8:	e00e      	b.n	8003c08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bea:	f7fd fb3b 	bl	8001264 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b19      	cmp	r3, #25
 8003bf6:	d907      	bls.n	8003c08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	f043 0320 	orr.w	r3, r3, #32
 8003bfe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c06:	e006      	b.n	8003c16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d1e9      	bne.n	8003bea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d003      	beq.n	8003c2c <I2C_IsErrorOccurred+0xe0>
 8003c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0aa      	beq.n	8003b82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	f043 0304 	orr.w	r3, r3, #4
 8003c42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f043 0308 	orr.w	r3, r3, #8
 8003c84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00b      	beq.n	8003cb8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	f043 0302 	orr.w	r3, r3, #2
 8003ca6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01c      	beq.n	8003cfa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f7ff fd92 	bl	80037ea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003d08 <I2C_IsErrorOccurred+0x1bc>)
 8003cd2:	400b      	ands	r3, r1
 8003cd4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3728      	adds	r7, #40	@ 0x28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	fe00e800 	.word	0xfe00e800

08003d0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	460b      	mov	r3, r1
 8003d18:	817b      	strh	r3, [r7, #10]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d1e:	897b      	ldrh	r3, [r7, #10]
 8003d20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d24:	7a7b      	ldrb	r3, [r7, #9]
 8003d26:	041b      	lsls	r3, r3, #16
 8003d28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	0d5b      	lsrs	r3, r3, #21
 8003d46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d4a:	4b08      	ldr	r3, [pc, #32]	@ (8003d6c <I2C_TransferConfig+0x60>)
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	ea02 0103 	and.w	r1, r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	03ff63ff 	.word	0x03ff63ff

08003d70 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d84:	4a39      	ldr	r2, [pc, #228]	@ (8003e6c <I2C_Enable_IRQ+0xfc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d032      	beq.n	8003df0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003d8e:	4a38      	ldr	r2, [pc, #224]	@ (8003e70 <I2C_Enable_IRQ+0x100>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d02d      	beq.n	8003df0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003d98:	4a36      	ldr	r2, [pc, #216]	@ (8003e74 <I2C_Enable_IRQ+0x104>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d028      	beq.n	8003df0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da03      	bge.n	8003dae <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003dac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003dae:	887b      	ldrh	r3, [r7, #2]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003dbe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003dc0:	887b      	ldrh	r3, [r7, #2]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003dd0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d103      	bne.n	8003de0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003dde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d133      	bne.n	8003e4e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f043 0320 	orr.w	r3, r3, #32
 8003dec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003dee:	e02e      	b.n	8003e4e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003df0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	da03      	bge.n	8003e00 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003dfe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e00:	887b      	ldrh	r3, [r7, #2]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003e10:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e12:	887b      	ldrh	r3, [r7, #2]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003e22:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d103      	bne.n	8003e32 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003e30:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e32:	887b      	ldrh	r3, [r7, #2]
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d103      	bne.n	8003e40 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003e3e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e40:	887b      	ldrh	r3, [r7, #2]
 8003e42:	2b40      	cmp	r3, #64	@ 0x40
 8003e44:	d103      	bne.n	8003e4e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	601a      	str	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	08002807 	.word	0x08002807
 8003e70:	08002ca9 	.word	0x08002ca9
 8003e74:	08002a0d 	.word	0x08002a0d

08003e78 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e88:	887b      	ldrh	r3, [r7, #2]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00f      	beq.n	8003eb2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003e98:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ea6:	2b28      	cmp	r3, #40	@ 0x28
 8003ea8:	d003      	beq.n	8003eb2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003eb0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003eb2:	887b      	ldrh	r3, [r7, #2]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00f      	beq.n	8003edc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003ec2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ed0:	2b28      	cmp	r3, #40	@ 0x28
 8003ed2:	d003      	beq.n	8003edc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003eda:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003edc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da03      	bge.n	8003eec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003eea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003eec:	887b      	ldrh	r3, [r7, #2]
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	d103      	bne.n	8003efa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003ef8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003efa:	887b      	ldrh	r3, [r7, #2]
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d103      	bne.n	8003f08 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f043 0320 	orr.w	r3, r3, #32
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f08:	887b      	ldrh	r3, [r7, #2]
 8003f0a:	2b40      	cmp	r3, #64	@ 0x40
 8003f0c:	d103      	bne.n	8003f16 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f14:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6819      	ldr	r1, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	400a      	ands	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d138      	bne.n	8003fbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e032      	b.n	8003fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	@ 0x24
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6819      	ldr	r1, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d139      	bne.n	8004054 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e033      	b.n	8004056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2224      	movs	r2, #36	@ 0x24
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800401c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e000      	b.n	8004056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004068:	4b04      	ldr	r3, [pc, #16]	@ (800407c <HAL_PWREx_GetVoltageRange+0x18>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40007000 	.word	0x40007000

08004080 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800408e:	d130      	bne.n	80040f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004090:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800409c:	d038      	beq.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800409e:	4b20      	ldr	r3, [pc, #128]	@ (8004120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2232      	movs	r2, #50	@ 0x32
 80040b4:	fb02 f303 	mul.w	r3, r2, r3
 80040b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004128 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0c9b      	lsrs	r3, r3, #18
 80040c0:	3301      	adds	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c4:	e002      	b.n	80040cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040cc:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d8:	d102      	bne.n	80040e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f2      	bne.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ec:	d110      	bne.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e00f      	b.n	8004112 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fe:	d007      	beq.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004100:	4b07      	ldr	r3, [pc, #28]	@ (8004120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004108:	4a05      	ldr	r2, [pc, #20]	@ (8004120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800410a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800410e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40007000 	.word	0x40007000
 8004124:	20000000 	.word	0x20000000
 8004128:	431bde83 	.word	0x431bde83

0800412c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e3ca      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413e:	4b97      	ldr	r3, [pc, #604]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004148:	4b94      	ldr	r3, [pc, #592]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80e4 	beq.w	8004328 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d007      	beq.n	8004176 <HAL_RCC_OscConfig+0x4a>
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b0c      	cmp	r3, #12
 800416a:	f040 808b 	bne.w	8004284 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b01      	cmp	r3, #1
 8004172:	f040 8087 	bne.w	8004284 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004176:	4b89      	ldr	r3, [pc, #548]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <HAL_RCC_OscConfig+0x62>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e3a2      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1a      	ldr	r2, [r3, #32]
 8004192:	4b82      	ldr	r3, [pc, #520]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <HAL_RCC_OscConfig+0x7c>
 800419e:	4b7f      	ldr	r3, [pc, #508]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041a6:	e005      	b.n	80041b4 <HAL_RCC_OscConfig+0x88>
 80041a8:	4b7c      	ldr	r3, [pc, #496]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d223      	bcs.n	8004200 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fd55 	bl	8004c6c <RCC_SetFlashLatencyFromMSIRange>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e383      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041cc:	4b73      	ldr	r3, [pc, #460]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a72      	ldr	r2, [pc, #456]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80041d2:	f043 0308 	orr.w	r3, r3, #8
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b70      	ldr	r3, [pc, #448]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	496d      	ldr	r1, [pc, #436]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ea:	4b6c      	ldr	r3, [pc, #432]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	4968      	ldr	r1, [pc, #416]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]
 80041fe:	e025      	b.n	800424c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004200:	4b66      	ldr	r3, [pc, #408]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a65      	ldr	r2, [pc, #404]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004206:	f043 0308 	orr.w	r3, r3, #8
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b63      	ldr	r3, [pc, #396]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4960      	ldr	r1, [pc, #384]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800421e:	4b5f      	ldr	r3, [pc, #380]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	495b      	ldr	r1, [pc, #364]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fd15 	bl	8004c6c <RCC_SetFlashLatencyFromMSIRange>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e343      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800424c:	f000 fc4a 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b52      	ldr	r3, [pc, #328]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	4950      	ldr	r1, [pc, #320]	@ (80043a0 <HAL_RCC_OscConfig+0x274>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
 8004268:	4a4e      	ldr	r2, [pc, #312]	@ (80043a4 <HAL_RCC_OscConfig+0x278>)
 800426a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800426c:	4b4e      	ldr	r3, [pc, #312]	@ (80043a8 <HAL_RCC_OscConfig+0x27c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7fc ffa7 	bl	80011c4 <HAL_InitTick>
 8004276:	4603      	mov	r3, r0
 8004278:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d052      	beq.n	8004326 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	e327      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d032      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800428c:	4b43      	ldr	r3, [pc, #268]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a42      	ldr	r2, [pc, #264]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004298:	f7fc ffe4 	bl	8001264 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a0:	f7fc ffe0 	bl	8001264 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e310      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b2:	4b3a      	ldr	r3, [pc, #232]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042be:	4b37      	ldr	r3, [pc, #220]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a36      	ldr	r2, [pc, #216]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80042c4:	f043 0308 	orr.w	r3, r3, #8
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b34      	ldr	r3, [pc, #208]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	4931      	ldr	r1, [pc, #196]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042dc:	4b2f      	ldr	r3, [pc, #188]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	492c      	ldr	r1, [pc, #176]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
 80042f0:	e01a      	b.n	8004328 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042f2:	4b2a      	ldr	r3, [pc, #168]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a29      	ldr	r2, [pc, #164]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042fe:	f7fc ffb1 	bl	8001264 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004306:	f7fc ffad 	bl	8001264 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e2dd      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004318:	4b20      	ldr	r3, [pc, #128]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <HAL_RCC_OscConfig+0x1da>
 8004324:	e000      	b.n	8004328 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004326:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d074      	beq.n	800441e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b08      	cmp	r3, #8
 8004338:	d005      	beq.n	8004346 <HAL_RCC_OscConfig+0x21a>
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b0c      	cmp	r3, #12
 800433e:	d10e      	bne.n	800435e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d10b      	bne.n	800435e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004346:	4b15      	ldr	r3, [pc, #84]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d064      	beq.n	800441c <HAL_RCC_OscConfig+0x2f0>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d160      	bne.n	800441c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e2ba      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x24a>
 8004368:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a0b      	ldr	r2, [pc, #44]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 800436e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e026      	b.n	80043c4 <HAL_RCC_OscConfig+0x298>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800437e:	d115      	bne.n	80043ac <HAL_RCC_OscConfig+0x280>
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a05      	ldr	r2, [pc, #20]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b03      	ldr	r3, [pc, #12]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a02      	ldr	r2, [pc, #8]	@ (800439c <HAL_RCC_OscConfig+0x270>)
 8004392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	e014      	b.n	80043c4 <HAL_RCC_OscConfig+0x298>
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	08007ab0 	.word	0x08007ab0
 80043a4:	20000000 	.word	0x20000000
 80043a8:	20000004 	.word	0x20000004
 80043ac:	4ba0      	ldr	r3, [pc, #640]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a9f      	ldr	r2, [pc, #636]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b9d      	ldr	r3, [pc, #628]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a9c      	ldr	r2, [pc, #624]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fc ff4a 	bl	8001264 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fc ff46 	bl	8001264 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	@ 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e276      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e6:	4b92      	ldr	r3, [pc, #584]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x2a8>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fc ff36 	bl	8001264 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fc ff32 	bl	8001264 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	@ 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e262      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800440e:	4b88      	ldr	r3, [pc, #544]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x2d0>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d060      	beq.n	80044ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b04      	cmp	r3, #4
 800442e:	d005      	beq.n	800443c <HAL_RCC_OscConfig+0x310>
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b0c      	cmp	r3, #12
 8004434:	d119      	bne.n	800446a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d116      	bne.n	800446a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800443c:	4b7c      	ldr	r3, [pc, #496]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_OscConfig+0x328>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e23f      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004454:	4b76      	ldr	r3, [pc, #472]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	061b      	lsls	r3, r3, #24
 8004462:	4973      	ldr	r1, [pc, #460]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004464:	4313      	orrs	r3, r2
 8004466:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004468:	e040      	b.n	80044ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d023      	beq.n	80044ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004472:	4b6f      	ldr	r3, [pc, #444]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6e      	ldr	r2, [pc, #440]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800447c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fc fef1 	bl	8001264 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004486:	f7fc feed 	bl	8001264 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e21d      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004498:	4b65      	ldr	r3, [pc, #404]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b62      	ldr	r3, [pc, #392]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	495f      	ldr	r1, [pc, #380]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
 80044b8:	e018      	b.n	80044ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a5c      	ldr	r2, [pc, #368]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80044c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fc fecd 	bl	8001264 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ce:	f7fc fec9 	bl	8001264 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e1f9      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e0:	4b53      	ldr	r3, [pc, #332]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d03c      	beq.n	8004572 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01c      	beq.n	800453a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004500:	4b4b      	ldr	r3, [pc, #300]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004506:	4a4a      	ldr	r2, [pc, #296]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7fc fea8 	bl	8001264 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004518:	f7fc fea4 	bl	8001264 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e1d4      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800452a:	4b41      	ldr	r3, [pc, #260]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 800452c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0ef      	beq.n	8004518 <HAL_RCC_OscConfig+0x3ec>
 8004538:	e01b      	b.n	8004572 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453a:	4b3d      	ldr	r3, [pc, #244]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 800453c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004540:	4a3b      	ldr	r2, [pc, #236]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454a:	f7fc fe8b 	bl	8001264 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004552:	f7fc fe87 	bl	8001264 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e1b7      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004564:	4b32      	ldr	r3, [pc, #200]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ef      	bne.n	8004552 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80a6 	beq.w	80046cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004580:	2300      	movs	r3, #0
 8004582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004584:	4b2a      	ldr	r3, [pc, #168]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004590:	4b27      	ldr	r3, [pc, #156]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	4a26      	ldr	r2, [pc, #152]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459a:	6593      	str	r3, [r2, #88]	@ 0x58
 800459c:	4b24      	ldr	r3, [pc, #144]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a8:	2301      	movs	r3, #1
 80045aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ac:	4b21      	ldr	r3, [pc, #132]	@ (8004634 <HAL_RCC_OscConfig+0x508>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d118      	bne.n	80045ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004634 <HAL_RCC_OscConfig+0x508>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004634 <HAL_RCC_OscConfig+0x508>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c4:	f7fc fe4e 	bl	8001264 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045cc:	f7fc fe4a 	bl	8001264 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e17a      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045de:	4b15      	ldr	r3, [pc, #84]	@ (8004634 <HAL_RCC_OscConfig+0x508>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d108      	bne.n	8004604 <HAL_RCC_OscConfig+0x4d8>
 80045f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004602:	e029      	b.n	8004658 <HAL_RCC_OscConfig+0x52c>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b05      	cmp	r3, #5
 800460a:	d115      	bne.n	8004638 <HAL_RCC_OscConfig+0x50c>
 800460c:	4b08      	ldr	r3, [pc, #32]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004612:	4a07      	ldr	r2, [pc, #28]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004614:	f043 0304 	orr.w	r3, r3, #4
 8004618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800461c:	4b04      	ldr	r3, [pc, #16]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004622:	4a03      	ldr	r2, [pc, #12]	@ (8004630 <HAL_RCC_OscConfig+0x504>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800462c:	e014      	b.n	8004658 <HAL_RCC_OscConfig+0x52c>
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	40007000 	.word	0x40007000
 8004638:	4b9c      	ldr	r3, [pc, #624]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463e:	4a9b      	ldr	r2, [pc, #620]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004648:	4b98      	ldr	r3, [pc, #608]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464e:	4a97      	ldr	r2, [pc, #604]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 8004650:	f023 0304 	bic.w	r3, r3, #4
 8004654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d016      	beq.n	800468e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004660:	f7fc fe00 	bl	8001264 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004666:	e00a      	b.n	800467e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7fc fdfc 	bl	8001264 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e12a      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800467e:	4b8b      	ldr	r3, [pc, #556]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0ed      	beq.n	8004668 <HAL_RCC_OscConfig+0x53c>
 800468c:	e015      	b.n	80046ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468e:	f7fc fde9 	bl	8001264 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004694:	e00a      	b.n	80046ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004696:	f7fc fde5 	bl	8001264 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e113      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ac:	4b7f      	ldr	r3, [pc, #508]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1ed      	bne.n	8004696 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ba:	7ffb      	ldrb	r3, [r7, #31]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d105      	bne.n	80046cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c0:	4b7a      	ldr	r3, [pc, #488]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c4:	4a79      	ldr	r2, [pc, #484]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 80046c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80fe 	beq.w	80048d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046da:	2b02      	cmp	r3, #2
 80046dc:	f040 80d0 	bne.w	8004880 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046e0:	4b72      	ldr	r3, [pc, #456]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0203 	and.w	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d130      	bne.n	8004756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	3b01      	subs	r3, #1
 8004700:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d127      	bne.n	8004756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004710:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d11f      	bne.n	8004756 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004720:	2a07      	cmp	r2, #7
 8004722:	bf14      	ite	ne
 8004724:	2201      	movne	r2, #1
 8004726:	2200      	moveq	r2, #0
 8004728:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800472a:	4293      	cmp	r3, r2
 800472c:	d113      	bne.n	8004756 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	3b01      	subs	r3, #1
 800473c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d109      	bne.n	8004756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	3b01      	subs	r3, #1
 8004750:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d06e      	beq.n	8004834 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b0c      	cmp	r3, #12
 800475a:	d069      	beq.n	8004830 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800475c:	4b53      	ldr	r3, [pc, #332]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004768:	4b50      	ldr	r3, [pc, #320]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0ad      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004778:	4b4c      	ldr	r3, [pc, #304]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a4b      	ldr	r2, [pc, #300]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 800477e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004782:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004784:	f7fc fd6e 	bl	8001264 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fc fd6a 	bl	8001264 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e09a      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479e:	4b43      	ldr	r3, [pc, #268]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047aa:	4b40      	ldr	r3, [pc, #256]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	4b40      	ldr	r3, [pc, #256]	@ (80048b0 <HAL_RCC_OscConfig+0x784>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047ba:	3a01      	subs	r2, #1
 80047bc:	0112      	lsls	r2, r2, #4
 80047be:	4311      	orrs	r1, r2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047c4:	0212      	lsls	r2, r2, #8
 80047c6:	4311      	orrs	r1, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047cc:	0852      	lsrs	r2, r2, #1
 80047ce:	3a01      	subs	r2, #1
 80047d0:	0552      	lsls	r2, r2, #21
 80047d2:	4311      	orrs	r1, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80047d8:	0852      	lsrs	r2, r2, #1
 80047da:	3a01      	subs	r2, #1
 80047dc:	0652      	lsls	r2, r2, #25
 80047de:	4311      	orrs	r1, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047e4:	0912      	lsrs	r2, r2, #4
 80047e6:	0452      	lsls	r2, r2, #17
 80047e8:	430a      	orrs	r2, r1
 80047ea:	4930      	ldr	r1, [pc, #192]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047f0:	4b2e      	ldr	r3, [pc, #184]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a2d      	ldr	r2, [pc, #180]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 80047f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047fc:	4b2b      	ldr	r3, [pc, #172]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a2a      	ldr	r2, [pc, #168]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 8004802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004808:	f7fc fd2c 	bl	8001264 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004810:	f7fc fd28 	bl	8001264 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e058      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004822:	4b22      	ldr	r3, [pc, #136]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800482e:	e050      	b.n	80048d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e04f      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004834:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d148      	bne.n	80048d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004840:	4b1a      	ldr	r3, [pc, #104]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a19      	ldr	r2, [pc, #100]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 8004846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800484a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800484c:	4b17      	ldr	r3, [pc, #92]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a16      	ldr	r2, [pc, #88]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 8004852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004856:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004858:	f7fc fd04 	bl	8001264 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fc fd00 	bl	8001264 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e030      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004872:	4b0e      	ldr	r3, [pc, #56]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x734>
 800487e:	e028      	b.n	80048d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	2b0c      	cmp	r3, #12
 8004884:	d023      	beq.n	80048ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	4b09      	ldr	r3, [pc, #36]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a08      	ldr	r2, [pc, #32]	@ (80048ac <HAL_RCC_OscConfig+0x780>)
 800488c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fc fce7 	bl	8001264 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004898:	e00c      	b.n	80048b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489a:	f7fc fce3 	bl	8001264 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d905      	bls.n	80048b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e013      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
 80048ac:	40021000 	.word	0x40021000
 80048b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b4:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <HAL_RCC_OscConfig+0x7b0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1ec      	bne.n	800489a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_RCC_OscConfig+0x7b0>)
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	4905      	ldr	r1, [pc, #20]	@ (80048dc <HAL_RCC_OscConfig+0x7b0>)
 80048c6:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <HAL_RCC_OscConfig+0x7b4>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	60cb      	str	r3, [r1, #12]
 80048cc:	e001      	b.n	80048d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	feeefffc 	.word	0xfeeefffc

080048e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0e7      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f8:	4b75      	ldr	r3, [pc, #468]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1ec>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d910      	bls.n	8004928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004906:	4b72      	ldr	r3, [pc, #456]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 0207 	bic.w	r2, r3, #7
 800490e:	4970      	ldr	r1, [pc, #448]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	4b6e      	ldr	r3, [pc, #440]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0cf      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d010      	beq.n	8004956 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	4b66      	ldr	r3, [pc, #408]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004940:	429a      	cmp	r2, r3
 8004942:	d908      	bls.n	8004956 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004944:	4b63      	ldr	r3, [pc, #396]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4960      	ldr	r1, [pc, #384]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04c      	beq.n	80049fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b03      	cmp	r3, #3
 8004968:	d107      	bne.n	800497a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d121      	bne.n	80049ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e0a6      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d107      	bne.n	8004992 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004982:	4b54      	ldr	r3, [pc, #336]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d115      	bne.n	80049ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e09a      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800499a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e08e      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049aa:	4b4a      	ldr	r3, [pc, #296]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e086      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049ba:	4b46      	ldr	r3, [pc, #280]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f023 0203 	bic.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4943      	ldr	r1, [pc, #268]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049cc:	f7fc fc4a 	bl	8001264 <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d4:	f7fc fc46 	bl	8001264 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e06e      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ea:	4b3a      	ldr	r3, [pc, #232]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 020c 	and.w	r2, r3, #12
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d1eb      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d010      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	4b31      	ldr	r3, [pc, #196]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d208      	bcs.n	8004a2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a18:	4b2e      	ldr	r3, [pc, #184]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	492b      	ldr	r1, [pc, #172]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2a:	4b29      	ldr	r3, [pc, #164]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d210      	bcs.n	8004a5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a38:	4b25      	ldr	r3, [pc, #148]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 0207 	bic.w	r2, r3, #7
 8004a40:	4923      	ldr	r1, [pc, #140]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a48:	4b21      	ldr	r3, [pc, #132]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e036      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a66:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	4918      	ldr	r1, [pc, #96]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d009      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a84:	4b13      	ldr	r3, [pc, #76]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	4910      	ldr	r1, [pc, #64]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a98:	f000 f824 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	490b      	ldr	r1, [pc, #44]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1f4>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab4:	4a09      	ldr	r2, [pc, #36]	@ (8004adc <HAL_RCC_ClockConfig+0x1f8>)
 8004ab6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ab8:	4b09      	ldr	r3, [pc, #36]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1fc>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fc fb81 	bl	80011c4 <HAL_InitTick>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40022000 	.word	0x40022000
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	08007ab0 	.word	0x08007ab0
 8004adc:	20000000 	.word	0x20000000
 8004ae0:	20000004 	.word	0x20000004

08004ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b089      	sub	sp, #36	@ 0x24
 8004ae8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	2300      	movs	r3, #0
 8004af0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af2:	4b3e      	ldr	r3, [pc, #248]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004afc:	4b3b      	ldr	r3, [pc, #236]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0x34>
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d121      	bne.n	8004b56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d11e      	bne.n	8004b56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b18:	4b34      	ldr	r3, [pc, #208]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b24:	4b31      	ldr	r3, [pc, #196]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b2a:	0a1b      	lsrs	r3, r3, #8
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	e005      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b34:	4b2d      	ldr	r3, [pc, #180]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b40:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10d      	bne.n	8004b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d102      	bne.n	8004b62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b5c:	4b25      	ldr	r3, [pc, #148]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	e004      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b68:	4b23      	ldr	r3, [pc, #140]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	2b0c      	cmp	r3, #12
 8004b70:	d134      	bne.n	8004bdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b72:	4b1e      	ldr	r3, [pc, #120]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d003      	beq.n	8004b8a <HAL_RCC_GetSysClockFreq+0xa6>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d003      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0xac>
 8004b88:	e005      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b8c:	617b      	str	r3, [r7, #20]
      break;
 8004b8e:	e005      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b90:	4b19      	ldr	r3, [pc, #100]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b92:	617b      	str	r3, [r7, #20]
      break;
 8004b94:	e002      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	617b      	str	r3, [r7, #20]
      break;
 8004b9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b9c:	4b13      	ldr	r3, [pc, #76]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004baa:	4b10      	ldr	r3, [pc, #64]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	fb03 f202 	mul.w	r2, r3, r2
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	0e5b      	lsrs	r3, r3, #25
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3724      	adds	r7, #36	@ 0x24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	08007ac8 	.word	0x08007ac8
 8004bf4:	00f42400 	.word	0x00f42400
 8004bf8:	007a1200 	.word	0x007a1200

08004bfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c00:	4b03      	ldr	r3, [pc, #12]	@ (8004c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c02:	681b      	ldr	r3, [r3, #0]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	20000000 	.word	0x20000000

08004c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c18:	f7ff fff0 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4904      	ldr	r1, [pc, #16]	@ (8004c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	08007ac0 	.word	0x08007ac0

08004c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c44:	f7ff ffda 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b06      	ldr	r3, [pc, #24]	@ (8004c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	0adb      	lsrs	r3, r3, #11
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	4904      	ldr	r1, [pc, #16]	@ (8004c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c56:	5ccb      	ldrb	r3, [r1, r3]
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40021000 	.word	0x40021000
 8004c68:	08007ac0 	.word	0x08007ac0

08004c6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c78:	4b2a      	ldr	r3, [pc, #168]	@ (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c84:	f7ff f9ee 	bl	8004064 <HAL_PWREx_GetVoltageRange>
 8004c88:	6178      	str	r0, [r7, #20]
 8004c8a:	e014      	b.n	8004cb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c8c:	4b25      	ldr	r3, [pc, #148]	@ (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c90:	4a24      	ldr	r2, [pc, #144]	@ (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c98:	4b22      	ldr	r3, [pc, #136]	@ (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ca4:	f7ff f9de 	bl	8004064 <HAL_PWREx_GetVoltageRange>
 8004ca8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004caa:	4b1e      	ldr	r3, [pc, #120]	@ (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	4a1d      	ldr	r2, [pc, #116]	@ (8004d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cbc:	d10b      	bne.n	8004cd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b80      	cmp	r3, #128	@ 0x80
 8004cc2:	d919      	bls.n	8004cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8004cc8:	d902      	bls.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cca:	2302      	movs	r3, #2
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e013      	b.n	8004cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	e010      	b.n	8004cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b80      	cmp	r3, #128	@ 0x80
 8004cda:	d902      	bls.n	8004ce2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cdc:	2303      	movs	r3, #3
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e00a      	b.n	8004cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b80      	cmp	r3, #128	@ 0x80
 8004ce6:	d102      	bne.n	8004cee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ce8:	2302      	movs	r3, #2
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	e004      	b.n	8004cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b70      	cmp	r3, #112	@ 0x70
 8004cf2:	d101      	bne.n	8004cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f023 0207 	bic.w	r2, r3, #7
 8004d00:	4909      	ldr	r1, [pc, #36]	@ (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d08:	4b07      	ldr	r3, [pc, #28]	@ (8004d28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d001      	beq.n	8004d1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40021000 	.word	0x40021000
 8004d28:	40022000 	.word	0x40022000

08004d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d34:	2300      	movs	r3, #0
 8004d36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d38:	2300      	movs	r3, #0
 8004d3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d041      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d50:	d02a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d56:	d824      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d5c:	d008      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d62:	d81e      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d6c:	d010      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d6e:	e018      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d70:	4b86      	ldr	r3, [pc, #536]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4a85      	ldr	r2, [pc, #532]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d7c:	e015      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fabb 	bl	8005300 <RCCEx_PLLSAI1_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d8e:	e00c      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3320      	adds	r3, #32
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fba6 	bl	80054e8 <RCCEx_PLLSAI2_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004da0:	e003      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	74fb      	strb	r3, [r7, #19]
      break;
 8004da6:	e000      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004daa:	7cfb      	ldrb	r3, [r7, #19]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10b      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db0:	4b76      	ldr	r3, [pc, #472]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dbe:	4973      	ldr	r1, [pc, #460]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004dc6:	e001      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d041      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ddc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004de0:	d02a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004de2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004de6:	d824      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004de8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dec:	d008      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004df2:	d81e      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dfc:	d010      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dfe:	e018      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e00:	4b62      	ldr	r3, [pc, #392]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4a61      	ldr	r2, [pc, #388]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e0c:	e015      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3304      	adds	r3, #4
 8004e12:	2100      	movs	r1, #0
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fa73 	bl	8005300 <RCCEx_PLLSAI1_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e1e:	e00c      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3320      	adds	r3, #32
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fb5e 	bl	80054e8 <RCCEx_PLLSAI2_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e30:	e003      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	74fb      	strb	r3, [r7, #19]
      break;
 8004e36:	e000      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e3a:	7cfb      	ldrb	r3, [r7, #19]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e40:	4b52      	ldr	r3, [pc, #328]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e4e:	494f      	ldr	r1, [pc, #316]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e56:	e001      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	7cfb      	ldrb	r3, [r7, #19]
 8004e5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80a0 	beq.w	8004faa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e6e:	4b47      	ldr	r3, [pc, #284]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00d      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e84:	4b41      	ldr	r3, [pc, #260]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e88:	4a40      	ldr	r2, [pc, #256]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e90:	4b3e      	ldr	r3, [pc, #248]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a3a      	ldr	r2, [pc, #232]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eac:	f7fc f9da 	bl	8001264 <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eb2:	e009      	b.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb4:	f7fc f9d6 	bl	8001264 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d902      	bls.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	74fb      	strb	r3, [r7, #19]
        break;
 8004ec6:	e005      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ec8:	4b31      	ldr	r3, [pc, #196]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0ef      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d15c      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eda:	4b2c      	ldr	r3, [pc, #176]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01f      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d019      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ef8:	4b24      	ldr	r3, [pc, #144]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f04:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0a:	4a20      	ldr	r2, [pc, #128]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f14:	4b1d      	ldr	r3, [pc, #116]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f24:	4a19      	ldr	r2, [pc, #100]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d016      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f36:	f7fc f995 	bl	8001264 <HAL_GetTick>
 8004f3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3c:	e00b      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3e:	f7fc f991 	bl	8001264 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d902      	bls.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	74fb      	strb	r3, [r7, #19]
            break;
 8004f54:	e006      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f56:	4b0d      	ldr	r3, [pc, #52]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0ec      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f6a:	4b08      	ldr	r3, [pc, #32]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f7a:	4904      	ldr	r1, [pc, #16]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f82:	e009      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	74bb      	strb	r3, [r7, #18]
 8004f88:	e006      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f98:	7c7b      	ldrb	r3, [r7, #17]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d105      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f9e:	4b9e      	ldr	r3, [pc, #632]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa2:	4a9d      	ldr	r2, [pc, #628]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fa8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fb6:	4b98      	ldr	r3, [pc, #608]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fbc:	f023 0203 	bic.w	r2, r3, #3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc4:	4994      	ldr	r1, [pc, #592]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd8:	4b8f      	ldr	r3, [pc, #572]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fde:	f023 020c 	bic.w	r2, r3, #12
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe6:	498c      	ldr	r1, [pc, #560]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ffa:	4b87      	ldr	r3, [pc, #540]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005000:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	4983      	ldr	r1, [pc, #524]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800501c:	4b7e      	ldr	r3, [pc, #504]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005022:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502a:	497b      	ldr	r1, [pc, #492]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800503e:	4b76      	ldr	r3, [pc, #472]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005044:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504c:	4972      	ldr	r1, [pc, #456]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005060:	4b6d      	ldr	r3, [pc, #436]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005066:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506e:	496a      	ldr	r1, [pc, #424]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005082:	4b65      	ldr	r3, [pc, #404]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005088:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005090:	4961      	ldr	r1, [pc, #388]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050a4:	4b5c      	ldr	r3, [pc, #368]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b2:	4959      	ldr	r1, [pc, #356]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050c6:	4b54      	ldr	r3, [pc, #336]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d4:	4950      	ldr	r1, [pc, #320]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f6:	4948      	ldr	r1, [pc, #288]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800510a:	4b43      	ldr	r3, [pc, #268]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005110:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005118:	493f      	ldr	r1, [pc, #252]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d028      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800512c:	4b3a      	ldr	r3, [pc, #232]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005132:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800513a:	4937      	ldr	r1, [pc, #220]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005146:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800514a:	d106      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800514c:	4b32      	ldr	r3, [pc, #200]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4a31      	ldr	r2, [pc, #196]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005156:	60d3      	str	r3, [r2, #12]
 8005158:	e011      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800515e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005162:	d10c      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3304      	adds	r3, #4
 8005168:	2101      	movs	r1, #1
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f8c8 	bl	8005300 <RCCEx_PLLSAI1_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800517a:	7cfb      	ldrb	r3, [r7, #19]
 800517c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d028      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800518a:	4b23      	ldr	r3, [pc, #140]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005190:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005198:	491f      	ldr	r1, [pc, #124]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051a8:	d106      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051b4:	60d3      	str	r3, [r2, #12]
 80051b6:	e011      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051c0:	d10c      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3304      	adds	r3, #4
 80051c6:	2101      	movs	r1, #1
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 f899 	bl	8005300 <RCCEx_PLLSAI1_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051d8:	7cfb      	ldrb	r3, [r7, #19]
 80051da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d02b      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f6:	4908      	ldr	r1, [pc, #32]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005206:	d109      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005208:	4b03      	ldr	r3, [pc, #12]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4a02      	ldr	r2, [pc, #8]	@ (8005218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005212:	60d3      	str	r3, [r2, #12]
 8005214:	e014      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005216:	bf00      	nop
 8005218:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005220:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005224:	d10c      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	2101      	movs	r1, #1
 800522c:	4618      	mov	r0, r3
 800522e:	f000 f867 	bl	8005300 <RCCEx_PLLSAI1_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005236:	7cfb      	ldrb	r3, [r7, #19]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800523c:	7cfb      	ldrb	r3, [r7, #19]
 800523e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d02f      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800524c:	4b2b      	ldr	r3, [pc, #172]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005252:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800525a:	4928      	ldr	r1, [pc, #160]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800526a:	d10d      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3304      	adds	r3, #4
 8005270:	2102      	movs	r1, #2
 8005272:	4618      	mov	r0, r3
 8005274:	f000 f844 	bl	8005300 <RCCEx_PLLSAI1_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800527c:	7cfb      	ldrb	r3, [r7, #19]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d014      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	74bb      	strb	r3, [r7, #18]
 8005286:	e011      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800528c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005290:	d10c      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3320      	adds	r3, #32
 8005296:	2102      	movs	r1, #2
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f925 	bl	80054e8 <RCCEx_PLLSAI2_Config>
 800529e:	4603      	mov	r3, r0
 80052a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052a8:	7cfb      	ldrb	r3, [r7, #19]
 80052aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052b8:	4b10      	ldr	r3, [pc, #64]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052c6:	490d      	ldr	r1, [pc, #52]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052da:	4b08      	ldr	r3, [pc, #32]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ea:	4904      	ldr	r1, [pc, #16]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40021000 	.word	0x40021000

08005300 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800530e:	4b75      	ldr	r3, [pc, #468]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d018      	beq.n	800534c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800531a:	4b72      	ldr	r3, [pc, #456]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0203 	and.w	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d10d      	bne.n	8005346 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
       ||
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005332:	4b6c      	ldr	r3, [pc, #432]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
       ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d047      	beq.n	80053d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	73fb      	strb	r3, [r7, #15]
 800534a:	e044      	b.n	80053d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d018      	beq.n	8005386 <RCCEx_PLLSAI1_Config+0x86>
 8005354:	2b03      	cmp	r3, #3
 8005356:	d825      	bhi.n	80053a4 <RCCEx_PLLSAI1_Config+0xa4>
 8005358:	2b01      	cmp	r3, #1
 800535a:	d002      	beq.n	8005362 <RCCEx_PLLSAI1_Config+0x62>
 800535c:	2b02      	cmp	r3, #2
 800535e:	d009      	beq.n	8005374 <RCCEx_PLLSAI1_Config+0x74>
 8005360:	e020      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005362:	4b60      	ldr	r3, [pc, #384]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d11d      	bne.n	80053aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005372:	e01a      	b.n	80053aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005374:	4b5b      	ldr	r3, [pc, #364]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537c:	2b00      	cmp	r3, #0
 800537e:	d116      	bne.n	80053ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005384:	e013      	b.n	80053ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005386:	4b57      	ldr	r3, [pc, #348]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10f      	bne.n	80053b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005392:	4b54      	ldr	r3, [pc, #336]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053a2:	e006      	b.n	80053b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
      break;
 80053a8:	e004      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053aa:	bf00      	nop
 80053ac:	e002      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053ae:	bf00      	nop
 80053b0:	e000      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053ba:	4b4a      	ldr	r3, [pc, #296]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6819      	ldr	r1, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	430b      	orrs	r3, r1
 80053d0:	4944      	ldr	r1, [pc, #272]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d17d      	bne.n	80054d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053dc:	4b41      	ldr	r3, [pc, #260]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a40      	ldr	r2, [pc, #256]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e8:	f7fb ff3c 	bl	8001264 <HAL_GetTick>
 80053ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053ee:	e009      	b.n	8005404 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053f0:	f7fb ff38 	bl	8001264 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d902      	bls.n	8005404 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	73fb      	strb	r3, [r7, #15]
        break;
 8005402:	e005      	b.n	8005410 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005404:	4b37      	ldr	r3, [pc, #220]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1ef      	bne.n	80053f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d160      	bne.n	80054d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d111      	bne.n	8005440 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800541c:	4b31      	ldr	r3, [pc, #196]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6892      	ldr	r2, [r2, #8]
 800542c:	0211      	lsls	r1, r2, #8
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68d2      	ldr	r2, [r2, #12]
 8005432:	0912      	lsrs	r2, r2, #4
 8005434:	0452      	lsls	r2, r2, #17
 8005436:	430a      	orrs	r2, r1
 8005438:	492a      	ldr	r1, [pc, #168]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543a:	4313      	orrs	r3, r2
 800543c:	610b      	str	r3, [r1, #16]
 800543e:	e027      	b.n	8005490 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d112      	bne.n	800546c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005446:	4b27      	ldr	r3, [pc, #156]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800544e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6892      	ldr	r2, [r2, #8]
 8005456:	0211      	lsls	r1, r2, #8
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6912      	ldr	r2, [r2, #16]
 800545c:	0852      	lsrs	r2, r2, #1
 800545e:	3a01      	subs	r2, #1
 8005460:	0552      	lsls	r2, r2, #21
 8005462:	430a      	orrs	r2, r1
 8005464:	491f      	ldr	r1, [pc, #124]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005466:	4313      	orrs	r3, r2
 8005468:	610b      	str	r3, [r1, #16]
 800546a:	e011      	b.n	8005490 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800546c:	4b1d      	ldr	r3, [pc, #116]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005474:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6892      	ldr	r2, [r2, #8]
 800547c:	0211      	lsls	r1, r2, #8
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6952      	ldr	r2, [r2, #20]
 8005482:	0852      	lsrs	r2, r2, #1
 8005484:	3a01      	subs	r2, #1
 8005486:	0652      	lsls	r2, r2, #25
 8005488:	430a      	orrs	r2, r1
 800548a:	4916      	ldr	r1, [pc, #88]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800548c:	4313      	orrs	r3, r2
 800548e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005490:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a13      	ldr	r2, [pc, #76]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005496:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800549a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549c:	f7fb fee2 	bl	8001264 <HAL_GetTick>
 80054a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054a2:	e009      	b.n	80054b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054a4:	f7fb fede 	bl	8001264 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d902      	bls.n	80054b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	73fb      	strb	r3, [r7, #15]
          break;
 80054b6:	e005      	b.n	80054c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054b8:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0ef      	beq.n	80054a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054ca:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	4904      	ldr	r1, [pc, #16]	@ (80054e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40021000 	.word	0x40021000

080054e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054f6:	4b6a      	ldr	r3, [pc, #424]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d018      	beq.n	8005534 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005502:	4b67      	ldr	r3, [pc, #412]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0203 	and.w	r2, r3, #3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d10d      	bne.n	800552e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
       ||
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800551a:	4b61      	ldr	r3, [pc, #388]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
       ||
 800552a:	429a      	cmp	r2, r3
 800552c:	d047      	beq.n	80055be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
 8005532:	e044      	b.n	80055be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d018      	beq.n	800556e <RCCEx_PLLSAI2_Config+0x86>
 800553c:	2b03      	cmp	r3, #3
 800553e:	d825      	bhi.n	800558c <RCCEx_PLLSAI2_Config+0xa4>
 8005540:	2b01      	cmp	r3, #1
 8005542:	d002      	beq.n	800554a <RCCEx_PLLSAI2_Config+0x62>
 8005544:	2b02      	cmp	r3, #2
 8005546:	d009      	beq.n	800555c <RCCEx_PLLSAI2_Config+0x74>
 8005548:	e020      	b.n	800558c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800554a:	4b55      	ldr	r3, [pc, #340]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d11d      	bne.n	8005592 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800555a:	e01a      	b.n	8005592 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800555c:	4b50      	ldr	r3, [pc, #320]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005564:	2b00      	cmp	r3, #0
 8005566:	d116      	bne.n	8005596 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800556c:	e013      	b.n	8005596 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800556e:	4b4c      	ldr	r3, [pc, #304]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10f      	bne.n	800559a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800557a:	4b49      	ldr	r3, [pc, #292]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800558a:	e006      	b.n	800559a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
      break;
 8005590:	e004      	b.n	800559c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005592:	bf00      	nop
 8005594:	e002      	b.n	800559c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005596:	bf00      	nop
 8005598:	e000      	b.n	800559c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800559a:	bf00      	nop
    }

    if(status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10d      	bne.n	80055be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055a2:	4b3f      	ldr	r3, [pc, #252]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6819      	ldr	r1, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	430b      	orrs	r3, r1
 80055b8:	4939      	ldr	r1, [pc, #228]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d167      	bne.n	8005694 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055c4:	4b36      	ldr	r3, [pc, #216]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a35      	ldr	r2, [pc, #212]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d0:	f7fb fe48 	bl	8001264 <HAL_GetTick>
 80055d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055d6:	e009      	b.n	80055ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055d8:	f7fb fe44 	bl	8001264 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d902      	bls.n	80055ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	73fb      	strb	r3, [r7, #15]
        break;
 80055ea:	e005      	b.n	80055f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055ec:	4b2c      	ldr	r3, [pc, #176]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1ef      	bne.n	80055d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d14a      	bne.n	8005694 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d111      	bne.n	8005628 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005604:	4b26      	ldr	r3, [pc, #152]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800560c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6892      	ldr	r2, [r2, #8]
 8005614:	0211      	lsls	r1, r2, #8
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68d2      	ldr	r2, [r2, #12]
 800561a:	0912      	lsrs	r2, r2, #4
 800561c:	0452      	lsls	r2, r2, #17
 800561e:	430a      	orrs	r2, r1
 8005620:	491f      	ldr	r1, [pc, #124]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005622:	4313      	orrs	r3, r2
 8005624:	614b      	str	r3, [r1, #20]
 8005626:	e011      	b.n	800564c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005628:	4b1d      	ldr	r3, [pc, #116]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005630:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6892      	ldr	r2, [r2, #8]
 8005638:	0211      	lsls	r1, r2, #8
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6912      	ldr	r2, [r2, #16]
 800563e:	0852      	lsrs	r2, r2, #1
 8005640:	3a01      	subs	r2, #1
 8005642:	0652      	lsls	r2, r2, #25
 8005644:	430a      	orrs	r2, r1
 8005646:	4916      	ldr	r1, [pc, #88]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005648:	4313      	orrs	r3, r2
 800564a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800564c:	4b14      	ldr	r3, [pc, #80]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a13      	ldr	r2, [pc, #76]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005656:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005658:	f7fb fe04 	bl	8001264 <HAL_GetTick>
 800565c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800565e:	e009      	b.n	8005674 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005660:	f7fb fe00 	bl	8001264 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d902      	bls.n	8005674 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	73fb      	strb	r3, [r7, #15]
          break;
 8005672:	e005      	b.n	8005680 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005674:	4b0a      	ldr	r3, [pc, #40]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0ef      	beq.n	8005660 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005686:	4b06      	ldr	r3, [pc, #24]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	4904      	ldr	r1, [pc, #16]	@ (80056a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005690:	4313      	orrs	r3, r2
 8005692:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40021000 	.word	0x40021000

080056a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e040      	b.n	8005738 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fb fc1c 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	@ 0x24
 80056d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fedc 	bl	80064a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fc21 	bl	8005f38 <UART_SetConfig>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e01b      	b.n	8005738 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800570e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800571e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 ff5b 	bl	80065ec <UART_CheckIdleState>
 8005736:	4603      	mov	r3, r0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	@ 0x28
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005754:	2b20      	cmp	r3, #32
 8005756:	d177      	bne.n	8005848 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_UART_Transmit+0x24>
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e070      	b.n	800584a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2221      	movs	r2, #33	@ 0x21
 8005774:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005776:	f7fb fd75 	bl	8001264 <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	88fa      	ldrh	r2, [r7, #6]
 8005780:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005794:	d108      	bne.n	80057a8 <HAL_UART_Transmit+0x68>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d104      	bne.n	80057a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	e003      	b.n	80057b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057b0:	e02f      	b.n	8005812 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	2180      	movs	r1, #128	@ 0x80
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 ffbd 	bl	800673c <UART_WaitOnFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e03b      	b.n	800584a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	881a      	ldrh	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057e4:	b292      	uxth	r2, r2
 80057e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	3302      	adds	r3, #2
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	e007      	b.n	8005800 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	781a      	ldrb	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3301      	adds	r3, #1
 80057fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1c9      	bne.n	80057b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2200      	movs	r2, #0
 8005826:	2140      	movs	r1, #64	@ 0x40
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 ff87 	bl	800673c <UART_WaitOnFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e005      	b.n	800584a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2220      	movs	r2, #32
 8005842:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	@ 0x28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005868:	2b20      	cmp	r3, #32
 800586a:	d137      	bne.n	80058dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_UART_Receive_IT+0x24>
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e030      	b.n	80058de <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a18      	ldr	r2, [pc, #96]	@ (80058e8 <HAL_UART_Receive_IT+0x94>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d01f      	beq.n	80058cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d018      	beq.n	80058cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	613b      	str	r3, [r7, #16]
   return(result);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	623b      	str	r3, [r7, #32]
 80058ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	69f9      	ldr	r1, [r7, #28]
 80058be:	6a3a      	ldr	r2, [r7, #32]
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e6      	bne.n	800589a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	461a      	mov	r2, r3
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 ffa0 	bl	8006818 <UART_Start_Receive_IT>
 80058d8:	4603      	mov	r3, r0
 80058da:	e000      	b.n	80058de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058dc:	2302      	movs	r3, #2
  }
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3728      	adds	r7, #40	@ 0x28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40008000 	.word	0x40008000

080058ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b0ba      	sub	sp, #232	@ 0xe8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005912:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005916:	f640 030f 	movw	r3, #2063	@ 0x80f
 800591a:	4013      	ands	r3, r2
 800591c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d115      	bne.n	8005954 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00f      	beq.n	8005954 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d009      	beq.n	8005954 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 82ca 	beq.w	8005ede <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
      }
      return;
 8005952:	e2c4      	b.n	8005ede <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8117 	beq.w	8005b8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800595e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800596a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800596e:	4b85      	ldr	r3, [pc, #532]	@ (8005b84 <HAL_UART_IRQHandler+0x298>)
 8005970:	4013      	ands	r3, r2
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 810a 	beq.w	8005b8c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d011      	beq.n	80059a8 <HAL_UART_IRQHandler+0xbc>
 8005984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00b      	beq.n	80059a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2201      	movs	r2, #1
 8005996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800599e:	f043 0201 	orr.w	r2, r3, #1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d011      	beq.n	80059d8 <HAL_UART_IRQHandler+0xec>
 80059b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00b      	beq.n	80059d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2202      	movs	r2, #2
 80059c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ce:	f043 0204 	orr.w	r2, r3, #4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d011      	beq.n	8005a08 <HAL_UART_IRQHandler+0x11c>
 80059e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2204      	movs	r2, #4
 80059f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059fe:	f043 0202 	orr.w	r2, r3, #2
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d017      	beq.n	8005a44 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d105      	bne.n	8005a2c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2208      	movs	r2, #8
 8005a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a3a:	f043 0208 	orr.w	r2, r3, #8
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d012      	beq.n	8005a76 <HAL_UART_IRQHandler+0x18a>
 8005a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00c      	beq.n	8005a76 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a6c:	f043 0220 	orr.w	r2, r3, #32
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8230 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abe:	2b40      	cmp	r3, #64	@ 0x40
 8005ac0:	d005      	beq.n	8005ace <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ac6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d04f      	beq.n	8005b6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 ff68 	bl	80069a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	d141      	bne.n	8005b66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3308      	adds	r3, #8
 8005b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1d9      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d013      	beq.n	8005b5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b3a:	4a13      	ldr	r2, [pc, #76]	@ (8005b88 <HAL_UART_IRQHandler+0x29c>)
 8005b3c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fb fce9 	bl	800151a <HAL_DMA_Abort_IT>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d017      	beq.n	8005b7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	e00f      	b.n	8005b7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f9d4 	bl	8005f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	e00b      	b.n	8005b7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f9d0 	bl	8005f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6c:	e007      	b.n	8005b7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f9cc 	bl	8005f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005b7c:	e1b1      	b.n	8005ee2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7e:	bf00      	nop
    return;
 8005b80:	e1af      	b.n	8005ee2 <HAL_UART_IRQHandler+0x5f6>
 8005b82:	bf00      	nop
 8005b84:	04000120 	.word	0x04000120
 8005b88:	08006a6d 	.word	0x08006a6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	f040 816a 	bne.w	8005e6a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b9a:	f003 0310 	and.w	r3, r3, #16
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 8163 	beq.w	8005e6a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 815c 	beq.w	8005e6a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2210      	movs	r2, #16
 8005bb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc4:	2b40      	cmp	r3, #64	@ 0x40
 8005bc6:	f040 80d4 	bne.w	8005d72 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 80ad 	beq.w	8005d3a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bea:	429a      	cmp	r2, r3
 8005bec:	f080 80a5 	bcs.w	8005d3a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bf6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f040 8086 	bne.w	8005d18 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1da      	bne.n	8005c0c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c68:	f023 0301 	bic.w	r3, r3, #1
 8005c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3308      	adds	r3, #8
 8005c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e1      	bne.n	8005c56 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3308      	adds	r3, #8
 8005c98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ca4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005cb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005cbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e3      	bne.n	8005c92 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ce8:	f023 0310 	bic.w	r3, r3, #16
 8005cec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d02:	e841 2300 	strex	r3, r2, [r1]
 8005d06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1e4      	bne.n	8005cd8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fb fbc3 	bl	800149e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	4619      	mov	r1, r3
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f8f4 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d38:	e0d5      	b.n	8005ee6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d44:	429a      	cmp	r2, r3
 8005d46:	f040 80ce 	bne.w	8005ee6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	f040 80c5 	bne.w	8005ee6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f8d8 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
      return;
 8005d70:	e0b9      	b.n	8005ee6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 80ab 	beq.w	8005eea <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 80a6 	beq.w	8005eea <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005db2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e4      	bne.n	8005d9e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	623b      	str	r3, [r7, #32]
   return(result);
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005df8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e3      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f023 0310 	bic.w	r3, r3, #16
 8005e34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e4      	bne.n	8005e20 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f85c 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e68:	e03f      	b.n	8005eea <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00e      	beq.n	8005e94 <HAL_UART_IRQHandler+0x5a8>
 8005e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d008      	beq.n	8005e94 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005e8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 ffe9 	bl	8006e64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e92:	e02d      	b.n	8005ef0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00e      	beq.n	8005ebe <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d008      	beq.n	8005ebe <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01c      	beq.n	8005eee <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
    }
    return;
 8005ebc:	e017      	b.n	8005eee <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d012      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x604>
 8005eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00c      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fdde 	bl	8006a98 <UART_EndTransmit_IT>
    return;
 8005edc:	e008      	b.n	8005ef0 <HAL_UART_IRQHandler+0x604>
      return;
 8005ede:	bf00      	nop
 8005ee0:	e006      	b.n	8005ef0 <HAL_UART_IRQHandler+0x604>
    return;
 8005ee2:	bf00      	nop
 8005ee4:	e004      	b.n	8005ef0 <HAL_UART_IRQHandler+0x604>
      return;
 8005ee6:	bf00      	nop
 8005ee8:	e002      	b.n	8005ef0 <HAL_UART_IRQHandler+0x604>
      return;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <HAL_UART_IRQHandler+0x604>
    return;
 8005eee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005ef0:	37e8      	adds	r7, #232	@ 0xe8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop

08005ef8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f3c:	b08a      	sub	sp, #40	@ 0x28
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	431a      	orrs	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4ba4      	ldr	r3, [pc, #656]	@ (80061f8 <UART_SetConfig+0x2c0>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a99      	ldr	r2, [pc, #612]	@ (80061fc <UART_SetConfig+0x2c4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d004      	beq.n	8005fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a90      	ldr	r2, [pc, #576]	@ (8006200 <UART_SetConfig+0x2c8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d126      	bne.n	8006010 <UART_SetConfig+0xd8>
 8005fc2:	4b90      	ldr	r3, [pc, #576]	@ (8006204 <UART_SetConfig+0x2cc>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d81b      	bhi.n	8006008 <UART_SetConfig+0xd0>
 8005fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd8 <UART_SetConfig+0xa0>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	08005fe9 	.word	0x08005fe9
 8005fdc:	08005ff9 	.word	0x08005ff9
 8005fe0:	08005ff1 	.word	0x08005ff1
 8005fe4:	08006001 	.word	0x08006001
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fee:	e116      	b.n	800621e <UART_SetConfig+0x2e6>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ff6:	e112      	b.n	800621e <UART_SetConfig+0x2e6>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ffe:	e10e      	b.n	800621e <UART_SetConfig+0x2e6>
 8006000:	2308      	movs	r3, #8
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006006:	e10a      	b.n	800621e <UART_SetConfig+0x2e6>
 8006008:	2310      	movs	r3, #16
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800600e:	e106      	b.n	800621e <UART_SetConfig+0x2e6>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a7c      	ldr	r2, [pc, #496]	@ (8006208 <UART_SetConfig+0x2d0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d138      	bne.n	800608c <UART_SetConfig+0x154>
 800601a:	4b7a      	ldr	r3, [pc, #488]	@ (8006204 <UART_SetConfig+0x2cc>)
 800601c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006020:	f003 030c 	and.w	r3, r3, #12
 8006024:	2b0c      	cmp	r3, #12
 8006026:	d82d      	bhi.n	8006084 <UART_SetConfig+0x14c>
 8006028:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <UART_SetConfig+0xf8>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006065 	.word	0x08006065
 8006034:	08006085 	.word	0x08006085
 8006038:	08006085 	.word	0x08006085
 800603c:	08006085 	.word	0x08006085
 8006040:	08006075 	.word	0x08006075
 8006044:	08006085 	.word	0x08006085
 8006048:	08006085 	.word	0x08006085
 800604c:	08006085 	.word	0x08006085
 8006050:	0800606d 	.word	0x0800606d
 8006054:	08006085 	.word	0x08006085
 8006058:	08006085 	.word	0x08006085
 800605c:	08006085 	.word	0x08006085
 8006060:	0800607d 	.word	0x0800607d
 8006064:	2300      	movs	r3, #0
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800606a:	e0d8      	b.n	800621e <UART_SetConfig+0x2e6>
 800606c:	2302      	movs	r3, #2
 800606e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006072:	e0d4      	b.n	800621e <UART_SetConfig+0x2e6>
 8006074:	2304      	movs	r3, #4
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800607a:	e0d0      	b.n	800621e <UART_SetConfig+0x2e6>
 800607c:	2308      	movs	r3, #8
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006082:	e0cc      	b.n	800621e <UART_SetConfig+0x2e6>
 8006084:	2310      	movs	r3, #16
 8006086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800608a:	e0c8      	b.n	800621e <UART_SetConfig+0x2e6>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a5e      	ldr	r2, [pc, #376]	@ (800620c <UART_SetConfig+0x2d4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d125      	bne.n	80060e2 <UART_SetConfig+0x1aa>
 8006096:	4b5b      	ldr	r3, [pc, #364]	@ (8006204 <UART_SetConfig+0x2cc>)
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060a0:	2b30      	cmp	r3, #48	@ 0x30
 80060a2:	d016      	beq.n	80060d2 <UART_SetConfig+0x19a>
 80060a4:	2b30      	cmp	r3, #48	@ 0x30
 80060a6:	d818      	bhi.n	80060da <UART_SetConfig+0x1a2>
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d00a      	beq.n	80060c2 <UART_SetConfig+0x18a>
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d814      	bhi.n	80060da <UART_SetConfig+0x1a2>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <UART_SetConfig+0x182>
 80060b4:	2b10      	cmp	r3, #16
 80060b6:	d008      	beq.n	80060ca <UART_SetConfig+0x192>
 80060b8:	e00f      	b.n	80060da <UART_SetConfig+0x1a2>
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c0:	e0ad      	b.n	800621e <UART_SetConfig+0x2e6>
 80060c2:	2302      	movs	r3, #2
 80060c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c8:	e0a9      	b.n	800621e <UART_SetConfig+0x2e6>
 80060ca:	2304      	movs	r3, #4
 80060cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d0:	e0a5      	b.n	800621e <UART_SetConfig+0x2e6>
 80060d2:	2308      	movs	r3, #8
 80060d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d8:	e0a1      	b.n	800621e <UART_SetConfig+0x2e6>
 80060da:	2310      	movs	r3, #16
 80060dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060e0:	e09d      	b.n	800621e <UART_SetConfig+0x2e6>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a4a      	ldr	r2, [pc, #296]	@ (8006210 <UART_SetConfig+0x2d8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d125      	bne.n	8006138 <UART_SetConfig+0x200>
 80060ec:	4b45      	ldr	r3, [pc, #276]	@ (8006204 <UART_SetConfig+0x2cc>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80060f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80060f8:	d016      	beq.n	8006128 <UART_SetConfig+0x1f0>
 80060fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80060fc:	d818      	bhi.n	8006130 <UART_SetConfig+0x1f8>
 80060fe:	2b80      	cmp	r3, #128	@ 0x80
 8006100:	d00a      	beq.n	8006118 <UART_SetConfig+0x1e0>
 8006102:	2b80      	cmp	r3, #128	@ 0x80
 8006104:	d814      	bhi.n	8006130 <UART_SetConfig+0x1f8>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <UART_SetConfig+0x1d8>
 800610a:	2b40      	cmp	r3, #64	@ 0x40
 800610c:	d008      	beq.n	8006120 <UART_SetConfig+0x1e8>
 800610e:	e00f      	b.n	8006130 <UART_SetConfig+0x1f8>
 8006110:	2300      	movs	r3, #0
 8006112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006116:	e082      	b.n	800621e <UART_SetConfig+0x2e6>
 8006118:	2302      	movs	r3, #2
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800611e:	e07e      	b.n	800621e <UART_SetConfig+0x2e6>
 8006120:	2304      	movs	r3, #4
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006126:	e07a      	b.n	800621e <UART_SetConfig+0x2e6>
 8006128:	2308      	movs	r3, #8
 800612a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800612e:	e076      	b.n	800621e <UART_SetConfig+0x2e6>
 8006130:	2310      	movs	r3, #16
 8006132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006136:	e072      	b.n	800621e <UART_SetConfig+0x2e6>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a35      	ldr	r2, [pc, #212]	@ (8006214 <UART_SetConfig+0x2dc>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d12a      	bne.n	8006198 <UART_SetConfig+0x260>
 8006142:	4b30      	ldr	r3, [pc, #192]	@ (8006204 <UART_SetConfig+0x2cc>)
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800614c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006150:	d01a      	beq.n	8006188 <UART_SetConfig+0x250>
 8006152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006156:	d81b      	bhi.n	8006190 <UART_SetConfig+0x258>
 8006158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800615c:	d00c      	beq.n	8006178 <UART_SetConfig+0x240>
 800615e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006162:	d815      	bhi.n	8006190 <UART_SetConfig+0x258>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <UART_SetConfig+0x238>
 8006168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800616c:	d008      	beq.n	8006180 <UART_SetConfig+0x248>
 800616e:	e00f      	b.n	8006190 <UART_SetConfig+0x258>
 8006170:	2300      	movs	r3, #0
 8006172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006176:	e052      	b.n	800621e <UART_SetConfig+0x2e6>
 8006178:	2302      	movs	r3, #2
 800617a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800617e:	e04e      	b.n	800621e <UART_SetConfig+0x2e6>
 8006180:	2304      	movs	r3, #4
 8006182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006186:	e04a      	b.n	800621e <UART_SetConfig+0x2e6>
 8006188:	2308      	movs	r3, #8
 800618a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800618e:	e046      	b.n	800621e <UART_SetConfig+0x2e6>
 8006190:	2310      	movs	r3, #16
 8006192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006196:	e042      	b.n	800621e <UART_SetConfig+0x2e6>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a17      	ldr	r2, [pc, #92]	@ (80061fc <UART_SetConfig+0x2c4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d13a      	bne.n	8006218 <UART_SetConfig+0x2e0>
 80061a2:	4b18      	ldr	r3, [pc, #96]	@ (8006204 <UART_SetConfig+0x2cc>)
 80061a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061b0:	d01a      	beq.n	80061e8 <UART_SetConfig+0x2b0>
 80061b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061b6:	d81b      	bhi.n	80061f0 <UART_SetConfig+0x2b8>
 80061b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061bc:	d00c      	beq.n	80061d8 <UART_SetConfig+0x2a0>
 80061be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061c2:	d815      	bhi.n	80061f0 <UART_SetConfig+0x2b8>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <UART_SetConfig+0x298>
 80061c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061cc:	d008      	beq.n	80061e0 <UART_SetConfig+0x2a8>
 80061ce:	e00f      	b.n	80061f0 <UART_SetConfig+0x2b8>
 80061d0:	2300      	movs	r3, #0
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d6:	e022      	b.n	800621e <UART_SetConfig+0x2e6>
 80061d8:	2302      	movs	r3, #2
 80061da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061de:	e01e      	b.n	800621e <UART_SetConfig+0x2e6>
 80061e0:	2304      	movs	r3, #4
 80061e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e6:	e01a      	b.n	800621e <UART_SetConfig+0x2e6>
 80061e8:	2308      	movs	r3, #8
 80061ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ee:	e016      	b.n	800621e <UART_SetConfig+0x2e6>
 80061f0:	2310      	movs	r3, #16
 80061f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061f6:	e012      	b.n	800621e <UART_SetConfig+0x2e6>
 80061f8:	efff69f3 	.word	0xefff69f3
 80061fc:	40008000 	.word	0x40008000
 8006200:	40013800 	.word	0x40013800
 8006204:	40021000 	.word	0x40021000
 8006208:	40004400 	.word	0x40004400
 800620c:	40004800 	.word	0x40004800
 8006210:	40004c00 	.word	0x40004c00
 8006214:	40005000 	.word	0x40005000
 8006218:	2310      	movs	r3, #16
 800621a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a9f      	ldr	r2, [pc, #636]	@ (80064a0 <UART_SetConfig+0x568>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d17a      	bne.n	800631e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006228:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800622c:	2b08      	cmp	r3, #8
 800622e:	d824      	bhi.n	800627a <UART_SetConfig+0x342>
 8006230:	a201      	add	r2, pc, #4	@ (adr r2, 8006238 <UART_SetConfig+0x300>)
 8006232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006236:	bf00      	nop
 8006238:	0800625d 	.word	0x0800625d
 800623c:	0800627b 	.word	0x0800627b
 8006240:	08006265 	.word	0x08006265
 8006244:	0800627b 	.word	0x0800627b
 8006248:	0800626b 	.word	0x0800626b
 800624c:	0800627b 	.word	0x0800627b
 8006250:	0800627b 	.word	0x0800627b
 8006254:	0800627b 	.word	0x0800627b
 8006258:	08006273 	.word	0x08006273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800625c:	f7fe fcda 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 8006260:	61f8      	str	r0, [r7, #28]
        break;
 8006262:	e010      	b.n	8006286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006264:	4b8f      	ldr	r3, [pc, #572]	@ (80064a4 <UART_SetConfig+0x56c>)
 8006266:	61fb      	str	r3, [r7, #28]
        break;
 8006268:	e00d      	b.n	8006286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800626a:	f7fe fc3b 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 800626e:	61f8      	str	r0, [r7, #28]
        break;
 8006270:	e009      	b.n	8006286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006276:	61fb      	str	r3, [r7, #28]
        break;
 8006278:	e005      	b.n	8006286 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006284:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80fb 	beq.w	8006484 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4413      	add	r3, r2
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	429a      	cmp	r2, r3
 800629c:	d305      	bcc.n	80062aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d903      	bls.n	80062b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062b0:	e0e8      	b.n	8006484 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	2200      	movs	r2, #0
 80062b6:	461c      	mov	r4, r3
 80062b8:	4615      	mov	r5, r2
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	f04f 0300 	mov.w	r3, #0
 80062c2:	022b      	lsls	r3, r5, #8
 80062c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80062c8:	0222      	lsls	r2, r4, #8
 80062ca:	68f9      	ldr	r1, [r7, #12]
 80062cc:	6849      	ldr	r1, [r1, #4]
 80062ce:	0849      	lsrs	r1, r1, #1
 80062d0:	2000      	movs	r0, #0
 80062d2:	4688      	mov	r8, r1
 80062d4:	4681      	mov	r9, r0
 80062d6:	eb12 0a08 	adds.w	sl, r2, r8
 80062da:	eb43 0b09 	adc.w	fp, r3, r9
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	603b      	str	r3, [r7, #0]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ec:	4650      	mov	r0, sl
 80062ee:	4659      	mov	r1, fp
 80062f0:	f7f9 ffd6 	bl	80002a0 <__aeabi_uldivmod>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4613      	mov	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006302:	d308      	bcc.n	8006316 <UART_SetConfig+0x3de>
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800630a:	d204      	bcs.n	8006316 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	60da      	str	r2, [r3, #12]
 8006314:	e0b6      	b.n	8006484 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800631c:	e0b2      	b.n	8006484 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006326:	d15e      	bne.n	80063e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006328:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800632c:	2b08      	cmp	r3, #8
 800632e:	d828      	bhi.n	8006382 <UART_SetConfig+0x44a>
 8006330:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <UART_SetConfig+0x400>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	0800635d 	.word	0x0800635d
 800633c:	08006365 	.word	0x08006365
 8006340:	0800636d 	.word	0x0800636d
 8006344:	08006383 	.word	0x08006383
 8006348:	08006373 	.word	0x08006373
 800634c:	08006383 	.word	0x08006383
 8006350:	08006383 	.word	0x08006383
 8006354:	08006383 	.word	0x08006383
 8006358:	0800637b 	.word	0x0800637b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800635c:	f7fe fc5a 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 8006360:	61f8      	str	r0, [r7, #28]
        break;
 8006362:	e014      	b.n	800638e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006364:	f7fe fc6c 	bl	8004c40 <HAL_RCC_GetPCLK2Freq>
 8006368:	61f8      	str	r0, [r7, #28]
        break;
 800636a:	e010      	b.n	800638e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800636c:	4b4d      	ldr	r3, [pc, #308]	@ (80064a4 <UART_SetConfig+0x56c>)
 800636e:	61fb      	str	r3, [r7, #28]
        break;
 8006370:	e00d      	b.n	800638e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006372:	f7fe fbb7 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8006376:	61f8      	str	r0, [r7, #28]
        break;
 8006378:	e009      	b.n	800638e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800637a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800637e:	61fb      	str	r3, [r7, #28]
        break;
 8006380:	e005      	b.n	800638e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800638c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d077      	beq.n	8006484 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	005a      	lsls	r2, r3, #1
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	441a      	add	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b0f      	cmp	r3, #15
 80063ae:	d916      	bls.n	80063de <UART_SetConfig+0x4a6>
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b6:	d212      	bcs.n	80063de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f023 030f 	bic.w	r3, r3, #15
 80063c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	8afb      	ldrh	r3, [r7, #22]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	8afa      	ldrh	r2, [r7, #22]
 80063da:	60da      	str	r2, [r3, #12]
 80063dc:	e052      	b.n	8006484 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80063e4:	e04e      	b.n	8006484 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d827      	bhi.n	800643e <UART_SetConfig+0x506>
 80063ee:	a201      	add	r2, pc, #4	@ (adr r2, 80063f4 <UART_SetConfig+0x4bc>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006419 	.word	0x08006419
 80063f8:	08006421 	.word	0x08006421
 80063fc:	08006429 	.word	0x08006429
 8006400:	0800643f 	.word	0x0800643f
 8006404:	0800642f 	.word	0x0800642f
 8006408:	0800643f 	.word	0x0800643f
 800640c:	0800643f 	.word	0x0800643f
 8006410:	0800643f 	.word	0x0800643f
 8006414:	08006437 	.word	0x08006437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006418:	f7fe fbfc 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 800641c:	61f8      	str	r0, [r7, #28]
        break;
 800641e:	e014      	b.n	800644a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006420:	f7fe fc0e 	bl	8004c40 <HAL_RCC_GetPCLK2Freq>
 8006424:	61f8      	str	r0, [r7, #28]
        break;
 8006426:	e010      	b.n	800644a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006428:	4b1e      	ldr	r3, [pc, #120]	@ (80064a4 <UART_SetConfig+0x56c>)
 800642a:	61fb      	str	r3, [r7, #28]
        break;
 800642c:	e00d      	b.n	800644a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642e:	f7fe fb59 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8006432:	61f8      	str	r0, [r7, #28]
        break;
 8006434:	e009      	b.n	800644a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800643a:	61fb      	str	r3, [r7, #28]
        break;
 800643c:	e005      	b.n	800644a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006448:	bf00      	nop
    }

    if (pclk != 0U)
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d019      	beq.n	8006484 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	085a      	lsrs	r2, r3, #1
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	441a      	add	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006462:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b0f      	cmp	r3, #15
 8006468:	d909      	bls.n	800647e <UART_SetConfig+0x546>
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006470:	d205      	bcs.n	800647e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60da      	str	r2, [r3, #12]
 800647c:	e002      	b.n	8006484 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006490:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006494:	4618      	mov	r0, r3
 8006496:	3728      	adds	r7, #40	@ 0x28
 8006498:	46bd      	mov	sp, r7
 800649a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800649e:	bf00      	nop
 80064a0:	40008000 	.word	0x40008000
 80064a4:	00f42400 	.word	0x00f42400

080064a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01a      	beq.n	80065be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065a6:	d10a      	bne.n	80065be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  }
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b098      	sub	sp, #96	@ 0x60
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065fc:	f7fa fe32 	bl	8001264 <HAL_GetTick>
 8006600:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	2b08      	cmp	r3, #8
 800660e:	d12e      	bne.n	800666e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006618:	2200      	movs	r2, #0
 800661a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f88c 	bl	800673c <UART_WaitOnFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d021      	beq.n	800666e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800663e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006648:	647b      	str	r3, [r7, #68]	@ 0x44
 800664a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800664e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e6      	bne.n	800662a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e062      	b.n	8006734 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b04      	cmp	r3, #4
 800667a:	d149      	bne.n	8006710 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800667c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006684:	2200      	movs	r2, #0
 8006686:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f856 	bl	800673c <UART_WaitOnFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d03c      	beq.n	8006710 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	623b      	str	r3, [r7, #32]
   return(result);
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e6      	bne.n	8006696 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3308      	adds	r3, #8
 80066ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3308      	adds	r3, #8
 80066e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066e8:	61fa      	str	r2, [r7, #28]
 80066ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	69b9      	ldr	r1, [r7, #24]
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	617b      	str	r3, [r7, #20]
   return(result);
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e5      	bne.n	80066c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e011      	b.n	8006734 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3758      	adds	r7, #88	@ 0x58
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	4613      	mov	r3, r2
 800674a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674c:	e04f      	b.n	80067ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006754:	d04b      	beq.n	80067ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006756:	f7fa fd85 	bl	8001264 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	429a      	cmp	r2, r3
 8006764:	d302      	bcc.n	800676c <UART_WaitOnFlagUntilTimeout+0x30>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e04e      	b.n	800680e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0304 	and.w	r3, r3, #4
 800677a:	2b00      	cmp	r3, #0
 800677c:	d037      	beq.n	80067ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b80      	cmp	r3, #128	@ 0x80
 8006782:	d034      	beq.n	80067ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b40      	cmp	r3, #64	@ 0x40
 8006788:	d031      	beq.n	80067ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b08      	cmp	r3, #8
 8006796:	d110      	bne.n	80067ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2208      	movs	r2, #8
 800679e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f8ff 	bl	80069a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2208      	movs	r2, #8
 80067aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e029      	b.n	800680e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067c8:	d111      	bne.n	80067ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 f8e5 	bl	80069a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e00f      	b.n	800680e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69da      	ldr	r2, [r3, #28]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4013      	ands	r3, r2
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	bf0c      	ite	eq
 80067fe:	2301      	moveq	r3, #1
 8006800:	2300      	movne	r3, #0
 8006802:	b2db      	uxtb	r3, r3
 8006804:	461a      	mov	r2, r3
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	429a      	cmp	r2, r3
 800680a:	d0a0      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006818:	b480      	push	{r7}
 800681a:	b097      	sub	sp, #92	@ 0x5c
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	88fa      	ldrh	r2, [r7, #6]
 8006830:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	88fa      	ldrh	r2, [r7, #6]
 8006838:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800684a:	d10e      	bne.n	800686a <UART_Start_Receive_IT+0x52>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d105      	bne.n	8006860 <UART_Start_Receive_IT+0x48>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800685a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800685e:	e02d      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	22ff      	movs	r2, #255	@ 0xff
 8006864:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006868:	e028      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10d      	bne.n	800688e <UART_Start_Receive_IT+0x76>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <UART_Start_Receive_IT+0x6c>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	22ff      	movs	r2, #255	@ 0xff
 800687e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006882:	e01b      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	227f      	movs	r2, #127	@ 0x7f
 8006888:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800688c:	e016      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006896:	d10d      	bne.n	80068b4 <UART_Start_Receive_IT+0x9c>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d104      	bne.n	80068aa <UART_Start_Receive_IT+0x92>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	227f      	movs	r2, #127	@ 0x7f
 80068a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80068a8:	e008      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	223f      	movs	r2, #63	@ 0x3f
 80068ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80068b2:	e003      	b.n	80068bc <UART_Start_Receive_IT+0xa4>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2222      	movs	r2, #34	@ 0x22
 80068c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3308      	adds	r3, #8
 80068d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80068ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80068fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e5      	bne.n	80068cc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006908:	d107      	bne.n	800691a <UART_Start_Receive_IT+0x102>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a21      	ldr	r2, [pc, #132]	@ (800699c <UART_Start_Receive_IT+0x184>)
 8006916:	669a      	str	r2, [r3, #104]	@ 0x68
 8006918:	e002      	b.n	8006920 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a20      	ldr	r2, [pc, #128]	@ (80069a0 <UART_Start_Receive_IT+0x188>)
 800691e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d019      	beq.n	800695c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800693c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006946:	637b      	str	r3, [r7, #52]	@ 0x34
 8006948:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800694c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_Start_Receive_IT+0x110>
 800695a:	e018      	b.n	800698e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	613b      	str	r3, [r7, #16]
   return(result);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f043 0320 	orr.w	r3, r3, #32
 8006970:	653b      	str	r3, [r7, #80]	@ 0x50
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800697a:	623b      	str	r3, [r7, #32]
 800697c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	69f9      	ldr	r1, [r7, #28]
 8006980:	6a3a      	ldr	r2, [r7, #32]
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	61bb      	str	r3, [r7, #24]
   return(result);
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e6      	bne.n	800695c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	375c      	adds	r7, #92	@ 0x5c
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	08006ca9 	.word	0x08006ca9
 80069a0:	08006aed 	.word	0x08006aed

080069a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b095      	sub	sp, #84	@ 0x54
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80069cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e6      	bne.n	80069ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e5      	bne.n	80069de <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d118      	bne.n	8006a4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f023 0310 	bic.w	r3, r3, #16
 8006a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6979      	ldr	r1, [r7, #20]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	613b      	str	r3, [r7, #16]
   return(result);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e6      	bne.n	8006a1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a60:	bf00      	nop
 8006a62:	3754      	adds	r7, #84	@ 0x54
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff fa3e 	bl	8005f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6979      	ldr	r1, [r7, #20]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	613b      	str	r3, [r7, #16]
   return(result);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e6      	bne.n	8006aa0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fa0a 	bl	8005ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ae4:	bf00      	nop
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b09c      	sub	sp, #112	@ 0x70
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006afa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b04:	2b22      	cmp	r3, #34	@ 0x22
 8006b06:	f040 80be 	bne.w	8006c86 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006b10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b18:	b2d9      	uxtb	r1, r3
 8006b1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b24:	400a      	ands	r2, r1
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f040 80a3 	bne.w	8006c9a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e6      	bne.n	8006b54 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b98:	f023 0301 	bic.w	r3, r3, #1
 8006b9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ba6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ba8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e5      	bne.n	8006b86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a34      	ldr	r2, [pc, #208]	@ (8006ca4 <UART_RxISR_8BIT+0x1b8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d01f      	beq.n	8006c18 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d018      	beq.n	8006c18 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	623b      	str	r3, [r7, #32]
   return(result);
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e6      	bne.n	8006be6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d12e      	bne.n	8006c7e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0310 	bic.w	r3, r3, #16
 8006c3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	69b9      	ldr	r1, [r7, #24]
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	617b      	str	r3, [r7, #20]
   return(result);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e6      	bne.n	8006c26 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d103      	bne.n	8006c6e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2210      	movs	r2, #16
 8006c6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7ff f952 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c7c:	e00d      	b.n	8006c9a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7f9 ff9e 	bl	8000bc0 <HAL_UART_RxCpltCallback>
}
 8006c84:	e009      	b.n	8006c9a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	8b1b      	ldrh	r3, [r3, #24]
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0208 	orr.w	r2, r2, #8
 8006c96:	b292      	uxth	r2, r2
 8006c98:	831a      	strh	r2, [r3, #24]
}
 8006c9a:	bf00      	nop
 8006c9c:	3770      	adds	r7, #112	@ 0x70
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40008000 	.word	0x40008000

08006ca8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b09c      	sub	sp, #112	@ 0x70
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cb6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc0:	2b22      	cmp	r3, #34	@ 0x22
 8006cc2:	f040 80be 	bne.w	8006e42 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ccc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cd6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006cda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006cde:	4013      	ands	r3, r2
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ce4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cea:	1c9a      	adds	r2, r3, #2
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 80a3 	bne.w	8006e56 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d24:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d30:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e6      	bne.n	8006d10 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	f023 0301 	bic.w	r3, r3, #1
 8006d58:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d62:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e5      	bne.n	8006d42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a34      	ldr	r2, [pc, #208]	@ (8006e60 <UART_RxISR_16BIT+0x1b8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d01f      	beq.n	8006dd4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d018      	beq.n	8006dd4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dc2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e6      	bne.n	8006da2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d12e      	bne.n	8006e3a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f023 0310 	bic.w	r3, r3, #16
 8006df6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6979      	ldr	r1, [r7, #20]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e6      	bne.n	8006de2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f003 0310 	and.w	r3, r3, #16
 8006e1e:	2b10      	cmp	r3, #16
 8006e20:	d103      	bne.n	8006e2a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2210      	movs	r2, #16
 8006e28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff f874 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e38:	e00d      	b.n	8006e56 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7f9 fec0 	bl	8000bc0 <HAL_UART_RxCpltCallback>
}
 8006e40:	e009      	b.n	8006e56 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	8b1b      	ldrh	r3, [r3, #24]
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0208 	orr.w	r2, r2, #8
 8006e52:	b292      	uxth	r2, r2
 8006e54:	831a      	strh	r2, [r3, #24]
}
 8006e56:	bf00      	nop
 8006e58:	3770      	adds	r7, #112	@ 0x70
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	40008000 	.word	0x40008000

08006e64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <atoi>:
 8006e78:	220a      	movs	r2, #10
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	f000 b87a 	b.w	8006f74 <strtol>

08006e80 <_strtol_l.isra.0>:
 8006e80:	2b24      	cmp	r3, #36	@ 0x24
 8006e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e86:	4686      	mov	lr, r0
 8006e88:	4690      	mov	r8, r2
 8006e8a:	d801      	bhi.n	8006e90 <_strtol_l.isra.0+0x10>
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d106      	bne.n	8006e9e <_strtol_l.isra.0+0x1e>
 8006e90:	f000 f8ca 	bl	8007028 <__errno>
 8006e94:	2316      	movs	r3, #22
 8006e96:	6003      	str	r3, [r0, #0]
 8006e98:	2000      	movs	r0, #0
 8006e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9e:	4834      	ldr	r0, [pc, #208]	@ (8006f70 <_strtol_l.isra.0+0xf0>)
 8006ea0:	460d      	mov	r5, r1
 8006ea2:	462a      	mov	r2, r5
 8006ea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ea8:	5d06      	ldrb	r6, [r0, r4]
 8006eaa:	f016 0608 	ands.w	r6, r6, #8
 8006eae:	d1f8      	bne.n	8006ea2 <_strtol_l.isra.0+0x22>
 8006eb0:	2c2d      	cmp	r4, #45	@ 0x2d
 8006eb2:	d110      	bne.n	8006ed6 <_strtol_l.isra.0+0x56>
 8006eb4:	782c      	ldrb	r4, [r5, #0]
 8006eb6:	2601      	movs	r6, #1
 8006eb8:	1c95      	adds	r5, r2, #2
 8006eba:	f033 0210 	bics.w	r2, r3, #16
 8006ebe:	d115      	bne.n	8006eec <_strtol_l.isra.0+0x6c>
 8006ec0:	2c30      	cmp	r4, #48	@ 0x30
 8006ec2:	d10d      	bne.n	8006ee0 <_strtol_l.isra.0+0x60>
 8006ec4:	782a      	ldrb	r2, [r5, #0]
 8006ec6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006eca:	2a58      	cmp	r2, #88	@ 0x58
 8006ecc:	d108      	bne.n	8006ee0 <_strtol_l.isra.0+0x60>
 8006ece:	786c      	ldrb	r4, [r5, #1]
 8006ed0:	3502      	adds	r5, #2
 8006ed2:	2310      	movs	r3, #16
 8006ed4:	e00a      	b.n	8006eec <_strtol_l.isra.0+0x6c>
 8006ed6:	2c2b      	cmp	r4, #43	@ 0x2b
 8006ed8:	bf04      	itt	eq
 8006eda:	782c      	ldrbeq	r4, [r5, #0]
 8006edc:	1c95      	addeq	r5, r2, #2
 8006ede:	e7ec      	b.n	8006eba <_strtol_l.isra.0+0x3a>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f6      	bne.n	8006ed2 <_strtol_l.isra.0+0x52>
 8006ee4:	2c30      	cmp	r4, #48	@ 0x30
 8006ee6:	bf14      	ite	ne
 8006ee8:	230a      	movne	r3, #10
 8006eea:	2308      	moveq	r3, #8
 8006eec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006ef0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	fbbc f9f3 	udiv	r9, ip, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f00:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006f04:	2f09      	cmp	r7, #9
 8006f06:	d80f      	bhi.n	8006f28 <_strtol_l.isra.0+0xa8>
 8006f08:	463c      	mov	r4, r7
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	dd1b      	ble.n	8006f46 <_strtol_l.isra.0+0xc6>
 8006f0e:	1c57      	adds	r7, r2, #1
 8006f10:	d007      	beq.n	8006f22 <_strtol_l.isra.0+0xa2>
 8006f12:	4581      	cmp	r9, r0
 8006f14:	d314      	bcc.n	8006f40 <_strtol_l.isra.0+0xc0>
 8006f16:	d101      	bne.n	8006f1c <_strtol_l.isra.0+0x9c>
 8006f18:	45a2      	cmp	sl, r4
 8006f1a:	db11      	blt.n	8006f40 <_strtol_l.isra.0+0xc0>
 8006f1c:	fb00 4003 	mla	r0, r0, r3, r4
 8006f20:	2201      	movs	r2, #1
 8006f22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f26:	e7eb      	b.n	8006f00 <_strtol_l.isra.0+0x80>
 8006f28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006f2c:	2f19      	cmp	r7, #25
 8006f2e:	d801      	bhi.n	8006f34 <_strtol_l.isra.0+0xb4>
 8006f30:	3c37      	subs	r4, #55	@ 0x37
 8006f32:	e7ea      	b.n	8006f0a <_strtol_l.isra.0+0x8a>
 8006f34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006f38:	2f19      	cmp	r7, #25
 8006f3a:	d804      	bhi.n	8006f46 <_strtol_l.isra.0+0xc6>
 8006f3c:	3c57      	subs	r4, #87	@ 0x57
 8006f3e:	e7e4      	b.n	8006f0a <_strtol_l.isra.0+0x8a>
 8006f40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f44:	e7ed      	b.n	8006f22 <_strtol_l.isra.0+0xa2>
 8006f46:	1c53      	adds	r3, r2, #1
 8006f48:	d108      	bne.n	8006f5c <_strtol_l.isra.0+0xdc>
 8006f4a:	2322      	movs	r3, #34	@ 0x22
 8006f4c:	f8ce 3000 	str.w	r3, [lr]
 8006f50:	4660      	mov	r0, ip
 8006f52:	f1b8 0f00 	cmp.w	r8, #0
 8006f56:	d0a0      	beq.n	8006e9a <_strtol_l.isra.0+0x1a>
 8006f58:	1e69      	subs	r1, r5, #1
 8006f5a:	e006      	b.n	8006f6a <_strtol_l.isra.0+0xea>
 8006f5c:	b106      	cbz	r6, 8006f60 <_strtol_l.isra.0+0xe0>
 8006f5e:	4240      	negs	r0, r0
 8006f60:	f1b8 0f00 	cmp.w	r8, #0
 8006f64:	d099      	beq.n	8006e9a <_strtol_l.isra.0+0x1a>
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	d1f6      	bne.n	8006f58 <_strtol_l.isra.0+0xd8>
 8006f6a:	f8c8 1000 	str.w	r1, [r8]
 8006f6e:	e794      	b.n	8006e9a <_strtol_l.isra.0+0x1a>
 8006f70:	08007af9 	.word	0x08007af9

08006f74 <strtol>:
 8006f74:	4613      	mov	r3, r2
 8006f76:	460a      	mov	r2, r1
 8006f78:	4601      	mov	r1, r0
 8006f7a:	4802      	ldr	r0, [pc, #8]	@ (8006f84 <strtol+0x10>)
 8006f7c:	6800      	ldr	r0, [r0, #0]
 8006f7e:	f7ff bf7f 	b.w	8006e80 <_strtol_l.isra.0>
 8006f82:	bf00      	nop
 8006f84:	2000000c 	.word	0x2000000c

08006f88 <sniprintf>:
 8006f88:	b40c      	push	{r2, r3}
 8006f8a:	b530      	push	{r4, r5, lr}
 8006f8c:	4b18      	ldr	r3, [pc, #96]	@ (8006ff0 <sniprintf+0x68>)
 8006f8e:	1e0c      	subs	r4, r1, #0
 8006f90:	681d      	ldr	r5, [r3, #0]
 8006f92:	b09d      	sub	sp, #116	@ 0x74
 8006f94:	da08      	bge.n	8006fa8 <sniprintf+0x20>
 8006f96:	238b      	movs	r3, #139	@ 0x8b
 8006f98:	602b      	str	r3, [r5, #0]
 8006f9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f9e:	b01d      	add	sp, #116	@ 0x74
 8006fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fa4:	b002      	add	sp, #8
 8006fa6:	4770      	bx	lr
 8006fa8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006fac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006fb6:	bf14      	ite	ne
 8006fb8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006fbc:	4623      	moveq	r3, r4
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	9307      	str	r3, [sp, #28]
 8006fc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006fc6:	9002      	str	r0, [sp, #8]
 8006fc8:	9006      	str	r0, [sp, #24]
 8006fca:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006fce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006fd0:	ab21      	add	r3, sp, #132	@ 0x84
 8006fd2:	a902      	add	r1, sp, #8
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	9301      	str	r3, [sp, #4]
 8006fd8:	f000 f9a6 	bl	8007328 <_svfiprintf_r>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	bfbc      	itt	lt
 8006fe0:	238b      	movlt	r3, #139	@ 0x8b
 8006fe2:	602b      	strlt	r3, [r5, #0]
 8006fe4:	2c00      	cmp	r4, #0
 8006fe6:	d0da      	beq.n	8006f9e <sniprintf+0x16>
 8006fe8:	9b02      	ldr	r3, [sp, #8]
 8006fea:	2200      	movs	r2, #0
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e7d6      	b.n	8006f9e <sniprintf+0x16>
 8006ff0:	2000000c 	.word	0x2000000c

08006ff4 <memset>:
 8006ff4:	4402      	add	r2, r0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d100      	bne.n	8006ffe <memset+0xa>
 8006ffc:	4770      	bx	lr
 8006ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8007002:	e7f9      	b.n	8006ff8 <memset+0x4>

08007004 <strncmp>:
 8007004:	b510      	push	{r4, lr}
 8007006:	b16a      	cbz	r2, 8007024 <strncmp+0x20>
 8007008:	3901      	subs	r1, #1
 800700a:	1884      	adds	r4, r0, r2
 800700c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007010:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007014:	429a      	cmp	r2, r3
 8007016:	d103      	bne.n	8007020 <strncmp+0x1c>
 8007018:	42a0      	cmp	r0, r4
 800701a:	d001      	beq.n	8007020 <strncmp+0x1c>
 800701c:	2a00      	cmp	r2, #0
 800701e:	d1f5      	bne.n	800700c <strncmp+0x8>
 8007020:	1ad0      	subs	r0, r2, r3
 8007022:	bd10      	pop	{r4, pc}
 8007024:	4610      	mov	r0, r2
 8007026:	e7fc      	b.n	8007022 <strncmp+0x1e>

08007028 <__errno>:
 8007028:	4b01      	ldr	r3, [pc, #4]	@ (8007030 <__errno+0x8>)
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	2000000c 	.word	0x2000000c

08007034 <__libc_init_array>:
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	4d0d      	ldr	r5, [pc, #52]	@ (800706c <__libc_init_array+0x38>)
 8007038:	4c0d      	ldr	r4, [pc, #52]	@ (8007070 <__libc_init_array+0x3c>)
 800703a:	1b64      	subs	r4, r4, r5
 800703c:	10a4      	asrs	r4, r4, #2
 800703e:	2600      	movs	r6, #0
 8007040:	42a6      	cmp	r6, r4
 8007042:	d109      	bne.n	8007058 <__libc_init_array+0x24>
 8007044:	4d0b      	ldr	r5, [pc, #44]	@ (8007074 <__libc_init_array+0x40>)
 8007046:	4c0c      	ldr	r4, [pc, #48]	@ (8007078 <__libc_init_array+0x44>)
 8007048:	f000 fc64 	bl	8007914 <_init>
 800704c:	1b64      	subs	r4, r4, r5
 800704e:	10a4      	asrs	r4, r4, #2
 8007050:	2600      	movs	r6, #0
 8007052:	42a6      	cmp	r6, r4
 8007054:	d105      	bne.n	8007062 <__libc_init_array+0x2e>
 8007056:	bd70      	pop	{r4, r5, r6, pc}
 8007058:	f855 3b04 	ldr.w	r3, [r5], #4
 800705c:	4798      	blx	r3
 800705e:	3601      	adds	r6, #1
 8007060:	e7ee      	b.n	8007040 <__libc_init_array+0xc>
 8007062:	f855 3b04 	ldr.w	r3, [r5], #4
 8007066:	4798      	blx	r3
 8007068:	3601      	adds	r6, #1
 800706a:	e7f2      	b.n	8007052 <__libc_init_array+0x1e>
 800706c:	08007c34 	.word	0x08007c34
 8007070:	08007c34 	.word	0x08007c34
 8007074:	08007c34 	.word	0x08007c34
 8007078:	08007c38 	.word	0x08007c38

0800707c <__retarget_lock_acquire_recursive>:
 800707c:	4770      	bx	lr

0800707e <__retarget_lock_release_recursive>:
 800707e:	4770      	bx	lr

08007080 <_free_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4605      	mov	r5, r0
 8007084:	2900      	cmp	r1, #0
 8007086:	d041      	beq.n	800710c <_free_r+0x8c>
 8007088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800708c:	1f0c      	subs	r4, r1, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfb8      	it	lt
 8007092:	18e4      	addlt	r4, r4, r3
 8007094:	f000 f8e0 	bl	8007258 <__malloc_lock>
 8007098:	4a1d      	ldr	r2, [pc, #116]	@ (8007110 <_free_r+0x90>)
 800709a:	6813      	ldr	r3, [r2, #0]
 800709c:	b933      	cbnz	r3, 80070ac <_free_r+0x2c>
 800709e:	6063      	str	r3, [r4, #4]
 80070a0:	6014      	str	r4, [r2, #0]
 80070a2:	4628      	mov	r0, r5
 80070a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a8:	f000 b8dc 	b.w	8007264 <__malloc_unlock>
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	d908      	bls.n	80070c2 <_free_r+0x42>
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	1821      	adds	r1, r4, r0
 80070b4:	428b      	cmp	r3, r1
 80070b6:	bf01      	itttt	eq
 80070b8:	6819      	ldreq	r1, [r3, #0]
 80070ba:	685b      	ldreq	r3, [r3, #4]
 80070bc:	1809      	addeq	r1, r1, r0
 80070be:	6021      	streq	r1, [r4, #0]
 80070c0:	e7ed      	b.n	800709e <_free_r+0x1e>
 80070c2:	461a      	mov	r2, r3
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	b10b      	cbz	r3, 80070cc <_free_r+0x4c>
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	d9fa      	bls.n	80070c2 <_free_r+0x42>
 80070cc:	6811      	ldr	r1, [r2, #0]
 80070ce:	1850      	adds	r0, r2, r1
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d10b      	bne.n	80070ec <_free_r+0x6c>
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	4401      	add	r1, r0
 80070d8:	1850      	adds	r0, r2, r1
 80070da:	4283      	cmp	r3, r0
 80070dc:	6011      	str	r1, [r2, #0]
 80070de:	d1e0      	bne.n	80070a2 <_free_r+0x22>
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	6053      	str	r3, [r2, #4]
 80070e6:	4408      	add	r0, r1
 80070e8:	6010      	str	r0, [r2, #0]
 80070ea:	e7da      	b.n	80070a2 <_free_r+0x22>
 80070ec:	d902      	bls.n	80070f4 <_free_r+0x74>
 80070ee:	230c      	movs	r3, #12
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	e7d6      	b.n	80070a2 <_free_r+0x22>
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	1821      	adds	r1, r4, r0
 80070f8:	428b      	cmp	r3, r1
 80070fa:	bf04      	itt	eq
 80070fc:	6819      	ldreq	r1, [r3, #0]
 80070fe:	685b      	ldreq	r3, [r3, #4]
 8007100:	6063      	str	r3, [r4, #4]
 8007102:	bf04      	itt	eq
 8007104:	1809      	addeq	r1, r1, r0
 8007106:	6021      	streq	r1, [r4, #0]
 8007108:	6054      	str	r4, [r2, #4]
 800710a:	e7ca      	b.n	80070a2 <_free_r+0x22>
 800710c:	bd38      	pop	{r3, r4, r5, pc}
 800710e:	bf00      	nop
 8007110:	20000348 	.word	0x20000348

08007114 <sbrk_aligned>:
 8007114:	b570      	push	{r4, r5, r6, lr}
 8007116:	4e0f      	ldr	r6, [pc, #60]	@ (8007154 <sbrk_aligned+0x40>)
 8007118:	460c      	mov	r4, r1
 800711a:	6831      	ldr	r1, [r6, #0]
 800711c:	4605      	mov	r5, r0
 800711e:	b911      	cbnz	r1, 8007126 <sbrk_aligned+0x12>
 8007120:	f000 fba4 	bl	800786c <_sbrk_r>
 8007124:	6030      	str	r0, [r6, #0]
 8007126:	4621      	mov	r1, r4
 8007128:	4628      	mov	r0, r5
 800712a:	f000 fb9f 	bl	800786c <_sbrk_r>
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	d103      	bne.n	800713a <sbrk_aligned+0x26>
 8007132:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007136:	4620      	mov	r0, r4
 8007138:	bd70      	pop	{r4, r5, r6, pc}
 800713a:	1cc4      	adds	r4, r0, #3
 800713c:	f024 0403 	bic.w	r4, r4, #3
 8007140:	42a0      	cmp	r0, r4
 8007142:	d0f8      	beq.n	8007136 <sbrk_aligned+0x22>
 8007144:	1a21      	subs	r1, r4, r0
 8007146:	4628      	mov	r0, r5
 8007148:	f000 fb90 	bl	800786c <_sbrk_r>
 800714c:	3001      	adds	r0, #1
 800714e:	d1f2      	bne.n	8007136 <sbrk_aligned+0x22>
 8007150:	e7ef      	b.n	8007132 <sbrk_aligned+0x1e>
 8007152:	bf00      	nop
 8007154:	20000344 	.word	0x20000344

08007158 <_malloc_r>:
 8007158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800715c:	1ccd      	adds	r5, r1, #3
 800715e:	f025 0503 	bic.w	r5, r5, #3
 8007162:	3508      	adds	r5, #8
 8007164:	2d0c      	cmp	r5, #12
 8007166:	bf38      	it	cc
 8007168:	250c      	movcc	r5, #12
 800716a:	2d00      	cmp	r5, #0
 800716c:	4606      	mov	r6, r0
 800716e:	db01      	blt.n	8007174 <_malloc_r+0x1c>
 8007170:	42a9      	cmp	r1, r5
 8007172:	d904      	bls.n	800717e <_malloc_r+0x26>
 8007174:	230c      	movs	r3, #12
 8007176:	6033      	str	r3, [r6, #0]
 8007178:	2000      	movs	r0, #0
 800717a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800717e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007254 <_malloc_r+0xfc>
 8007182:	f000 f869 	bl	8007258 <__malloc_lock>
 8007186:	f8d8 3000 	ldr.w	r3, [r8]
 800718a:	461c      	mov	r4, r3
 800718c:	bb44      	cbnz	r4, 80071e0 <_malloc_r+0x88>
 800718e:	4629      	mov	r1, r5
 8007190:	4630      	mov	r0, r6
 8007192:	f7ff ffbf 	bl	8007114 <sbrk_aligned>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	4604      	mov	r4, r0
 800719a:	d158      	bne.n	800724e <_malloc_r+0xf6>
 800719c:	f8d8 4000 	ldr.w	r4, [r8]
 80071a0:	4627      	mov	r7, r4
 80071a2:	2f00      	cmp	r7, #0
 80071a4:	d143      	bne.n	800722e <_malloc_r+0xd6>
 80071a6:	2c00      	cmp	r4, #0
 80071a8:	d04b      	beq.n	8007242 <_malloc_r+0xea>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	4639      	mov	r1, r7
 80071ae:	4630      	mov	r0, r6
 80071b0:	eb04 0903 	add.w	r9, r4, r3
 80071b4:	f000 fb5a 	bl	800786c <_sbrk_r>
 80071b8:	4581      	cmp	r9, r0
 80071ba:	d142      	bne.n	8007242 <_malloc_r+0xea>
 80071bc:	6821      	ldr	r1, [r4, #0]
 80071be:	1a6d      	subs	r5, r5, r1
 80071c0:	4629      	mov	r1, r5
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7ff ffa6 	bl	8007114 <sbrk_aligned>
 80071c8:	3001      	adds	r0, #1
 80071ca:	d03a      	beq.n	8007242 <_malloc_r+0xea>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	442b      	add	r3, r5
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	f8d8 3000 	ldr.w	r3, [r8]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	bb62      	cbnz	r2, 8007234 <_malloc_r+0xdc>
 80071da:	f8c8 7000 	str.w	r7, [r8]
 80071de:	e00f      	b.n	8007200 <_malloc_r+0xa8>
 80071e0:	6822      	ldr	r2, [r4, #0]
 80071e2:	1b52      	subs	r2, r2, r5
 80071e4:	d420      	bmi.n	8007228 <_malloc_r+0xd0>
 80071e6:	2a0b      	cmp	r2, #11
 80071e8:	d917      	bls.n	800721a <_malloc_r+0xc2>
 80071ea:	1961      	adds	r1, r4, r5
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	6025      	str	r5, [r4, #0]
 80071f0:	bf18      	it	ne
 80071f2:	6059      	strne	r1, [r3, #4]
 80071f4:	6863      	ldr	r3, [r4, #4]
 80071f6:	bf08      	it	eq
 80071f8:	f8c8 1000 	streq.w	r1, [r8]
 80071fc:	5162      	str	r2, [r4, r5]
 80071fe:	604b      	str	r3, [r1, #4]
 8007200:	4630      	mov	r0, r6
 8007202:	f000 f82f 	bl	8007264 <__malloc_unlock>
 8007206:	f104 000b 	add.w	r0, r4, #11
 800720a:	1d23      	adds	r3, r4, #4
 800720c:	f020 0007 	bic.w	r0, r0, #7
 8007210:	1ac2      	subs	r2, r0, r3
 8007212:	bf1c      	itt	ne
 8007214:	1a1b      	subne	r3, r3, r0
 8007216:	50a3      	strne	r3, [r4, r2]
 8007218:	e7af      	b.n	800717a <_malloc_r+0x22>
 800721a:	6862      	ldr	r2, [r4, #4]
 800721c:	42a3      	cmp	r3, r4
 800721e:	bf0c      	ite	eq
 8007220:	f8c8 2000 	streq.w	r2, [r8]
 8007224:	605a      	strne	r2, [r3, #4]
 8007226:	e7eb      	b.n	8007200 <_malloc_r+0xa8>
 8007228:	4623      	mov	r3, r4
 800722a:	6864      	ldr	r4, [r4, #4]
 800722c:	e7ae      	b.n	800718c <_malloc_r+0x34>
 800722e:	463c      	mov	r4, r7
 8007230:	687f      	ldr	r7, [r7, #4]
 8007232:	e7b6      	b.n	80071a2 <_malloc_r+0x4a>
 8007234:	461a      	mov	r2, r3
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	42a3      	cmp	r3, r4
 800723a:	d1fb      	bne.n	8007234 <_malloc_r+0xdc>
 800723c:	2300      	movs	r3, #0
 800723e:	6053      	str	r3, [r2, #4]
 8007240:	e7de      	b.n	8007200 <_malloc_r+0xa8>
 8007242:	230c      	movs	r3, #12
 8007244:	6033      	str	r3, [r6, #0]
 8007246:	4630      	mov	r0, r6
 8007248:	f000 f80c 	bl	8007264 <__malloc_unlock>
 800724c:	e794      	b.n	8007178 <_malloc_r+0x20>
 800724e:	6005      	str	r5, [r0, #0]
 8007250:	e7d6      	b.n	8007200 <_malloc_r+0xa8>
 8007252:	bf00      	nop
 8007254:	20000348 	.word	0x20000348

08007258 <__malloc_lock>:
 8007258:	4801      	ldr	r0, [pc, #4]	@ (8007260 <__malloc_lock+0x8>)
 800725a:	f7ff bf0f 	b.w	800707c <__retarget_lock_acquire_recursive>
 800725e:	bf00      	nop
 8007260:	20000340 	.word	0x20000340

08007264 <__malloc_unlock>:
 8007264:	4801      	ldr	r0, [pc, #4]	@ (800726c <__malloc_unlock+0x8>)
 8007266:	f7ff bf0a 	b.w	800707e <__retarget_lock_release_recursive>
 800726a:	bf00      	nop
 800726c:	20000340 	.word	0x20000340

08007270 <__ssputs_r>:
 8007270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	688e      	ldr	r6, [r1, #8]
 8007276:	461f      	mov	r7, r3
 8007278:	42be      	cmp	r6, r7
 800727a:	680b      	ldr	r3, [r1, #0]
 800727c:	4682      	mov	sl, r0
 800727e:	460c      	mov	r4, r1
 8007280:	4690      	mov	r8, r2
 8007282:	d82d      	bhi.n	80072e0 <__ssputs_r+0x70>
 8007284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007288:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800728c:	d026      	beq.n	80072dc <__ssputs_r+0x6c>
 800728e:	6965      	ldr	r5, [r4, #20]
 8007290:	6909      	ldr	r1, [r1, #16]
 8007292:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007296:	eba3 0901 	sub.w	r9, r3, r1
 800729a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800729e:	1c7b      	adds	r3, r7, #1
 80072a0:	444b      	add	r3, r9
 80072a2:	106d      	asrs	r5, r5, #1
 80072a4:	429d      	cmp	r5, r3
 80072a6:	bf38      	it	cc
 80072a8:	461d      	movcc	r5, r3
 80072aa:	0553      	lsls	r3, r2, #21
 80072ac:	d527      	bpl.n	80072fe <__ssputs_r+0x8e>
 80072ae:	4629      	mov	r1, r5
 80072b0:	f7ff ff52 	bl	8007158 <_malloc_r>
 80072b4:	4606      	mov	r6, r0
 80072b6:	b360      	cbz	r0, 8007312 <__ssputs_r+0xa2>
 80072b8:	6921      	ldr	r1, [r4, #16]
 80072ba:	464a      	mov	r2, r9
 80072bc:	f000 fae6 	bl	800788c <memcpy>
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ca:	81a3      	strh	r3, [r4, #12]
 80072cc:	6126      	str	r6, [r4, #16]
 80072ce:	6165      	str	r5, [r4, #20]
 80072d0:	444e      	add	r6, r9
 80072d2:	eba5 0509 	sub.w	r5, r5, r9
 80072d6:	6026      	str	r6, [r4, #0]
 80072d8:	60a5      	str	r5, [r4, #8]
 80072da:	463e      	mov	r6, r7
 80072dc:	42be      	cmp	r6, r7
 80072de:	d900      	bls.n	80072e2 <__ssputs_r+0x72>
 80072e0:	463e      	mov	r6, r7
 80072e2:	6820      	ldr	r0, [r4, #0]
 80072e4:	4632      	mov	r2, r6
 80072e6:	4641      	mov	r1, r8
 80072e8:	f000 faa6 	bl	8007838 <memmove>
 80072ec:	68a3      	ldr	r3, [r4, #8]
 80072ee:	1b9b      	subs	r3, r3, r6
 80072f0:	60a3      	str	r3, [r4, #8]
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	4433      	add	r3, r6
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	2000      	movs	r0, #0
 80072fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fe:	462a      	mov	r2, r5
 8007300:	f000 fad2 	bl	80078a8 <_realloc_r>
 8007304:	4606      	mov	r6, r0
 8007306:	2800      	cmp	r0, #0
 8007308:	d1e0      	bne.n	80072cc <__ssputs_r+0x5c>
 800730a:	6921      	ldr	r1, [r4, #16]
 800730c:	4650      	mov	r0, sl
 800730e:	f7ff feb7 	bl	8007080 <_free_r>
 8007312:	230c      	movs	r3, #12
 8007314:	f8ca 3000 	str.w	r3, [sl]
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800731e:	81a3      	strh	r3, [r4, #12]
 8007320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007324:	e7e9      	b.n	80072fa <__ssputs_r+0x8a>
	...

08007328 <_svfiprintf_r>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	4698      	mov	r8, r3
 800732e:	898b      	ldrh	r3, [r1, #12]
 8007330:	061b      	lsls	r3, r3, #24
 8007332:	b09d      	sub	sp, #116	@ 0x74
 8007334:	4607      	mov	r7, r0
 8007336:	460d      	mov	r5, r1
 8007338:	4614      	mov	r4, r2
 800733a:	d510      	bpl.n	800735e <_svfiprintf_r+0x36>
 800733c:	690b      	ldr	r3, [r1, #16]
 800733e:	b973      	cbnz	r3, 800735e <_svfiprintf_r+0x36>
 8007340:	2140      	movs	r1, #64	@ 0x40
 8007342:	f7ff ff09 	bl	8007158 <_malloc_r>
 8007346:	6028      	str	r0, [r5, #0]
 8007348:	6128      	str	r0, [r5, #16]
 800734a:	b930      	cbnz	r0, 800735a <_svfiprintf_r+0x32>
 800734c:	230c      	movs	r3, #12
 800734e:	603b      	str	r3, [r7, #0]
 8007350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007354:	b01d      	add	sp, #116	@ 0x74
 8007356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735a:	2340      	movs	r3, #64	@ 0x40
 800735c:	616b      	str	r3, [r5, #20]
 800735e:	2300      	movs	r3, #0
 8007360:	9309      	str	r3, [sp, #36]	@ 0x24
 8007362:	2320      	movs	r3, #32
 8007364:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007368:	f8cd 800c 	str.w	r8, [sp, #12]
 800736c:	2330      	movs	r3, #48	@ 0x30
 800736e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800750c <_svfiprintf_r+0x1e4>
 8007372:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007376:	f04f 0901 	mov.w	r9, #1
 800737a:	4623      	mov	r3, r4
 800737c:	469a      	mov	sl, r3
 800737e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007382:	b10a      	cbz	r2, 8007388 <_svfiprintf_r+0x60>
 8007384:	2a25      	cmp	r2, #37	@ 0x25
 8007386:	d1f9      	bne.n	800737c <_svfiprintf_r+0x54>
 8007388:	ebba 0b04 	subs.w	fp, sl, r4
 800738c:	d00b      	beq.n	80073a6 <_svfiprintf_r+0x7e>
 800738e:	465b      	mov	r3, fp
 8007390:	4622      	mov	r2, r4
 8007392:	4629      	mov	r1, r5
 8007394:	4638      	mov	r0, r7
 8007396:	f7ff ff6b 	bl	8007270 <__ssputs_r>
 800739a:	3001      	adds	r0, #1
 800739c:	f000 80a7 	beq.w	80074ee <_svfiprintf_r+0x1c6>
 80073a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073a2:	445a      	add	r2, fp
 80073a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80073a6:	f89a 3000 	ldrb.w	r3, [sl]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 809f 	beq.w	80074ee <_svfiprintf_r+0x1c6>
 80073b0:	2300      	movs	r3, #0
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073ba:	f10a 0a01 	add.w	sl, sl, #1
 80073be:	9304      	str	r3, [sp, #16]
 80073c0:	9307      	str	r3, [sp, #28]
 80073c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80073c8:	4654      	mov	r4, sl
 80073ca:	2205      	movs	r2, #5
 80073cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d0:	484e      	ldr	r0, [pc, #312]	@ (800750c <_svfiprintf_r+0x1e4>)
 80073d2:	f7f8 ff15 	bl	8000200 <memchr>
 80073d6:	9a04      	ldr	r2, [sp, #16]
 80073d8:	b9d8      	cbnz	r0, 8007412 <_svfiprintf_r+0xea>
 80073da:	06d0      	lsls	r0, r2, #27
 80073dc:	bf44      	itt	mi
 80073de:	2320      	movmi	r3, #32
 80073e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073e4:	0711      	lsls	r1, r2, #28
 80073e6:	bf44      	itt	mi
 80073e8:	232b      	movmi	r3, #43	@ 0x2b
 80073ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073ee:	f89a 3000 	ldrb.w	r3, [sl]
 80073f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f4:	d015      	beq.n	8007422 <_svfiprintf_r+0xfa>
 80073f6:	9a07      	ldr	r2, [sp, #28]
 80073f8:	4654      	mov	r4, sl
 80073fa:	2000      	movs	r0, #0
 80073fc:	f04f 0c0a 	mov.w	ip, #10
 8007400:	4621      	mov	r1, r4
 8007402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007406:	3b30      	subs	r3, #48	@ 0x30
 8007408:	2b09      	cmp	r3, #9
 800740a:	d94b      	bls.n	80074a4 <_svfiprintf_r+0x17c>
 800740c:	b1b0      	cbz	r0, 800743c <_svfiprintf_r+0x114>
 800740e:	9207      	str	r2, [sp, #28]
 8007410:	e014      	b.n	800743c <_svfiprintf_r+0x114>
 8007412:	eba0 0308 	sub.w	r3, r0, r8
 8007416:	fa09 f303 	lsl.w	r3, r9, r3
 800741a:	4313      	orrs	r3, r2
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	46a2      	mov	sl, r4
 8007420:	e7d2      	b.n	80073c8 <_svfiprintf_r+0xa0>
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	1d19      	adds	r1, r3, #4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	9103      	str	r1, [sp, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	bfbb      	ittet	lt
 800742e:	425b      	neglt	r3, r3
 8007430:	f042 0202 	orrlt.w	r2, r2, #2
 8007434:	9307      	strge	r3, [sp, #28]
 8007436:	9307      	strlt	r3, [sp, #28]
 8007438:	bfb8      	it	lt
 800743a:	9204      	strlt	r2, [sp, #16]
 800743c:	7823      	ldrb	r3, [r4, #0]
 800743e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007440:	d10a      	bne.n	8007458 <_svfiprintf_r+0x130>
 8007442:	7863      	ldrb	r3, [r4, #1]
 8007444:	2b2a      	cmp	r3, #42	@ 0x2a
 8007446:	d132      	bne.n	80074ae <_svfiprintf_r+0x186>
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	1d1a      	adds	r2, r3, #4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	9203      	str	r2, [sp, #12]
 8007450:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007454:	3402      	adds	r4, #2
 8007456:	9305      	str	r3, [sp, #20]
 8007458:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800751c <_svfiprintf_r+0x1f4>
 800745c:	7821      	ldrb	r1, [r4, #0]
 800745e:	2203      	movs	r2, #3
 8007460:	4650      	mov	r0, sl
 8007462:	f7f8 fecd 	bl	8000200 <memchr>
 8007466:	b138      	cbz	r0, 8007478 <_svfiprintf_r+0x150>
 8007468:	9b04      	ldr	r3, [sp, #16]
 800746a:	eba0 000a 	sub.w	r0, r0, sl
 800746e:	2240      	movs	r2, #64	@ 0x40
 8007470:	4082      	lsls	r2, r0
 8007472:	4313      	orrs	r3, r2
 8007474:	3401      	adds	r4, #1
 8007476:	9304      	str	r3, [sp, #16]
 8007478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800747c:	4824      	ldr	r0, [pc, #144]	@ (8007510 <_svfiprintf_r+0x1e8>)
 800747e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007482:	2206      	movs	r2, #6
 8007484:	f7f8 febc 	bl	8000200 <memchr>
 8007488:	2800      	cmp	r0, #0
 800748a:	d036      	beq.n	80074fa <_svfiprintf_r+0x1d2>
 800748c:	4b21      	ldr	r3, [pc, #132]	@ (8007514 <_svfiprintf_r+0x1ec>)
 800748e:	bb1b      	cbnz	r3, 80074d8 <_svfiprintf_r+0x1b0>
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	3307      	adds	r3, #7
 8007494:	f023 0307 	bic.w	r3, r3, #7
 8007498:	3308      	adds	r3, #8
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749e:	4433      	add	r3, r6
 80074a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a2:	e76a      	b.n	800737a <_svfiprintf_r+0x52>
 80074a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80074a8:	460c      	mov	r4, r1
 80074aa:	2001      	movs	r0, #1
 80074ac:	e7a8      	b.n	8007400 <_svfiprintf_r+0xd8>
 80074ae:	2300      	movs	r3, #0
 80074b0:	3401      	adds	r4, #1
 80074b2:	9305      	str	r3, [sp, #20]
 80074b4:	4619      	mov	r1, r3
 80074b6:	f04f 0c0a 	mov.w	ip, #10
 80074ba:	4620      	mov	r0, r4
 80074bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074c0:	3a30      	subs	r2, #48	@ 0x30
 80074c2:	2a09      	cmp	r2, #9
 80074c4:	d903      	bls.n	80074ce <_svfiprintf_r+0x1a6>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0c6      	beq.n	8007458 <_svfiprintf_r+0x130>
 80074ca:	9105      	str	r1, [sp, #20]
 80074cc:	e7c4      	b.n	8007458 <_svfiprintf_r+0x130>
 80074ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80074d2:	4604      	mov	r4, r0
 80074d4:	2301      	movs	r3, #1
 80074d6:	e7f0      	b.n	80074ba <_svfiprintf_r+0x192>
 80074d8:	ab03      	add	r3, sp, #12
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	462a      	mov	r2, r5
 80074de:	4b0e      	ldr	r3, [pc, #56]	@ (8007518 <_svfiprintf_r+0x1f0>)
 80074e0:	a904      	add	r1, sp, #16
 80074e2:	4638      	mov	r0, r7
 80074e4:	f3af 8000 	nop.w
 80074e8:	1c42      	adds	r2, r0, #1
 80074ea:	4606      	mov	r6, r0
 80074ec:	d1d6      	bne.n	800749c <_svfiprintf_r+0x174>
 80074ee:	89ab      	ldrh	r3, [r5, #12]
 80074f0:	065b      	lsls	r3, r3, #25
 80074f2:	f53f af2d 	bmi.w	8007350 <_svfiprintf_r+0x28>
 80074f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074f8:	e72c      	b.n	8007354 <_svfiprintf_r+0x2c>
 80074fa:	ab03      	add	r3, sp, #12
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	462a      	mov	r2, r5
 8007500:	4b05      	ldr	r3, [pc, #20]	@ (8007518 <_svfiprintf_r+0x1f0>)
 8007502:	a904      	add	r1, sp, #16
 8007504:	4638      	mov	r0, r7
 8007506:	f000 f879 	bl	80075fc <_printf_i>
 800750a:	e7ed      	b.n	80074e8 <_svfiprintf_r+0x1c0>
 800750c:	08007bf9 	.word	0x08007bf9
 8007510:	08007c03 	.word	0x08007c03
 8007514:	00000000 	.word	0x00000000
 8007518:	08007271 	.word	0x08007271
 800751c:	08007bff 	.word	0x08007bff

08007520 <_printf_common>:
 8007520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007524:	4616      	mov	r6, r2
 8007526:	4698      	mov	r8, r3
 8007528:	688a      	ldr	r2, [r1, #8]
 800752a:	690b      	ldr	r3, [r1, #16]
 800752c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007530:	4293      	cmp	r3, r2
 8007532:	bfb8      	it	lt
 8007534:	4613      	movlt	r3, r2
 8007536:	6033      	str	r3, [r6, #0]
 8007538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800753c:	4607      	mov	r7, r0
 800753e:	460c      	mov	r4, r1
 8007540:	b10a      	cbz	r2, 8007546 <_printf_common+0x26>
 8007542:	3301      	adds	r3, #1
 8007544:	6033      	str	r3, [r6, #0]
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	0699      	lsls	r1, r3, #26
 800754a:	bf42      	ittt	mi
 800754c:	6833      	ldrmi	r3, [r6, #0]
 800754e:	3302      	addmi	r3, #2
 8007550:	6033      	strmi	r3, [r6, #0]
 8007552:	6825      	ldr	r5, [r4, #0]
 8007554:	f015 0506 	ands.w	r5, r5, #6
 8007558:	d106      	bne.n	8007568 <_printf_common+0x48>
 800755a:	f104 0a19 	add.w	sl, r4, #25
 800755e:	68e3      	ldr	r3, [r4, #12]
 8007560:	6832      	ldr	r2, [r6, #0]
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	42ab      	cmp	r3, r5
 8007566:	dc26      	bgt.n	80075b6 <_printf_common+0x96>
 8007568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800756c:	6822      	ldr	r2, [r4, #0]
 800756e:	3b00      	subs	r3, #0
 8007570:	bf18      	it	ne
 8007572:	2301      	movne	r3, #1
 8007574:	0692      	lsls	r2, r2, #26
 8007576:	d42b      	bmi.n	80075d0 <_printf_common+0xb0>
 8007578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800757c:	4641      	mov	r1, r8
 800757e:	4638      	mov	r0, r7
 8007580:	47c8      	blx	r9
 8007582:	3001      	adds	r0, #1
 8007584:	d01e      	beq.n	80075c4 <_printf_common+0xa4>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	6922      	ldr	r2, [r4, #16]
 800758a:	f003 0306 	and.w	r3, r3, #6
 800758e:	2b04      	cmp	r3, #4
 8007590:	bf02      	ittt	eq
 8007592:	68e5      	ldreq	r5, [r4, #12]
 8007594:	6833      	ldreq	r3, [r6, #0]
 8007596:	1aed      	subeq	r5, r5, r3
 8007598:	68a3      	ldr	r3, [r4, #8]
 800759a:	bf0c      	ite	eq
 800759c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075a0:	2500      	movne	r5, #0
 80075a2:	4293      	cmp	r3, r2
 80075a4:	bfc4      	itt	gt
 80075a6:	1a9b      	subgt	r3, r3, r2
 80075a8:	18ed      	addgt	r5, r5, r3
 80075aa:	2600      	movs	r6, #0
 80075ac:	341a      	adds	r4, #26
 80075ae:	42b5      	cmp	r5, r6
 80075b0:	d11a      	bne.n	80075e8 <_printf_common+0xc8>
 80075b2:	2000      	movs	r0, #0
 80075b4:	e008      	b.n	80075c8 <_printf_common+0xa8>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4652      	mov	r2, sl
 80075ba:	4641      	mov	r1, r8
 80075bc:	4638      	mov	r0, r7
 80075be:	47c8      	blx	r9
 80075c0:	3001      	adds	r0, #1
 80075c2:	d103      	bne.n	80075cc <_printf_common+0xac>
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075cc:	3501      	adds	r5, #1
 80075ce:	e7c6      	b.n	800755e <_printf_common+0x3e>
 80075d0:	18e1      	adds	r1, r4, r3
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	2030      	movs	r0, #48	@ 0x30
 80075d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075da:	4422      	add	r2, r4
 80075dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075e4:	3302      	adds	r3, #2
 80075e6:	e7c7      	b.n	8007578 <_printf_common+0x58>
 80075e8:	2301      	movs	r3, #1
 80075ea:	4622      	mov	r2, r4
 80075ec:	4641      	mov	r1, r8
 80075ee:	4638      	mov	r0, r7
 80075f0:	47c8      	blx	r9
 80075f2:	3001      	adds	r0, #1
 80075f4:	d0e6      	beq.n	80075c4 <_printf_common+0xa4>
 80075f6:	3601      	adds	r6, #1
 80075f8:	e7d9      	b.n	80075ae <_printf_common+0x8e>
	...

080075fc <_printf_i>:
 80075fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	7e0f      	ldrb	r7, [r1, #24]
 8007602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007604:	2f78      	cmp	r7, #120	@ 0x78
 8007606:	4691      	mov	r9, r2
 8007608:	4680      	mov	r8, r0
 800760a:	460c      	mov	r4, r1
 800760c:	469a      	mov	sl, r3
 800760e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007612:	d807      	bhi.n	8007624 <_printf_i+0x28>
 8007614:	2f62      	cmp	r7, #98	@ 0x62
 8007616:	d80a      	bhi.n	800762e <_printf_i+0x32>
 8007618:	2f00      	cmp	r7, #0
 800761a:	f000 80d1 	beq.w	80077c0 <_printf_i+0x1c4>
 800761e:	2f58      	cmp	r7, #88	@ 0x58
 8007620:	f000 80b8 	beq.w	8007794 <_printf_i+0x198>
 8007624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800762c:	e03a      	b.n	80076a4 <_printf_i+0xa8>
 800762e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007632:	2b15      	cmp	r3, #21
 8007634:	d8f6      	bhi.n	8007624 <_printf_i+0x28>
 8007636:	a101      	add	r1, pc, #4	@ (adr r1, 800763c <_printf_i+0x40>)
 8007638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800763c:	08007695 	.word	0x08007695
 8007640:	080076a9 	.word	0x080076a9
 8007644:	08007625 	.word	0x08007625
 8007648:	08007625 	.word	0x08007625
 800764c:	08007625 	.word	0x08007625
 8007650:	08007625 	.word	0x08007625
 8007654:	080076a9 	.word	0x080076a9
 8007658:	08007625 	.word	0x08007625
 800765c:	08007625 	.word	0x08007625
 8007660:	08007625 	.word	0x08007625
 8007664:	08007625 	.word	0x08007625
 8007668:	080077a7 	.word	0x080077a7
 800766c:	080076d3 	.word	0x080076d3
 8007670:	08007761 	.word	0x08007761
 8007674:	08007625 	.word	0x08007625
 8007678:	08007625 	.word	0x08007625
 800767c:	080077c9 	.word	0x080077c9
 8007680:	08007625 	.word	0x08007625
 8007684:	080076d3 	.word	0x080076d3
 8007688:	08007625 	.word	0x08007625
 800768c:	08007625 	.word	0x08007625
 8007690:	08007769 	.word	0x08007769
 8007694:	6833      	ldr	r3, [r6, #0]
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6032      	str	r2, [r6, #0]
 800769c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076a4:	2301      	movs	r3, #1
 80076a6:	e09c      	b.n	80077e2 <_printf_i+0x1e6>
 80076a8:	6833      	ldr	r3, [r6, #0]
 80076aa:	6820      	ldr	r0, [r4, #0]
 80076ac:	1d19      	adds	r1, r3, #4
 80076ae:	6031      	str	r1, [r6, #0]
 80076b0:	0606      	lsls	r6, r0, #24
 80076b2:	d501      	bpl.n	80076b8 <_printf_i+0xbc>
 80076b4:	681d      	ldr	r5, [r3, #0]
 80076b6:	e003      	b.n	80076c0 <_printf_i+0xc4>
 80076b8:	0645      	lsls	r5, r0, #25
 80076ba:	d5fb      	bpl.n	80076b4 <_printf_i+0xb8>
 80076bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076c0:	2d00      	cmp	r5, #0
 80076c2:	da03      	bge.n	80076cc <_printf_i+0xd0>
 80076c4:	232d      	movs	r3, #45	@ 0x2d
 80076c6:	426d      	negs	r5, r5
 80076c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076cc:	4858      	ldr	r0, [pc, #352]	@ (8007830 <_printf_i+0x234>)
 80076ce:	230a      	movs	r3, #10
 80076d0:	e011      	b.n	80076f6 <_printf_i+0xfa>
 80076d2:	6821      	ldr	r1, [r4, #0]
 80076d4:	6833      	ldr	r3, [r6, #0]
 80076d6:	0608      	lsls	r0, r1, #24
 80076d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80076dc:	d402      	bmi.n	80076e4 <_printf_i+0xe8>
 80076de:	0649      	lsls	r1, r1, #25
 80076e0:	bf48      	it	mi
 80076e2:	b2ad      	uxthmi	r5, r5
 80076e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80076e6:	4852      	ldr	r0, [pc, #328]	@ (8007830 <_printf_i+0x234>)
 80076e8:	6033      	str	r3, [r6, #0]
 80076ea:	bf14      	ite	ne
 80076ec:	230a      	movne	r3, #10
 80076ee:	2308      	moveq	r3, #8
 80076f0:	2100      	movs	r1, #0
 80076f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076f6:	6866      	ldr	r6, [r4, #4]
 80076f8:	60a6      	str	r6, [r4, #8]
 80076fa:	2e00      	cmp	r6, #0
 80076fc:	db05      	blt.n	800770a <_printf_i+0x10e>
 80076fe:	6821      	ldr	r1, [r4, #0]
 8007700:	432e      	orrs	r6, r5
 8007702:	f021 0104 	bic.w	r1, r1, #4
 8007706:	6021      	str	r1, [r4, #0]
 8007708:	d04b      	beq.n	80077a2 <_printf_i+0x1a6>
 800770a:	4616      	mov	r6, r2
 800770c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007710:	fb03 5711 	mls	r7, r3, r1, r5
 8007714:	5dc7      	ldrb	r7, [r0, r7]
 8007716:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800771a:	462f      	mov	r7, r5
 800771c:	42bb      	cmp	r3, r7
 800771e:	460d      	mov	r5, r1
 8007720:	d9f4      	bls.n	800770c <_printf_i+0x110>
 8007722:	2b08      	cmp	r3, #8
 8007724:	d10b      	bne.n	800773e <_printf_i+0x142>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	07df      	lsls	r7, r3, #31
 800772a:	d508      	bpl.n	800773e <_printf_i+0x142>
 800772c:	6923      	ldr	r3, [r4, #16]
 800772e:	6861      	ldr	r1, [r4, #4]
 8007730:	4299      	cmp	r1, r3
 8007732:	bfde      	ittt	le
 8007734:	2330      	movle	r3, #48	@ 0x30
 8007736:	f806 3c01 	strble.w	r3, [r6, #-1]
 800773a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800773e:	1b92      	subs	r2, r2, r6
 8007740:	6122      	str	r2, [r4, #16]
 8007742:	f8cd a000 	str.w	sl, [sp]
 8007746:	464b      	mov	r3, r9
 8007748:	aa03      	add	r2, sp, #12
 800774a:	4621      	mov	r1, r4
 800774c:	4640      	mov	r0, r8
 800774e:	f7ff fee7 	bl	8007520 <_printf_common>
 8007752:	3001      	adds	r0, #1
 8007754:	d14a      	bne.n	80077ec <_printf_i+0x1f0>
 8007756:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800775a:	b004      	add	sp, #16
 800775c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	f043 0320 	orr.w	r3, r3, #32
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	4832      	ldr	r0, [pc, #200]	@ (8007834 <_printf_i+0x238>)
 800776a:	2778      	movs	r7, #120	@ 0x78
 800776c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	6831      	ldr	r1, [r6, #0]
 8007774:	061f      	lsls	r7, r3, #24
 8007776:	f851 5b04 	ldr.w	r5, [r1], #4
 800777a:	d402      	bmi.n	8007782 <_printf_i+0x186>
 800777c:	065f      	lsls	r7, r3, #25
 800777e:	bf48      	it	mi
 8007780:	b2ad      	uxthmi	r5, r5
 8007782:	6031      	str	r1, [r6, #0]
 8007784:	07d9      	lsls	r1, r3, #31
 8007786:	bf44      	itt	mi
 8007788:	f043 0320 	orrmi.w	r3, r3, #32
 800778c:	6023      	strmi	r3, [r4, #0]
 800778e:	b11d      	cbz	r5, 8007798 <_printf_i+0x19c>
 8007790:	2310      	movs	r3, #16
 8007792:	e7ad      	b.n	80076f0 <_printf_i+0xf4>
 8007794:	4826      	ldr	r0, [pc, #152]	@ (8007830 <_printf_i+0x234>)
 8007796:	e7e9      	b.n	800776c <_printf_i+0x170>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	f023 0320 	bic.w	r3, r3, #32
 800779e:	6023      	str	r3, [r4, #0]
 80077a0:	e7f6      	b.n	8007790 <_printf_i+0x194>
 80077a2:	4616      	mov	r6, r2
 80077a4:	e7bd      	b.n	8007722 <_printf_i+0x126>
 80077a6:	6833      	ldr	r3, [r6, #0]
 80077a8:	6825      	ldr	r5, [r4, #0]
 80077aa:	6961      	ldr	r1, [r4, #20]
 80077ac:	1d18      	adds	r0, r3, #4
 80077ae:	6030      	str	r0, [r6, #0]
 80077b0:	062e      	lsls	r6, r5, #24
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	d501      	bpl.n	80077ba <_printf_i+0x1be>
 80077b6:	6019      	str	r1, [r3, #0]
 80077b8:	e002      	b.n	80077c0 <_printf_i+0x1c4>
 80077ba:	0668      	lsls	r0, r5, #25
 80077bc:	d5fb      	bpl.n	80077b6 <_printf_i+0x1ba>
 80077be:	8019      	strh	r1, [r3, #0]
 80077c0:	2300      	movs	r3, #0
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	4616      	mov	r6, r2
 80077c6:	e7bc      	b.n	8007742 <_printf_i+0x146>
 80077c8:	6833      	ldr	r3, [r6, #0]
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	6032      	str	r2, [r6, #0]
 80077ce:	681e      	ldr	r6, [r3, #0]
 80077d0:	6862      	ldr	r2, [r4, #4]
 80077d2:	2100      	movs	r1, #0
 80077d4:	4630      	mov	r0, r6
 80077d6:	f7f8 fd13 	bl	8000200 <memchr>
 80077da:	b108      	cbz	r0, 80077e0 <_printf_i+0x1e4>
 80077dc:	1b80      	subs	r0, r0, r6
 80077de:	6060      	str	r0, [r4, #4]
 80077e0:	6863      	ldr	r3, [r4, #4]
 80077e2:	6123      	str	r3, [r4, #16]
 80077e4:	2300      	movs	r3, #0
 80077e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077ea:	e7aa      	b.n	8007742 <_printf_i+0x146>
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	4632      	mov	r2, r6
 80077f0:	4649      	mov	r1, r9
 80077f2:	4640      	mov	r0, r8
 80077f4:	47d0      	blx	sl
 80077f6:	3001      	adds	r0, #1
 80077f8:	d0ad      	beq.n	8007756 <_printf_i+0x15a>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	079b      	lsls	r3, r3, #30
 80077fe:	d413      	bmi.n	8007828 <_printf_i+0x22c>
 8007800:	68e0      	ldr	r0, [r4, #12]
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	4298      	cmp	r0, r3
 8007806:	bfb8      	it	lt
 8007808:	4618      	movlt	r0, r3
 800780a:	e7a6      	b.n	800775a <_printf_i+0x15e>
 800780c:	2301      	movs	r3, #1
 800780e:	4632      	mov	r2, r6
 8007810:	4649      	mov	r1, r9
 8007812:	4640      	mov	r0, r8
 8007814:	47d0      	blx	sl
 8007816:	3001      	adds	r0, #1
 8007818:	d09d      	beq.n	8007756 <_printf_i+0x15a>
 800781a:	3501      	adds	r5, #1
 800781c:	68e3      	ldr	r3, [r4, #12]
 800781e:	9903      	ldr	r1, [sp, #12]
 8007820:	1a5b      	subs	r3, r3, r1
 8007822:	42ab      	cmp	r3, r5
 8007824:	dcf2      	bgt.n	800780c <_printf_i+0x210>
 8007826:	e7eb      	b.n	8007800 <_printf_i+0x204>
 8007828:	2500      	movs	r5, #0
 800782a:	f104 0619 	add.w	r6, r4, #25
 800782e:	e7f5      	b.n	800781c <_printf_i+0x220>
 8007830:	08007c0a 	.word	0x08007c0a
 8007834:	08007c1b 	.word	0x08007c1b

08007838 <memmove>:
 8007838:	4288      	cmp	r0, r1
 800783a:	b510      	push	{r4, lr}
 800783c:	eb01 0402 	add.w	r4, r1, r2
 8007840:	d902      	bls.n	8007848 <memmove+0x10>
 8007842:	4284      	cmp	r4, r0
 8007844:	4623      	mov	r3, r4
 8007846:	d807      	bhi.n	8007858 <memmove+0x20>
 8007848:	1e43      	subs	r3, r0, #1
 800784a:	42a1      	cmp	r1, r4
 800784c:	d008      	beq.n	8007860 <memmove+0x28>
 800784e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007856:	e7f8      	b.n	800784a <memmove+0x12>
 8007858:	4402      	add	r2, r0
 800785a:	4601      	mov	r1, r0
 800785c:	428a      	cmp	r2, r1
 800785e:	d100      	bne.n	8007862 <memmove+0x2a>
 8007860:	bd10      	pop	{r4, pc}
 8007862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800786a:	e7f7      	b.n	800785c <memmove+0x24>

0800786c <_sbrk_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d06      	ldr	r5, [pc, #24]	@ (8007888 <_sbrk_r+0x1c>)
 8007870:	2300      	movs	r3, #0
 8007872:	4604      	mov	r4, r0
 8007874:	4608      	mov	r0, r1
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	f7f9 fc12 	bl	80010a0 <_sbrk>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_sbrk_r+0x1a>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_sbrk_r+0x1a>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	2000033c 	.word	0x2000033c

0800788c <memcpy>:
 800788c:	440a      	add	r2, r1
 800788e:	4291      	cmp	r1, r2
 8007890:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007894:	d100      	bne.n	8007898 <memcpy+0xc>
 8007896:	4770      	bx	lr
 8007898:	b510      	push	{r4, lr}
 800789a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800789e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078a2:	4291      	cmp	r1, r2
 80078a4:	d1f9      	bne.n	800789a <memcpy+0xe>
 80078a6:	bd10      	pop	{r4, pc}

080078a8 <_realloc_r>:
 80078a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ac:	4607      	mov	r7, r0
 80078ae:	4614      	mov	r4, r2
 80078b0:	460d      	mov	r5, r1
 80078b2:	b921      	cbnz	r1, 80078be <_realloc_r+0x16>
 80078b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078b8:	4611      	mov	r1, r2
 80078ba:	f7ff bc4d 	b.w	8007158 <_malloc_r>
 80078be:	b92a      	cbnz	r2, 80078cc <_realloc_r+0x24>
 80078c0:	f7ff fbde 	bl	8007080 <_free_r>
 80078c4:	4625      	mov	r5, r4
 80078c6:	4628      	mov	r0, r5
 80078c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078cc:	f000 f81a 	bl	8007904 <_malloc_usable_size_r>
 80078d0:	4284      	cmp	r4, r0
 80078d2:	4606      	mov	r6, r0
 80078d4:	d802      	bhi.n	80078dc <_realloc_r+0x34>
 80078d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078da:	d8f4      	bhi.n	80078c6 <_realloc_r+0x1e>
 80078dc:	4621      	mov	r1, r4
 80078de:	4638      	mov	r0, r7
 80078e0:	f7ff fc3a 	bl	8007158 <_malloc_r>
 80078e4:	4680      	mov	r8, r0
 80078e6:	b908      	cbnz	r0, 80078ec <_realloc_r+0x44>
 80078e8:	4645      	mov	r5, r8
 80078ea:	e7ec      	b.n	80078c6 <_realloc_r+0x1e>
 80078ec:	42b4      	cmp	r4, r6
 80078ee:	4622      	mov	r2, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	bf28      	it	cs
 80078f4:	4632      	movcs	r2, r6
 80078f6:	f7ff ffc9 	bl	800788c <memcpy>
 80078fa:	4629      	mov	r1, r5
 80078fc:	4638      	mov	r0, r7
 80078fe:	f7ff fbbf 	bl	8007080 <_free_r>
 8007902:	e7f1      	b.n	80078e8 <_realloc_r+0x40>

08007904 <_malloc_usable_size_r>:
 8007904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007908:	1f18      	subs	r0, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	bfbc      	itt	lt
 800790e:	580b      	ldrlt	r3, [r1, r0]
 8007910:	18c0      	addlt	r0, r0, r3
 8007912:	4770      	bx	lr

08007914 <_init>:
 8007914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007916:	bf00      	nop
 8007918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791a:	bc08      	pop	{r3}
 800791c:	469e      	mov	lr, r3
 800791e:	4770      	bx	lr

08007920 <_fini>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	bf00      	nop
 8007924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007926:	bc08      	pop	{r3}
 8007928:	469e      	mov	lr, r3
 800792a:	4770      	bx	lr
